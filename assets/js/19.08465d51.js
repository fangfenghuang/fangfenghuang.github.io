(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{346:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),e("ul",[e("li",[t._v("Prometheus Server: 用于收集和存储时间序列数据。")]),t._v(" "),e("li",[t._v("Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当Prometheus server 来 pull 时，直接返回实时状态的 metrics。对于机器层面的 metrices，需要使用 node exporter。")]),t._v(" "),e("li",[t._v("Push Gateway: 主要用于短期的 jobs。")]),t._v(" "),e("li",[t._v("Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。")]),t._v(" "),e("li",[t._v("Alertmanager: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。")])]),t._v(" "),e("h2",{attrs:{id:"curl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#curl"}},[t._v("#")]),t._v(" curl")]),t._v(" "),e("p",[t._v('echo "hfftest 111" |curl --data-binary @- http://10.19.0.13:9091/metrics/job/schedulerStatus/instance/tztest')]),t._v(" "),e("p",[t._v("curl -X POST -g 'http://127.0.0.1:9090/api/v1/admin/tsdb/delete_series?match[]=scheduler_effective_dynamic_schedule_count'")]),t._v(" "),e("p",[t._v("curl -X POST -g 'http://10.19.0.13:9090/api/v1/admin/tsdb/delete_series?match[]={job=\"schedulerStatus\"}'")]),t._v(" "),e("h2",{attrs:{id:"热加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#热加载"}},[t._v("#")]),t._v(" 热加载")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -XPOST "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("prometheus-url"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/-/reload\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"pushgateway"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pushgateway"}},[t._v("#")]),t._v(" pushgateway")]),t._v(" "),e("h2",{attrs:{id:"grafana"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grafana"}},[t._v("#")]),t._v(" Grafana")]),t._v(" "),e("h2",{attrs:{id:"指标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指标"}},[t._v("#")]),t._v(" 指标")]),t._v(" "),e("h3",{attrs:{id:"指标类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指标类型"}},[t._v("#")]),t._v(" 指标类型")]),t._v(" "),e("p",[t._v("Counter（计数器）对数据只增不减\nGauage（仪表盘）可增可减\nHistogram（直方图）,Summary（摘要）提供更多的统计信")]),t._v(" "),e("h3",{attrs:{id:"计算表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算表达式"}},[t._v("#")]),t._v(" 计算表达式：")]),t._v(" "),e("p",[t._v("Prometheus为不同的数据提供了非常多的计算函数，其中有个小技巧就是遇到counter数据类型，在做任何操作之前，先套上一个rate()或者increase()函数")]),t._v(" "),e("blockquote",[e("p",[t._v("100-avg(irate(node_cpu_seconds_total{mode='idle'}[5m])) by (node_name)*100")])]),t._v(" "),e("h3",{attrs:{id:"指标命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指标命名规范"}},[t._v("#")]),t._v(" 指标命名规范")]),t._v(" "),e("p",[t._v("一个指标名称：\n• 必须符合有效字符的数据模型。\n• 应该具有与指标所属域相关的（单个词汇）应用程序前缀。前缀有时被客户端库称为命名空间。对于特定于应用程序的指标，前缀通常是应用程序名称本身。然而，有时候指标更通用，比如客户端库导出的标准化指标。例如：\n○ prometheus_notifications_total （针对Prometheus 服务器）\n○ process_cpu_seconds_total （由客户端库导出）\n○ http_request_duration_seconds （用于所有HTTP请求）\n• 必须有一个单一的单位（即，不要把秒与毫秒，或秒与字节混用）。\n• 应该使用基本单位（如秒、字节、米——而不是毫秒、兆字节、公里）。参见下面的基本单位列表。\n• 应以复数形式用后缀来描述单位。请注意，累计计数以total作为后缀，附加在单位之后。\n○ http_request_duration_seconds\n○ node_memory_usage_bytes\n○ http_requests_total （用于无单位的累计计数）\n○ process_cpu_seconds_total （用于有单位的累计计数）\n○ foobar_build_info （用于提供关于正在运行的二进制文件的元数据的伪指标）\n• 应该在所有的标签维度中表示相同的监控逻辑。\n○ 请求持久时长\n○ 传输的数据字节数\n○ 瞬时资源使用百分比")])])}),[],!1,null,null,null);e.default=r.exports}}]);