(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var o,i,s=e[0],c=e[1],l=e[2],d=0,u=[];d<s.length;d++)i=s[d],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&u.push(r[i][0]),r[i]=0;for(o in c)Object.prototype.hasOwnProperty.call(c,o)&&(n[o]=c[o]);for(p&&p(e);u.length;)u.shift()();return a.push.apply(a,l||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],o=!0,s=1;s<t.length;s++){var c=t[s];0!==r[c]&&(o=!1)}o&&(a.splice(e--,1),n=i(i.s=t[0]))}return n}var o={},r={1:0},a=[];function i(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var o=new Promise((function(e,o){t=r[n]=[e,o]}));e.push(t[2]=o);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"22dca872",3:"a92a42d1",4:"4db3c7ae",5:"3ff92d1d",6:"a40fb25e",7:"ad948ccb",8:"f50e1521",9:"5120c794",10:"5a582304",11:"858db8bd",12:"0a04da78",13:"8ce751fb",14:"3adaa259",15:"88752f46",16:"e0461061",17:"55ace30a",18:"36d25c9a",19:"da9cf193",20:"8238e31d",21:"888995f7",22:"dbf6d53d",23:"95572180",24:"dcbd09a8",25:"05f410fc",26:"c5f26a87",27:"830a605b",28:"6e0ee242",29:"975f55a2",30:"04a41aac",31:"17bb6b87",32:"c705e85f",33:"96da5912",34:"35b2b5b4",35:"4eaa7f07",36:"9bf2af9b",37:"d31bac04",38:"996c3388",39:"87ce54a2",40:"3b981353",41:"c78e7acb",42:"f950105e",43:"38e4f4bc",44:"a3a789d4",45:"0d4ca851",46:"d80ffa99",47:"7cd5f796",48:"6dc4dd5f",49:"785d2362",50:"521816c1",51:"14c44011",52:"517f26b3",53:"a565d056",54:"2547830f",55:"9a803376",56:"436894d8",57:"a634a9d5",58:"ceb51a75",59:"e8b9d79d",60:"36522f68",61:"72debe50",62:"faf8c816",63:"a258529f",64:"63031223",65:"66c44bf9",66:"e2e9e2f6",67:"235bfe68",68:"7f71a83e"}[n]+".js"}(n);var c=new Error;a=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=r[n];if(0!==t){if(t){var o=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+o+": "+a+")",c.name="ChunkLoadError",c.type=o,c.request=a,t[1](c)}r[n]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=o,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)i.d(t,o,function(e){return n[e]}.bind(null,o));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var p=c;a.push([102,0]),t()}([function(n,e,t){"use strict";function o(n,e,t,o,r,a,i,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),o&&(l.functional=!0),a&&(l._scopeId="data-v-"+a),i?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),r&&r.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},l._ssrRegister=c):r&&(c=s?function(){r.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:r),c)if(l.functional){l._injectStyles=c;var p=l.render;l.render=function(n,e){return c.call(e),p(n,e)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return o}))},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var o=t(25),r=Function.prototype,a=r.bind,i=r.call,s=o&&a.bind(i,i);n.exports=o?function(n){return n&&s(n)}:function(n){return n&&function(){return i.apply(n,arguments)}}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var o=t(67),r="object"==typeof self&&self&&self.Object===Object&&self,a=o||r||Function("return this")();n.exports=a},function(n,e,t){var o=t(4);n.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var o=t(2),r=t(45),a=o({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(r(n),e)}},function(n,e,t){var o=t(1);n.exports=function(n){return"object"==typeof n?null!==n:o(n)}},function(n,e,t){var o=t(157),r=t(160);n.exports=function(n,e){var t=r(n,e);return o(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return o})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return p})),t.d(e,"c",(function(){return d})),t.d(e,"f",(function(){return u})),t.d(e,"l",(function(){return m})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return y}));const o=/#.*$/,r=/\.(md|html)$/,a=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(o,"").replace(r,"")}function c(n){return i.test(n)}function l(n){return/^mailto:/.test(n)}function p(n){return/^tel:/.test(n)}function d(n){if(c(n))return n;if(!n)return"404";const e=n.match(o),t=e?e[0]:"",r=s(n);return a.test(r)?n:r+".html"+t}function u(n,e){const t=n.hash,r=function(n){const e=n&&n.match(o);if(e)return e[0]}(e);if(r&&t!==r)return!1;return s(n.path)===s(e)}function m(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){const o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;const r=e.split("/");t&&r[r.length-1]||r.pop();const a=n.replace(/^\//,"").split("/");for(let n=0;n<a.length;n++){const e=a[n];".."===e?r.pop():"."!==e&&r.push(e)}""!==r[0]&&r.unshift("");return r.join("/")}(e,t));const o=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===o)return Object.assign({},n[e],{type:"page",path:d(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function f(n,e,t,o){const{pages:r,themeConfig:a}=t,i=o&&a.locales&&a.locales[o]||a;if("auto"===(n.frontmatter.sidebar||i.sidebar||a.sidebar))return h(n);const s=i.sidebar||a.sidebar;if(s){const{base:t,config:o}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const o in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(o)))return{base:o,config:e[o]};var t;return{}}(e,s);return"auto"===o?h(n):o?o.map(n=>function n(e,t,o,r=1){if("string"==typeof e)return m(t,e,o);if(Array.isArray(e))return Object.assign(m(t,e[0],o),{title:e[1]});{r>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const a=e.children||[];return 0===a.length&&e.path?Object.assign(m(t,e.path,o),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map(e=>n(e,t,o,r+1)),collapsable:!1!==e.collapsable}}}(n,r,t)):[]}return[]}function h(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function k(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function y(n,e){return k(e)-k(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var o=t(14),r=t(142),a=t(143),i=o?o.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?r(n):a(n)}},function(n,e,t){var o=t(6).Symbol;n.exports=o},function(n,e,t){var o=t(7),r=t(61),a=t(98),i=t(24),s=t(52),c=TypeError,l=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=o?a?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var o=p(n,e);o&&o.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return l(n,e,t)}:l:function(n,e,t){if(i(n),e=s(e),i(t),r)try{return l(n,e,t)}catch(n){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var o=t(3),r=t(1),a=function(n){return r(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(o[n]):o[n]&&o[n][e]}},function(n,e,t){var o=t(7),r=t(15),a=t(29);n.exports=o?function(n,e,t){return r.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var o=t(147),r=t(148),a=t(149),i=t(150),s=t(151);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}c.prototype.clear=o,c.prototype.delete=r,c.prototype.get=a,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var o=t(69);n.exports=function(n,e){for(var t=n.length;t--;)if(o(n[t][0],e))return t;return-1}},function(n,e,t){var o=t(10)(Object,"create");n.exports=o},function(n,e,t){var o=t(169);n.exports=function(n,e){var t=n.__data__;return o(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var o=t(40);n.exports=function(n){if("string"==typeof n||o(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var o,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(o=function(){var n,e,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(o[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=r(n,o.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(o.barSelector),p=o.speed,d=o.easing;return c.offsetWidth,i((function(e){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var r;return(r="translate3d"===o.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,r}(n,p,d)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+p+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),p)}),p)):setTimeout(e,p)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),o.trickleSpeed)};return o.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*r(Math.random()*e,.1,.95)),e=r(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},n=0,e=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===e&&t.start(),n++,e++,o.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=o.template;var r,i=e.querySelector(o.barSelector),c=n?"-100":a(t.status||0),p=document.querySelector(o.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),o.showSpinner||(r=e.querySelector(o.spinnerSelector))&&u(r),p!=document.body&&l(p,"nprogress-custom-parent"),p.appendChild(e),e},t.remove=function(){p(document.documentElement,"nprogress-busy"),p(document.querySelector(o.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&u(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var o,r=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);r--;)if((o=n[r]+a)in t)return o;return e}(t))}function o(n,e,o){e=t(e),n.style[e]=o}return function(n,e){var t,r,a=arguments;if(2==a.length)for(t in e)void 0!==(r=e[t])&&e.hasOwnProperty(t)&&o(n,t,r);else o(n,a[1],a[2])}}();function c(n,e){return("string"==typeof n?n:d(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=d(n),o=t+e;c(t,e)||(n.className=o.substring(1))}function p(n,e){var t,o=d(n);c(n,e)&&(t=o.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function d(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function u(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?o.call(e,t,e,n):o)||(n.exports=r)},function(n,e,t){var o=t(9),r=String,a=TypeError;n.exports=function(n){if(o(n))return n;throw a(r(n)+" is not an object")}},function(n,e,t){var o=t(4);n.exports=!o((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var o=t(43),r=t(51);n.exports=function(n){return o(r(n))}},function(n,e,t){var o=t(3),r=t(58),a=t(8),i=t(60),s=t(56),c=t(55),l=r("wks"),p=o.Symbol,d=p&&p.for,u=c?p:p&&p.withoutSetter||i;n.exports=function(n){if(!a(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&a(p,n)?l[n]=p[n]:l[n]=c&&d?d(e):u(e)}return l[n]}},function(n,e,t){var o=t(25),r=Function.prototype.call;n.exports=o?r.bind(r):function(){return r.apply(r,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var o=t(2),r=o({}.toString),a=o("".slice);n.exports=function(n){return a(r(n),8,-1)}},function(n,e,t){var o=t(3),r=t(32),a=o["__core-js_shared__"]||r("__core-js_shared__",{});n.exports=a},function(n,e,t){var o=t(3),r=Object.defineProperty;n.exports=function(n,e){try{r(o,n,{value:e,configurable:!0,writable:!0})}catch(t){o[n]=e}return e}},function(n,e,t){var o=t(141),r=t(12),a=Object.prototype,i=a.hasOwnProperty,s=a.propertyIsEnumerable,c=o(function(){return arguments}())?o:function(n){return r(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var o=t(10)(t(6),"Map");n.exports=o},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var o=t(161),r=t(168),a=t(170),i=t(171),s=t(172);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}c.prototype.clear=o,c.prototype.delete=r,c.prototype.get=a,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var o=t(5),r=t(40),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(o(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!r(n))||(i.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var o=t(13),r=t(12);n.exports=function(n){return"symbol"==typeof n||r(n)&&"[object Symbol]"==o(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var o=t(3),r=t(50).f,a=t(17),i=t(110),s=t(32),c=t(63),l=t(122);n.exports=function(n,e){var t,p,d,u,m,f=n.target,h=n.global,g=n.stat;if(t=h?o:g?o[f]||s(f,{}):(o[f]||{}).prototype)for(p in e){if(u=e[p],d=n.dontCallGetSet?(m=r(t,p))&&m.value:t[p],!l(h?p:f+(g?".":"#")+p,n.forced)&&void 0!==d){if(typeof u==typeof d)continue;c(u,d)}(n.sham||d&&d.sham)&&a(u,"sham",!0),i(t,p,u,n)}}},function(n,e,t){var o=t(2),r=t(4),a=t(30),i=Object,s=o("".split);n.exports=r((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?s(n,""):i(n)}:i},function(n,e,t){var o=t(1),r=t(108),a=TypeError;n.exports=function(n){if(o(n))return n;throw a(r(n)+" is not a function")}},function(n,e,t){var o=t(51),r=Object;n.exports=function(n){return r(o(n))}},function(n,e){n.exports={}},function(n,e,t){var o=t(120);n.exports=function(n){return o(n.length)}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,a=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),p=Object.prototype.toString,d=Math.max,u=Math.min,m=function(){return l.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==p.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=r.test(n);return s||a.test(n)?i(n.slice(2),s?2:8):o.test(n)?NaN:+n}n.exports=function(n,e,t){var o,r,a,i,s,c,l=0,p=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=o,a=r;return o=r=void 0,l=e,i=n.apply(a,t)}function k(n){return l=n,s=setTimeout(_,e),p?b(n):i}function y(n){var t=n-c;return void 0===c||t>=e||t<0||g&&n-l>=a}function _(){var n=m();if(y(n))return E(n);s=setTimeout(_,function(n){var t=e-(n-c);return g?u(t,a-(n-l)):t}(n))}function E(n){return s=void 0,v&&o?b(n):(o=r=void 0,i)}function x(){var n=m(),t=y(n);if(o=arguments,r=this,c=n,t){if(void 0===s)return k(c);if(g)return s=setTimeout(_,e),b(c)}return void 0===s&&(s=setTimeout(_,e)),i}return e=h(e)||0,f(t)&&(p=!!t.leading,a=(g="maxWait"in t)?d(h(t.maxWait)||0,e):a,v="trailing"in t?!!t.trailing:v),x.cancel=function(){void 0!==s&&clearTimeout(s),l=0,o=c=r=s=void 0},x.flush=function(){return void 0===s?i:E(m())},x}},function(n,e,t){var o=t(7),r=t(28),a=t(104),i=t(29),s=t(26),c=t(52),l=t(8),p=t(61),d=Object.getOwnPropertyDescriptor;e.f=o?d:function(n,e){if(n=s(n),e=c(e),p)try{return d(n,e)}catch(n){}if(l(n,e))return i(!r(a.f,n,e),n[e])}},function(n,e){var t=TypeError;n.exports=function(n){if(null==n)throw t("Can't call method on "+n);return n}},function(n,e,t){var o=t(105),r=t(53);n.exports=function(n){var e=o(n,"string");return r(e)?e:e+""}},function(n,e,t){var o=t(16),r=t(1),a=t(54),i=t(55),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=o("Symbol");return r(e)&&a(e.prototype,s(n))}},function(n,e,t){var o=t(2);n.exports=o({}.isPrototypeOf)},function(n,e,t){var o=t(56);n.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var o=t(57),r=t(4);n.exports=!!Object.getOwnPropertySymbols&&!r((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(n,e,t){var o,r,a=t(3),i=t(106),s=a.process,c=a.Deno,l=s&&s.versions||c&&c.version,p=l&&l.v8;p&&(r=(o=p.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!r&&i&&(!(o=i.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=i.match(/Chrome\/(\d+)/))&&(r=+o[1]),n.exports=r},function(n,e,t){var o=t(59),r=t(31);(n.exports=function(n,e){return r[n]||(r[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.24.0",mode:o?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.24.0/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var o=t(2),r=0,a=Math.random(),i=o(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++r+a,36)}},function(n,e,t){var o=t(7),r=t(4),a=t(97);n.exports=!o&&!r((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var o=t(2),r=t(1),a=t(31),i=o(Function.toString);r(a.inspectSource)||(a.inspectSource=function(n){return i(n)}),n.exports=a.inspectSource},function(n,e,t){var o=t(8),r=t(115),a=t(50),i=t(15);n.exports=function(n,e,t){for(var s=r(e),c=i.f,l=a.f,p=0;p<s.length;p++){var d=s[p];o(n,d)||t&&o(t,d)||c(n,d,l(e,d))}}},function(n,e,t){var o=t(119);n.exports=function(n){var e=+n;return e!=e||0===e?0:o(e)}},function(n,e,t){var o=t(2),r=t(24),a=t(129);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,o){return r(t),a(o),e?n(t,o):t.__proto__=o,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,o=e.length,r=n.length;++t<o;)n[r+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var o=t(18),r=t(152),a=t(153),i=t(154),s=t(155),c=t(156);function l(n){var e=this.__data__=new o(n);this.size=e.size}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var o=t(13),r=t(35);n.exports=function(n){if(!r(n))return!1;var e=o(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var o=t(173),r=t(12);n.exports=function n(e,t,a,i,s){return e===t||(null==e||null==t||!r(e)&&!r(t)?e!=e&&t!=t:o(e,t,a,i,n,s))}},function(n,e,t){var o=t(74),r=t(176),a=t(75);n.exports=function(n,e,t,i,s,c){var l=1&t,p=n.length,d=e.length;if(p!=d&&!(l&&d>p))return!1;var u=c.get(n),m=c.get(e);if(u&&m)return u==e&&m==n;var f=-1,h=!0,g=2&t?new o:void 0;for(c.set(n,e),c.set(e,n);++f<p;){var v=n[f],b=e[f];if(i)var k=l?i(b,v,f,e,n,c):i(v,b,f,n,e,c);if(void 0!==k){if(k)continue;h=!1;break}if(g){if(!r(e,(function(n,e){if(!a(g,e)&&(v===n||s(v,n,t,i,c)))return g.push(e)}))){h=!1;break}}else if(v!==b&&!s(v,b,t,i,c)){h=!1;break}}return c.delete(n),c.delete(e),h}},function(n,e,t){var o=t(36),r=t(174),a=t(175);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new o;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=r,i.prototype.has=a,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var o=t(186),r=t(192),a=t(80);n.exports=function(n){return a(n)?o(n):r(n)}},function(n,e,t){(function(n){var o=t(6),r=t(188),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a?o.Buffer:void 0,c=(s?s.isBuffer:void 0)||r;n.exports=c}).call(this,t(48)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var o=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==o||"symbol"!=o&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var o=t(189),r=t(190),a=t(191),i=a&&a.isTypedArray,s=i?r(i):o;n.exports=s},function(n,e,t){var o=t(70),r=t(38);n.exports=function(n){return null!=n&&r(n.length)&&!o(n)}},function(n,e,t){var o=t(10)(t(6),"Set");n.exports=o},function(n,e,t){var o=t(35);n.exports=function(n){return n==n&&!o(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var o=t(85),r=t(22);n.exports=function(n,e){for(var t=0,a=(e=o(e,n)).length;null!=n&&t<a;)n=n[r(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var o=t(5),r=t(39),a=t(203),i=t(206);n.exports=function(n,e){return o(n)?n:r(n,e)?[n]:a(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var o=t(139),r=t(144),a=t(215),i=t(223),s=t(232),c=t(101),l=a((function(n){var e=c(n);return s(e)&&(e=void 0),i(o(n,1,s,!0),r(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;n.exports=function(n){var e,t=""+n,r=o.exec(t);if(!r)return t;var a="",i=0,s=0;for(i=r.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(a+=t.substring(s,i)),s=i+1,a+=e}return s!==i?a+t.substring(s,i):a}},function(n,e,t){"use strict";t.r(e);var o={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},r=(t(235),t(0)),a=Object(r.a)(o,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);var o={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},r=(t(236),t(0)),a=Object(r.a)(o,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,o){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":o===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(o)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var o=t(3),r=t(9),a=o.document,i=r(a)&&r(a.createElement);n.exports=function(n){return i?a.createElement(n):{}}},function(n,e,t){var o=t(7),r=t(4);n.exports=o&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var o=t(58),r=t(60),a=o("keys");n.exports=function(n){return a[n]||(a[n]=r(n))}},function(n,e,t){var o=t(2),r=t(8),a=t(26),i=t(117).indexOf,s=t(46),c=o([].push);n.exports=function(n,e){var t,o=a(n),l=0,p=[];for(t in o)!r(s,t)&&r(o,t)&&c(p,t);for(;e.length>l;)r(o,t=e[l++])&&(~i(p,t)||c(p,t));return p}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(243)},function(n,e,t){"use strict";var o=t(42),r=t(123).left,a=t(124),i=t(57),s=t(125);o({target:"Array",proto:!0,forced:!a("reduce")||!s&&i>79&&i<83},{reduce:function(n){var e=arguments.length;return r(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var o={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,a=r&&!o.call({1:2},1);e.f=a?function(n){var e=r(this,n);return!!e&&e.enumerable}:o},function(n,e,t){var o=t(28),r=t(9),a=t(53),i=t(107),s=t(109),c=t(27),l=TypeError,p=c("toPrimitive");n.exports=function(n,e){if(!r(n)||a(n))return n;var t,c=i(n,p);if(c){if(void 0===e&&(e="default"),t=o(c,n,e),!r(t)||a(t))return t;throw l("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){var o=t(16);n.exports=o("navigator","userAgent")||""},function(n,e,t){var o=t(44);n.exports=function(n,e){var t=n[e];return null==t?void 0:o(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var o=t(28),r=t(1),a=t(9),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&r(t=n.toString)&&!a(s=o(t,n)))return s;if(r(t=n.valueOf)&&!a(s=o(t,n)))return s;if("string"!==e&&r(t=n.toString)&&!a(s=o(t,n)))return s;throw i("Can't convert object to primitive value")}},function(n,e,t){var o=t(1),r=t(15),a=t(111),i=t(32);n.exports=function(n,e,t,s){s||(s={});var c=s.enumerable,l=void 0!==s.name?s.name:e;if(o(t)&&a(t,l,s),s.global)c?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(c=!0):delete n[e]}catch(n){}c?n[e]=t:r.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){var o=t(4),r=t(1),a=t(8),i=t(7),s=t(112).CONFIGURABLE,c=t(62),l=t(113),p=l.enforce,d=l.get,u=Object.defineProperty,m=i&&!o((function(){return 8!==u((function(){}),"length",{value:8}).length})),f=String(String).split("String"),h=n.exports=function(n,e,t){"Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!a(n,"name")||s&&n.name!==e)&&(i?u(n,"name",{value:e,configurable:!0}):n.name=e),m&&t&&a(t,"arity")&&n.length!==t.arity&&u(n,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?i&&u(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var o=p(n);return a(o,"source")||(o.source=f.join("string"==typeof e?e:"")),n};Function.prototype.toString=h((function(){return r(this)&&d(this).source||c(this)}),"toString")},function(n,e,t){var o=t(7),r=t(8),a=Function.prototype,i=o&&Object.getOwnPropertyDescriptor,s=r(a,"name"),c=s&&"something"===function(){}.name,l=s&&(!o||o&&i(a,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){var o,r,a,i=t(114),s=t(3),c=t(2),l=t(9),p=t(17),d=t(8),u=t(31),m=t(99),f=t(46),h=s.TypeError,g=s.WeakMap;if(i||u.state){var v=u.state||(u.state=new g),b=c(v.get),k=c(v.has),y=c(v.set);o=function(n,e){if(k(v,n))throw new h("Object already initialized");return e.facade=n,y(v,n,e),e},r=function(n){return b(v,n)||{}},a=function(n){return k(v,n)}}else{var _=m("state");f[_]=!0,o=function(n,e){if(d(n,_))throw new h("Object already initialized");return e.facade=n,p(n,_,e),e},r=function(n){return d(n,_)?n[_]:{}},a=function(n){return d(n,_)}}n.exports={set:o,get:r,has:a,enforce:function(n){return a(n)?r(n):o(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=r(e)).type!==n)throw h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var o=t(3),r=t(1),a=t(62),i=o.WeakMap;n.exports=r(i)&&/native code/.test(a(i))},function(n,e,t){var o=t(16),r=t(2),a=t(116),i=t(121),s=t(24),c=r([].concat);n.exports=o("Reflect","ownKeys")||function(n){var e=a.f(s(n)),t=i.f;return t?c(e,t(n)):e}},function(n,e,t){var o=t(100),r=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return o(n,r)}},function(n,e,t){var o=t(26),r=t(118),a=t(47),i=function(n){return function(e,t,i){var s,c=o(e),l=a(c),p=r(i,l);if(n&&t!=t){for(;l>p;)if((s=c[p++])!=s)return!0}else for(;l>p;p++)if((n||p in c)&&c[p]===t)return n||p||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){var o=t(64),r=Math.max,a=Math.min;n.exports=function(n,e){var t=o(n);return t<0?r(t+e,0):a(t,e)}},function(n,e){var t=Math.ceil,o=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?o:t)(e)}},function(n,e,t){var o=t(64),r=Math.min;n.exports=function(n){return n>0?r(o(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var o=t(4),r=t(1),a=/#|\.prototype\./,i=function(n,e){var t=c[s(n)];return t==p||t!=l&&(r(e)?o(e):!!e)},s=i.normalize=function(n){return String(n).replace(a,".").toLowerCase()},c=i.data={},l=i.NATIVE="N",p=i.POLYFILL="P";n.exports=i},function(n,e,t){var o=t(44),r=t(45),a=t(43),i=t(47),s=TypeError,c=function(n){return function(e,t,c,l){o(t);var p=r(e),d=a(p),u=i(p),m=n?u-1:0,f=n?-1:1;if(c<2)for(;;){if(m in d){l=d[m],m+=f;break}if(m+=f,n?m<0:u<=m)throw s("Reduce of empty array with no initial value")}for(;n?m>=0:u>m;m+=f)m in d&&(l=t(l,d[m],m,p));return l}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var o=t(4);n.exports=function(n,e){var t=[][n];return!!t&&o((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var o=t(30),r=t(3);n.exports="process"==o(r.process)},function(n,e,t){var o=t(42),r=t(3),a=t(127),i=t(128),s=r.WebAssembly,c=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=i(n,e,c),o({global:!0,constructor:!0,arity:1,forced:c},t)},p=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,c),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:c},t)}};l("Error",(function(n){return function(e){return a(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),l("URIError",(function(n){return function(e){return a(n,this,arguments)}})),p("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),p("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),p("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e,t){var o=t(25),r=Function.prototype,a=r.apply,i=r.call;n.exports="object"==typeof Reflect&&Reflect.apply||(o?i.bind(a):function(){return i.apply(a,arguments)})},function(n,e,t){"use strict";var o=t(16),r=t(8),a=t(17),i=t(54),s=t(65),c=t(63),l=t(130),p=t(131),d=t(132),u=t(136),m=t(137),f=t(138),h=t(7),g=t(59);n.exports=function(n,e,t,v){var b=v?2:1,k=n.split("."),y=k[k.length-1],_=o.apply(null,k);if(_){var E=_.prototype;if(!g&&r(E,"cause")&&delete E.cause,!t)return _;var x=o("Error"),w=e((function(n,e){var t=d(v?e:n,void 0),o=v?new _(n):new _;return void 0!==t&&a(o,"message",t),f&&a(o,"stack",m(o.stack,2)),this&&i(E,this)&&p(o,this,w),arguments.length>b&&u(o,arguments[b]),o}));if(w.prototype=E,"Error"!==y?s?s(w,x):c(w,x,{name:!0}):h&&"stackTraceLimit"in _&&(l(w,_,"stackTraceLimit"),l(w,_,"prepareStackTrace")),c(w,_),!g)try{E.name!==y&&a(E,"name",y),E.constructor=w}catch(n){}return w}}},function(n,e,t){var o=t(1),r=String,a=TypeError;n.exports=function(n){if("object"==typeof n||o(n))return n;throw a("Can't set "+r(n)+" as a prototype")}},function(n,e,t){var o=t(15).f;n.exports=function(n,e,t){t in n||o(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var o=t(1),r=t(9),a=t(65);n.exports=function(n,e,t){var i,s;return a&&o(i=e.constructor)&&i!==t&&r(s=i.prototype)&&s!==t.prototype&&a(n,s),n}},function(n,e,t){var o=t(133);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:o(n)}},function(n,e,t){var o=t(134),r=String;n.exports=function(n){if("Symbol"===o(n))throw TypeError("Cannot convert a Symbol value to a string");return r(n)}},function(n,e,t){var o=t(135),r=t(1),a=t(30),i=t(27)("toStringTag"),s=Object,c="Arguments"==a(function(){return arguments}());n.exports=o?a:function(n){var e,t,o;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:c?a(e):"Object"==(o=a(e))&&r(e.callee)?"Arguments":o}},function(n,e,t){var o={};o[t(27)("toStringTag")]="z",n.exports="[object z]"===String(o)},function(n,e,t){var o=t(9),r=t(17);n.exports=function(n,e){o(e)&&"cause"in e&&r(n,"cause",e.cause)}},function(n,e,t){var o=t(2),r=Error,a=o("".replace),i=String(r("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,c=s.test(i);n.exports=function(n,e){if(c&&"string"==typeof n&&!r.prepareStackTrace)for(;e--;)n=a(n,s,"");return n}},function(n,e,t){var o=t(4),r=t(29);n.exports=!o((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",r(1,7)),7!==n.stack)}))},function(n,e,t){var o=t(66),r=t(140);n.exports=function n(e,t,a,i,s){var c=-1,l=e.length;for(a||(a=r),s||(s=[]);++c<l;){var p=e[c];t>0&&a(p)?t>1?n(p,t-1,a,i,s):o(s,p):i||(s[s.length]=p)}return s}},function(n,e,t){var o=t(14),r=t(33),a=t(5),i=o?o.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||r(n)||!!(i&&n&&n[i])}},function(n,e,t){var o=t(13),r=t(12);n.exports=function(n){return r(n)&&"[object Arguments]"==o(n)}},function(n,e,t){var o=t(14),r=Object.prototype,a=r.hasOwnProperty,i=r.toString,s=o?o.toStringTag:void 0;n.exports=function(n){var e=a.call(n,s),t=n[s];try{n[s]=void 0;var o=!0}catch(n){}var r=i.call(n);return o&&(e?n[s]=t:delete n[s]),r}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var o=t(145),r=t(201),a=t(41),i=t(5),s=t(212);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?i(n)?r(n[0],n[1]):o(n):s(n)}},function(n,e,t){var o=t(146),r=t(200),a=t(83);n.exports=function(n){var e=r(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||o(t,n,e)}}},function(n,e,t){var o=t(68),r=t(72);n.exports=function(n,e,t,a){var i=t.length,s=i,c=!a;if(null==n)return!s;for(n=Object(n);i--;){var l=t[i];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++i<s;){var p=(l=t[i])[0],d=n[p],u=l[1];if(c&&l[2]){if(void 0===d&&!(p in n))return!1}else{var m=new o;if(a)var f=a(d,u,p,n,e,m);if(!(void 0===f?r(u,d,3,a,m):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var o=t(19),r=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=o(e,n);return!(t<0)&&(t==e.length-1?e.pop():r.call(e,t,1),--this.size,!0)}},function(n,e,t){var o=t(19);n.exports=function(n){var e=this.__data__,t=o(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var o=t(19);n.exports=function(n){return o(this.__data__,n)>-1}},function(n,e,t){var o=t(19);n.exports=function(n,e){var t=this.__data__,r=o(t,n);return r<0?(++this.size,t.push([n,e])):t[r][1]=e,this}},function(n,e,t){var o=t(18);n.exports=function(){this.__data__=new o,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var o=t(18),r=t(34),a=t(36);n.exports=function(n,e){var t=this.__data__;if(t instanceof o){var i=t.__data__;if(!r||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var o=t(70),r=t(158),a=t(35),i=t(71),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,p=c.toString,d=l.hasOwnProperty,u=RegExp("^"+p.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||r(n))&&(o(n)?u:s).test(i(n))}},function(n,e,t){var o,r=t(159),a=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var o=t(6)["__core-js_shared__"];n.exports=o},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var o=t(162),r=t(18),a=t(34);n.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||r),string:new o}}},function(n,e,t){var o=t(163),r=t(164),a=t(165),i=t(166),s=t(167);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}c.prototype.clear=o,c.prototype.delete=r,c.prototype.get=a,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var o=t(20);n.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var o=t(20),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(o){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return r.call(e,n)?e[n]:void 0}},function(n,e,t){var o=t(20),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return o?void 0!==e[n]:r.call(e,n)}},function(n,e,t){var o=t(20);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=o&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var o=t(21);n.exports=function(n){var e=o(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var o=t(21);n.exports=function(n){return o(this,n).get(n)}},function(n,e,t){var o=t(21);n.exports=function(n){return o(this,n).has(n)}},function(n,e,t){var o=t(21);n.exports=function(n,e){var t=o(this,n),r=t.size;return t.set(n,e),this.size+=t.size==r?0:1,this}},function(n,e,t){var o=t(68),r=t(73),a=t(177),i=t(180),s=t(196),c=t(5),l=t(77),p=t(79),d="[object Object]",u=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,m,f,h){var g=c(n),v=c(e),b=g?"[object Array]":s(n),k=v?"[object Array]":s(e),y=(b="[object Arguments]"==b?d:b)==d,_=(k="[object Arguments]"==k?d:k)==d,E=b==k;if(E&&l(n)){if(!l(e))return!1;g=!0,y=!1}if(E&&!y)return h||(h=new o),g||p(n)?r(n,e,t,m,f,h):a(n,e,b,t,m,f,h);if(!(1&t)){var x=y&&u.call(n,"__wrapped__"),w=_&&u.call(e,"__wrapped__");if(x||w){var C=x?n.value():n,A=w?e.value():e;return h||(h=new o),f(C,A,t,m,h)}}return!!E&&(h||(h=new o),i(n,e,t,m,f,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length;++t<o;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var o=t(14),r=t(178),a=t(69),i=t(73),s=t(179),c=t(37),l=o?o.prototype:void 0,p=l?l.valueOf:void 0;n.exports=function(n,e,t,o,l,d,u){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!d(new r(n),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var m=s;case"[object Set]":var f=1&o;if(m||(m=c),n.size!=e.size&&!f)return!1;var h=u.get(n);if(h)return h==e;o|=2,u.set(n,e);var g=i(m(n),m(e),o,l,d,u);return u.delete(n),g;case"[object Symbol]":if(p)return p.call(n)==p.call(e)}return!1}},function(n,e,t){var o=t(6).Uint8Array;n.exports=o},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,o){t[++e]=[o,n]})),t}},function(n,e,t){var o=t(181),r=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,i,s){var c=1&t,l=o(n),p=l.length;if(p!=o(e).length&&!c)return!1;for(var d=p;d--;){var u=l[d];if(!(c?u in e:r.call(e,u)))return!1}var m=s.get(n),f=s.get(e);if(m&&f)return m==e&&f==n;var h=!0;s.set(n,e),s.set(e,n);for(var g=c;++d<p;){var v=n[u=l[d]],b=e[u];if(a)var k=c?a(b,v,u,e,n,s):a(v,b,u,n,e,s);if(!(void 0===k?v===b||i(v,b,t,a,s):k)){h=!1;break}g||(g="constructor"==u)}if(h&&!g){var y=n.constructor,_=e.constructor;y==_||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof _&&_ instanceof _||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var o=t(182),r=t(183),a=t(76);n.exports=function(n){return o(n,a,r)}},function(n,e,t){var o=t(66),r=t(5);n.exports=function(n,e,t){var a=e(n);return r(n)?a:o(a,t(n))}},function(n,e,t){var o=t(184),r=t(185),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),o(i(n),(function(e){return a.call(n,e)})))}:r;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length,r=0,a=[];++t<o;){var i=n[t];e(i,t,n)&&(a[r++]=i)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var o=t(187),r=t(33),a=t(5),i=t(77),s=t(78),c=t(79),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),p=!t&&r(n),d=!t&&!p&&i(n),u=!t&&!p&&!d&&c(n),m=t||p||d||u,f=m?o(n.length,String):[],h=f.length;for(var g in n)!e&&!l.call(n,g)||m&&("length"==g||d&&("offset"==g||"parent"==g)||u&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,h))||f.push(g);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,o=Array(n);++t<n;)o[t]=e(t);return o}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var o=t(13),r=t(38),a=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&r(n.length)&&!!i[o(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var o=t(67),r=e&&!e.nodeType&&e,a=r&&"object"==typeof n&&n&&!n.nodeType&&n,i=a&&a.exports===r&&o.process,s=function(){try{var n=a&&a.require&&a.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(48)(n))},function(n,e,t){var o=t(193),r=t(194),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!o(n))return r(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var o=t(195)(Object.keys,Object);n.exports=o},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var o=t(197),r=t(34),a=t(198),i=t(81),s=t(199),c=t(13),l=t(71),p=l(o),d=l(r),u=l(a),m=l(i),f=l(s),h=c;(o&&"[object DataView]"!=h(new o(new ArrayBuffer(1)))||r&&"[object Map]"!=h(new r)||a&&"[object Promise]"!=h(a.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,o=t?l(t):"";if(o)switch(o){case p:return"[object DataView]";case d:return"[object Map]";case u:return"[object Promise]";case m:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var o=t(10)(t(6),"DataView");n.exports=o},function(n,e,t){var o=t(10)(t(6),"Promise");n.exports=o},function(n,e,t){var o=t(10)(t(6),"WeakMap");n.exports=o},function(n,e,t){var o=t(82),r=t(76);n.exports=function(n){for(var e=r(n),t=e.length;t--;){var a=e[t],i=n[a];e[t]=[a,i,o(i)]}return e}},function(n,e,t){var o=t(72),r=t(202),a=t(209),i=t(39),s=t(82),c=t(83),l=t(22);n.exports=function(n,e){return i(n)&&s(e)?c(l(n),e):function(t){var i=r(t,n);return void 0===i&&i===e?a(t,n):o(e,i,3)}}},function(n,e,t){var o=t(84);n.exports=function(n,e,t){var r=null==n?void 0:o(n,e);return void 0===r?t:r}},function(n,e,t){var o=t(204),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=o((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(r,(function(n,t,o,r){e.push(o?r.replace(a,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var o=t(205);n.exports=function(n){var e=o(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var o=t(36);function r(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var o=arguments,r=e?e.apply(this,o):o[0],a=t.cache;if(a.has(r))return a.get(r);var i=n.apply(this,o);return t.cache=a.set(r,i)||a,i};return t.cache=new(r.Cache||o),t}r.Cache=o,n.exports=r},function(n,e,t){var o=t(207);n.exports=function(n){return null==n?"":o(n)}},function(n,e,t){var o=t(14),r=t(208),a=t(5),i=t(40),s=o?o.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return r(e,n)+"";if(i(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length,r=Array(o);++t<o;)r[t]=e(n[t],t,n);return r}},function(n,e,t){var o=t(210),r=t(211);n.exports=function(n,e){return null!=n&&r(n,e,o)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var o=t(85),r=t(33),a=t(5),i=t(78),s=t(38),c=t(22);n.exports=function(n,e,t){for(var l=-1,p=(e=o(e,n)).length,d=!1;++l<p;){var u=c(e[l]);if(!(d=null!=n&&t(n,u)))break;n=n[u]}return d||++l!=p?d:!!(p=null==n?0:n.length)&&s(p)&&i(u,p)&&(a(n)||r(n))}},function(n,e,t){var o=t(213),r=t(214),a=t(39),i=t(22);n.exports=function(n){return a(n)?o(i(n)):r(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var o=t(84);n.exports=function(n){return function(e){return o(e,n)}}},function(n,e,t){var o=t(41),r=t(216),a=t(218);n.exports=function(n,e){return a(r(n,e,o),n+"")}},function(n,e,t){var o=t(217),r=Math.max;n.exports=function(n,e,t){return e=r(void 0===e?n.length-1:e,0),function(){for(var a=arguments,i=-1,s=r(a.length-e,0),c=Array(s);++i<s;)c[i]=a[e+i];i=-1;for(var l=Array(e+1);++i<e;)l[i]=a[i];return l[e]=t(c),o(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var o=t(219),r=t(222)(o);n.exports=r},function(n,e,t){var o=t(220),r=t(221),a=t(41),i=r?function(n,e){return r(n,"toString",{configurable:!0,enumerable:!1,value:o(e),writable:!0})}:a;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var o=t(10),r=function(){try{var n=o(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=r},function(n,e){var t=Date.now;n.exports=function(n){var e=0,o=0;return function(){var r=t(),a=16-(r-o);if(o=r,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var o=t(74),r=t(224),a=t(229),i=t(75),s=t(230),c=t(37);n.exports=function(n,e,t){var l=-1,p=r,d=n.length,u=!0,m=[],f=m;if(t)u=!1,p=a;else if(d>=200){var h=e?null:s(n);if(h)return c(h);u=!1,p=i,f=new o}else f=e?[]:m;n:for(;++l<d;){var g=n[l],v=e?e(g):g;if(g=t||0!==g?g:0,u&&v==v){for(var b=f.length;b--;)if(f[b]===v)continue n;e&&f.push(v),m.push(g)}else p(f,v,t)||(f!==m&&f.push(v),m.push(g))}return m}},function(n,e,t){var o=t(225);n.exports=function(n,e){return!!(null==n?0:n.length)&&o(n,e,0)>-1}},function(n,e,t){var o=t(226),r=t(227),a=t(228);n.exports=function(n,e,t){return e==e?a(n,e,t):o(n,r,t)}},function(n,e){n.exports=function(n,e,t,o){for(var r=n.length,a=t+(o?1:-1);o?a--:++a<r;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var o=t-1,r=n.length;++o<r;)if(n[o]===e)return o;return-1}},function(n,e){n.exports=function(n,e,t){for(var o=-1,r=null==n?0:n.length;++o<r;)if(t(e,n[o]))return!0;return!1}},function(n,e,t){var o=t(81),r=t(231),a=t(37),i=o&&1/a(new o([,-0]))[1]==1/0?function(n){return new o(n)}:r;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var o=t(80),r=t(12);n.exports=function(n){return r(n)&&o(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(86)},function(n,e,t){"use strict";t(87)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.8
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),r=Array.isArray;function a(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return"function"==typeof n}function p(n){return null!==n&&"object"==typeof n}var d=Object.prototype.toString;function u(n){return"[object Object]"===d.call(n)}function m(n){return"[object RegExp]"===d.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function h(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||u(n)&&n.toString===d?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),o=n.split(","),r=0;r<o.length;r++)t[o[r]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var k=b("key,ref,slot,slot-scope,is");function y(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var _=Object.prototype.hasOwnProperty;function E(n,e){return _.call(n,e)}function x(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var w=/-(\w)/g,C=x((function(n){return n.replace(w,(function(n,e){return e?e.toUpperCase():""}))})),A=x((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),B=/\B([A-Z])/g,T=x((function(n){return n.replace(B,"-$1").toLowerCase()}));var P=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var o=arguments.length;return o?o>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function S(n,e){e=e||0;for(var t=n.length-e,o=new Array(t);t--;)o[t]=n[t+e];return o}function O(n,e){for(var t in e)n[t]=e[t];return n}function I(n){for(var e={},t=0;t<n.length;t++)n[t]&&O(e,n[t]);return e}function D(n,e,t){}var z=function(n,e,t){return!1},j=function(n){return n};function q(n,e){if(n===e)return!0;var t=p(n),o=p(e);if(!t||!o)return!t&&!o&&String(n)===String(e);try{var r=Array.isArray(n),a=Array.isArray(e);if(r&&a)return n.length===e.length&&n.every((function(n,t){return q(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(r||a)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return q(n[t],e[t])}))}catch(n){return!1}}function M(n,e){for(var t=0;t<n.length;t++)if(q(n[t],e))return t;return-1}function $(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function F(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var R=["component","directive","filter"],L=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],N={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:z,isReservedAttr:z,isUnknownElement:z,getTagNamespace:D,parsePlatformTagName:j,mustUseProp:z,async:!0,_lifecycleHooks:L},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function K(n,e,t,o){Object.defineProperty(n,e,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var G=new RegExp("[^".concat(U.source,".$_\\d]"));var Z="__proto__"in{},H="undefined"!=typeof window,W=H&&window.navigator.userAgent.toLowerCase(),X=W&&/msie|trident/.test(W),Y=W&&W.indexOf("msie 9.0")>0,Q=W&&W.indexOf("edge/")>0;W&&W.indexOf("android");var J=W&&/iphone|ipad|ipod|ios/.test(W);W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W);var nn,en=W&&W.match(/firefox\/(\d+)/),tn={}.watch,on=!1;if(H)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){on=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===nn&&(nn=!H&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=H&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function cn(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,pn="undefined"!=typeof Symbol&&cn(Symbol)&&"undefined"!=typeof Reflect&&cn(Reflect.ownKeys);ln="undefined"!=typeof Set&&cn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function un(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var mn=function(){function n(n,e,t,o,r,a,i,s){this.tag=n,this.data=e,this.children=t,this.text=o,this.elm=r,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),fn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function hn(n){return new mn(void 0,void 0,void 0,String(n))}function gn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var vn=0,bn=function(){function n(){this.id=vn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){y(this.subs,n)},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.slice();for(var t=0,o=e.length;t<o;t++){e[t].update()}},n}();bn.target=null;var kn=[];function yn(n){kn.push(n),bn.target=n}function _n(){kn.pop(),bn.target=kn[kn.length-1]}var En=Array.prototype,xn=Object.create(En);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=En[n];K(xn,n,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var r,a=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&i.observeArray(r),i.dep.notify(),a}))}));var wn=Object.getOwnPropertyNames(xn),Cn={},An=!0;function Bn(n){An=n}var Tn={notify:D,depend:D,addSub:D,removeSub:D},Pn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Tn:new bn,this.vmCount=0,K(n,"__ob__",this),r(n)){if(!t)if(Z)n.__proto__=xn;else for(var o=0,a=wn.length;o<a;o++){K(n,s=wn[o],xn[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(o=0;o<i.length;o++){var s;On(n,s=i[o],Cn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Sn(n[e],!1,this.mock)},n}();function Sn(n,e,t){var o;if(!(!p(n)||$n(n)||n instanceof mn))return E(n,"__ob__")&&n.__ob__ instanceof Pn?o=n.__ob__:!An||!t&&an()||!r(n)&&!u(n)||!Object.isExtensible(n)||n.__v_skip||(o=new Pn(n,e,t)),o}function On(n,e,t,o,a,i){var s=new bn,c=Object.getOwnPropertyDescriptor(n,e);if(!c||!1!==c.configurable){var l=c&&c.get,p=c&&c.set;l&&!p||t!==Cn&&2!==arguments.length||(t=n[e]);var d=!a&&Sn(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=l?l.call(n):t;return bn.target&&(s.depend(),d&&(d.dep.depend(),r(e)&&zn(e))),$n(e)&&!a?e.value:e},set:function(e){var o=l?l.call(n):t;if(F(o,e)){if(p)p.call(n,e);else{if(l)return;if(!a&&$n(o)&&!$n(e))return void(o.value=e);t=e}d=!a&&Sn(e,!1,i),s.notify()}}}),s}}function In(n,e,t){if(!Mn(n)){var o=n.__ob__;return r(n)&&f(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),o&&!o.shallow&&o.mock&&Sn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||o&&o.vmCount?t:o?(On(o.value,e,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(n[e]=t,t)}}function Dn(n,e){if(r(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Mn(n)||E(n,e)&&(delete n[e],t&&t.dep.notify())}}function zn(n){for(var e=void 0,t=0,o=n.length;t<o;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),r(e)&&zn(e)}function jn(n){return qn(n,!0),K(n,"__v_isShallow",!0),n}function qn(n,e){if(!Mn(n)){Sn(n,e,an());0}}function Mn(n){return!(!n||!n.__v_isReadonly)}function $n(n){return!(!n||!0!==n.__v_isRef)}function Fn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if($n(n))return n.value;var o=n&&n.__ob__;return o&&o.dep.depend(),n},set:function(n){var o=e[t];$n(o)&&!$n(n)?o.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Rn;var Ln=function(){function n(n){void 0===n&&(n=!1),this.active=!0,this.effects=[],this.cleanups=[],!n&&Rn&&(this.parent=Rn,this.index=(Rn.scopes||(Rn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Rn;try{return Rn=this,n()}finally{Rn=e}}else 0},n.prototype.on=function(){Rn=this},n.prototype.off=function(){Rn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(this.parent&&!n){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.active=!1}},n}();function Nn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Un=x((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),o="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=o?n.slice(1):n,once:t,capture:o,passive:e}}));function Vn(n,e){function t(){var n=t.fns;if(!r(n))return Ae(n,null,arguments,e,"v-on handler");for(var o=n.slice(),a=0;a<o.length;a++)Ae(o[a],null,arguments,e,"v-on handler")}return t.fns=n,t}function Kn(n,e,t,o,r,i){var c,l,p,d;for(c in n)l=n[c],p=e[c],d=Un(c),a(l)||(a(p)?(a(l.fns)&&(l=n[c]=Vn(l,i)),s(d.once)&&(l=n[c]=r(d.name,l,d.capture)),t(d.name,l,d.capture,d.passive,d.params)):l!==p&&(p.fns=l,n[c]=p));for(c in e)a(n[c])&&o((d=Un(c)).name,e[c],d.capture)}function Gn(n,e,t){var o;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var r=n[e];function c(){t.apply(this,arguments),y(o.fns,c)}a(r)?o=Vn([c]):i(r.fns)&&s(r.merged)?(o=r).fns.push(c):o=Vn([r,c]),o.merged=!0,n[e]=o}function Zn(n,e,t,o,r){if(i(e)){if(E(e,t))return n[t]=e[t],r||delete e[t],!0;if(E(e,o))return n[t]=e[o],r||delete e[o],!0}return!1}function Hn(n){return c(n)?[hn(n)]:r(n)?function n(e,t){var o,l,p,d,u=[];for(o=0;o<e.length;o++)a(l=e[o])||"boolean"==typeof l||(p=u.length-1,d=u[p],r(l)?l.length>0&&(Wn((l=n(l,"".concat(t||"","_").concat(o)))[0])&&Wn(d)&&(u[p]=hn(d.text+l[0].text),l.shift()),u.push.apply(u,l)):c(l)?Wn(d)?u[p]=hn(d.text+l):""!==l&&u.push(hn(l)):Wn(l)&&Wn(d)?u[p]=hn(d.text+l.text):(s(e._isVList)&&i(l.tag)&&a(l.key)&&i(t)&&(l.key="__vlist".concat(t,"_").concat(o,"__")),u.push(l)));return u}(n):void 0}function Wn(n){return i(n)&&i(n.text)&&!1===n.isComment}function Xn(n,e){var t,o,a,s,c=null;if(r(n)||"string"==typeof n)for(c=new Array(n.length),t=0,o=n.length;t<o;t++)c[t]=e(n[t],t);else if("number"==typeof n)for(c=new Array(n),t=0;t<n;t++)c[t]=e(t+1,t);else if(p(n))if(pn&&n[Symbol.iterator]){c=[];for(var l=n[Symbol.iterator](),d=l.next();!d.done;)c.push(e(d.value,c.length)),d=l.next()}else for(a=Object.keys(n),c=new Array(a.length),t=0,o=a.length;t<o;t++)s=a[t],c[t]=e(n[s],s,t);return i(c)||(c=[]),c._isVList=!0,c}function Yn(n,e,t,o){var r,a=this.$scopedSlots[n];a?(t=t||{},o&&(t=O(O({},o),t)),r=a(t)||(l(e)?e():e)):r=this.$slots[n]||(l(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},r):r}function Qn(n){return Pt(this.$options,"filters",n,!0)||j}function Jn(n,e){return r(n)?-1===n.indexOf(e):n!==e}function ne(n,e,t,o,r){var a=N.keyCodes[e]||t;return r&&o&&!N.keyCodes[e]?Jn(r,o):a?Jn(a,n):o?T(o)!==e:void 0===n}function ee(n,e,t,o,a){if(t)if(p(t)){r(t)&&(t=I(t));var i=void 0,s=function(r){if("class"===r||"style"===r||k(r))i=n;else{var s=n.attrs&&n.attrs.type;i=o||N.mustUseProp(e,s,r)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=C(r),l=T(r);c in i||l in i||(i[r]=t[r],a&&((n.on||(n.on={}))["update:".concat(r)]=function(n){t[r]=n}))};for(var c in t)s(c)}else;return n}function te(n,e){var t=this._staticTrees||(this._staticTrees=[]),o=t[n];return o&&!e||re(o=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),o}function oe(n,e,t){return re(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function re(n,e,t){if(r(n))for(var o=0;o<n.length;o++)n[o]&&"string"!=typeof n[o]&&ae(n[o],"".concat(e,"_").concat(o),t);else ae(n,e,t)}function ae(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ie(n,e){if(e)if(u(e)){var t=n.on=n.on?O({},n.on):{};for(var o in e){var r=t[o],a=e[o];t[o]=r?[].concat(r,a):a}}else;return n}function se(n,e,t,o){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];r(i)?se(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return o&&(e.$key=o),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var o=e[t];"string"==typeof o&&o&&(n[e[t]]=e[t+1])}return n}function le(n,e){return"string"==typeof n?e+n:n}function pe(n){n._o=oe,n._n=v,n._s=g,n._l=Xn,n._t=Yn,n._q=q,n._i=M,n._m=te,n._f=Qn,n._k=ne,n._b=ee,n._v=hn,n._e=fn,n._u=se,n._g=ie,n._d=ce,n._p=le}function de(n,e){if(!n||!n.length)return{};for(var t={},o=0,r=n.length;o<r;o++){var a=n[o],i=a.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,a.context!==e&&a.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(a);else{var s=i.slot,c=t[s]||(t[s]=[]);"template"===a.tag?c.push.apply(c,a.children||[]):c.push(a)}}for(var l in t)t[l].every(ue)&&delete t[l];return t}function ue(n){return n.isComment&&!n.asyncFactory||" "===n.text}function me(n){return n.isComment&&n.asyncFactory}function fe(n,e,t,r){var a,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,c=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&r&&r!==o&&c===r.$key&&!i&&!r.$hasNormal)return r;for(var l in a={},e)e[l]&&"$"!==l[0]&&(a[l]=he(n,t,l,e[l]))}else a={};for(var p in t)p in a||(a[p]=ge(t,p));return e&&Object.isExtensible(e)&&(e._normalized=a),K(a,"$stable",s),K(a,"$key",c),K(a,"$hasNormal",i),a}function he(n,e,t,o){var a=function(){var e=dn;un(n);var t=arguments.length?o.apply(null,arguments):o({}),a=(t=t&&"object"==typeof t&&!r(t)?[t]:Hn(t))&&t[0];return un(e),t&&(!a||1===t.length&&a.isComment&&!me(a))?void 0:t};return o.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function ge(n,e){return function(){return n[e]}}function ve(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};K(e,"_v_attr_proxy",!0),be(e,n.$attrs,o,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||be(n._listenersProxy={},n.$listeners,o,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||ye(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:P(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Fn(n,e,t)}))}}}function be(n,e,t,o,r){var a=!1;for(var i in e)i in n?e[i]!==t[i]&&(a=!0):(a=!0,ke(n,i,o,r));for(var i in n)i in e||(a=!0,delete n[i]);return a}function ke(n,e,t,o){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[o][e]}})}function ye(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var _e=null;function Ee(n,e){return(n.__esModule||pn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),p(n)?e.extend(n):n}function xe(n){if(r(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||me(t)))return t}}function we(n,e,t,o,d,u){return(r(t)||c(t))&&(d=o,o=t,t=void 0),s(u)&&(d=2),function(n,e,t,o,c){if(i(t)&&i(t.__ob__))return fn();i(t)&&i(t.is)&&(e=t.is);if(!e)return fn();0;r(o)&&l(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===c?o=Hn(o):1===c&&(o=function(n){for(var e=0;e<n.length;e++)if(r(n[e]))return Array.prototype.concat.apply([],n);return n}(o));var d,u;if("string"==typeof e){var m=void 0;u=n.$vnode&&n.$vnode.ns||N.getTagNamespace(e),d=N.isReservedTag(e)?new mn(N.parsePlatformTagName(e),t,o,void 0,void 0,n):t&&t.pre||!i(m=Pt(n.$options,"components",e))?new mn(e,t,o,void 0,void 0,n):kt(m,t,n,o,e)}else d=kt(e,t,n,o);return r(d)?d:i(d)?(i(u)&&function n(e,t,o){e.ns=t,"foreignObject"===e.tag&&(t=void 0,o=!0);if(i(e.children))for(var r=0,c=e.children.length;r<c;r++){var l=e.children[r];i(l.tag)&&(a(l.ns)||s(o)&&"svg"!==l.tag)&&n(l,t,o)}}(d,u),i(t)&&function(n){p(n.style)&&Le(n.style);p(n.class)&&Le(n.class)}(t),d):fn()}(n,e,t,o,d)}function Ce(n,e,t){yn();try{if(e)for(var o=e;o=o.$parent;){var r=o.$options.errorCaptured;if(r)for(var a=0;a<r.length;a++)try{if(!1===r[a].call(o,n,e,t))return}catch(n){Be(n,o,"errorCaptured hook")}}Be(n,e,t)}finally{_n()}}function Ae(n,e,t,o,r){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&h(a)&&!a._handled&&(a.catch((function(n){return Ce(n,o,r+" (Promise/async)")})),a._handled=!0)}catch(n){Ce(n,o,r)}return a}function Be(n,e,t){if(N.errorHandler)try{return N.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Te(e,null,"config.errorHandler")}Te(n,e,t)}function Te(n,e,t){if(!H||"undefined"==typeof console)throw n;console.error(n)}var Pe,Se=!1,Oe=[],Ie=!1;function De(){Ie=!1;var n=Oe.slice(0);Oe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&cn(Promise)){var ze=Promise.resolve();Pe=function(){ze.then(De),J&&setTimeout(D)},Se=!0}else if(X||"undefined"==typeof MutationObserver||!cn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Pe="undefined"!=typeof setImmediate&&cn(setImmediate)?function(){setImmediate(De)}:function(){setTimeout(De,0)};else{var je=1,qe=new MutationObserver(De),Me=document.createTextNode(String(je));qe.observe(Me,{characterData:!0}),Pe=function(){je=(je+1)%2,Me.data=String(je)},Se=!0}function $e(n,e){var t;if(Oe.push((function(){if(n)try{n.call(e)}catch(n){Ce(n,e,"nextTick")}else t&&t(e)})),Ie||(Ie=!0,Pe()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Fe(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var o=n.$options;o[e]=Ct(o[e],t)}(t,n,e)}}Fe("beforeMount"),Fe("mounted"),Fe("beforeUpdate"),Fe("updated"),Fe("beforeDestroy"),Fe("destroyed"),Fe("errorCaptured"),Fe("activated"),Fe("deactivated"),Fe("serverPrefetch"),Fe("renderTracked"),Fe("renderTriggered");var Re=new ln;function Le(n){return function n(e,t){var o,a,i=r(e);if(!i&&!p(e)||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(o=e.length;o--;)n(e[o],t);else if($n(e))n(e.value,t);else for(a=Object.keys(e),o=a.length;o--;)n(e[a[o]],t)}(n,Re),Re.clear(),n}var Ne,Ue=0,Ve=function(){function n(n,e,t,o,r){var a,i;a=this,void 0===(i=Rn||(n?n._scope:void 0))&&(i=Rn),i&&i.active&&i.effects.push(a),(this.vm=n)&&r&&(n._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Ue,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="",l(e)?this.getter=e:(this.getter=function(n){if(!G.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=D)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;yn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ce(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Le(n),_n(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():dt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||p(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ae(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&y(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Ke(n,e){Ne.$on(n,e)}function Ge(n,e){Ne.$off(n,e)}function Ze(n,e){var t=Ne;return function o(){var r=e.apply(null,arguments);null!==r&&t.$off(n,o)}}function He(n,e,t){Ne=n,Kn(e,t||{},Ke,Ge,Ze,n),Ne=void 0}var We=null;function Xe(n){var e=We;return We=n,function(){We=e}}function Ye(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Qe(n,e){if(e){if(n._directInactive=!1,Ye(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Qe(n.$children[t]);Je(n,"activated")}}function Je(n,e,t,o){void 0===o&&(o=!0),yn();var r=dn;o&&un(n);var a=n.$options[e],i="".concat(e," hook");if(a)for(var s=0,c=a.length;s<c;s++)Ae(a[s],n,t||null,n,i);n._hasHookEvent&&n.$emit("hook:"+e),o&&un(r),_n()}var nt=[],et=[],tt={},ot=!1,rt=!1,at=0;var it=0,st=Date.now;if(H&&!X){var ct=window.performance;ct&&"function"==typeof ct.now&&st()>document.createEvent("Event").timeStamp&&(st=function(){return ct.now()})}var lt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function pt(){var n,e;for(it=st(),rt=!0,nt.sort(lt),at=0;at<nt.length;at++)(n=nt[at]).before&&n.before(),e=n.id,tt[e]=null,n.run();var t=et.slice(),o=nt.slice();at=nt.length=et.length=0,tt={},ot=rt=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Qe(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&Je(o,"updated")}}(o),sn&&N.devtools&&sn.emit("flush")}function dt(n){var e=n.id;if(null==tt[e]&&(n!==bn.target||!n.noRecurse)){if(tt[e]=!0,rt){for(var t=nt.length-1;t>at&&nt[t].id>n.id;)t--;nt.splice(t+1,0,n)}else nt.push(n);ot||(ot=!0,$e(pt))}}function ut(n,e){if(n){for(var t=Object.create(null),o=pn?Reflect.ownKeys(n):Object.keys(n),r=0;r<o.length;r++){var a=o[r];if("__ob__"!==a){var i=n[a].from;if(i in e._provided)t[a]=e._provided[i];else if("default"in n[a]){var s=n[a].default;t[a]=l(s)?s.call(e):s}else 0}}return t}}function mt(n,e,t,a,i){var c,l=this,p=i.options;E(a,"_uid")?(c=Object.create(a))._original=a:(c=a,a=a._original);var d=s(p._compiled),u=!d;this.data=n,this.props=e,this.children=t,this.parent=a,this.listeners=n.on||o,this.injections=ut(p.inject,a),this.slots=function(){return l.$slots||fe(a,n.scopedSlots,l.$slots=de(t,a)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fe(a,n.scopedSlots,this.slots())}}),d&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=fe(a,n.scopedSlots,this.$slots)),p._scopeId?this._c=function(n,e,t,o){var i=we(c,n,e,t,o,u);return i&&!r(i)&&(i.fnScopeId=p._scopeId,i.fnContext=a),i}:this._c=function(n,e,t,o){return we(c,n,e,t,o,u)}}function ft(n,e,t,o,r){var a=gn(n);return a.fnContext=t,a.fnOptions=o,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function ht(n,e){for(var t in e)n[C(t)]=e[t]}function gt(n){return n.name||n.__name||n._componentTag}pe(mt.prototype);var vt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;vt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},o=n.data.inlineTemplate;i(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,We)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,a){var i=r.data.scopedSlots,s=n.$scopedSlots,c=!!(i&&!i.$stable||s!==o&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),l=!!(a||n.$options._renderChildren||c),p=n.$vnode;n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r),n.$options._renderChildren=a;var d=r.data.attrs||o;n._attrsProxy&&be(n._attrsProxy,d,p.data&&p.data.attrs||o,n,"$attrs")&&(l=!0),n.$attrs=d,t=t||o;var u=n.$options._parentListeners;if(n._listenersProxy&&be(n._listenersProxy,t,u||o,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,He(n,t,u),e&&n.$options.props){Bn(!1);for(var m=n._props,f=n.$options._propKeys||[],h=0;h<f.length;h++){var g=f[h],v=n.$options.props;m[g]=St(g,v,e,n)}Bn(!0),n.$options.propsData=e}l&&(n.$slots=de(a,r.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,o=n.componentInstance;o._isMounted||(o._isMounted=!0,Je(o,"mounted")),n.data.keepAlive&&(t._isMounted?((e=o)._inactive=!1,et.push(e)):Qe(o,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ye(e))||e._inactive)){e._inactive=!0;for(var o=0;o<e.$children.length;o++)n(e.$children[o]);Je(e,"deactivated")}}(e,!0):e.$destroy())}},bt=Object.keys(vt);function kt(n,e,t,c,l){if(!a(n)){var d=t.$options._base;if(p(n)&&(n=d.extend(n)),"function"==typeof n){var u;if(a(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=_e;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var o=n.owners=[t],r=!0,c=null,l=null;t.$on("hook:destroyed",(function(){return y(o,t)}));var d=function(n){for(var e=0,t=o.length;e<t;e++)o[e].$forceUpdate();n&&(o.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},u=$((function(t){n.resolved=Ee(t,e),r?o.length=0:d(!0)})),m=$((function(e){i(n.errorComp)&&(n.error=!0,d(!0))})),f=n(u,m);return p(f)&&(h(f)?a(n.resolved)&&f.then(u,m):h(f.component)&&(f.component.then(u,m),i(f.error)&&(n.errorComp=Ee(f.error,e)),i(f.loading)&&(n.loadingComp=Ee(f.loading,e),0===f.delay?n.loading=!0:c=setTimeout((function(){c=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,d(!1))}),f.delay||200)),i(f.timeout)&&(l=setTimeout((function(){l=null,a(n.resolved)&&m(null)}),f.timeout)))),r=!1,n.loading?n.loadingComp:n.resolved}}(u=n,d)))return function(n,e,t,o,r){var a=fn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:o,tag:r},a}(u,e,t,c,l);e=e||{},Vt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",o=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),s=a[o],c=e.model.callback;i(s)?(r(s)?-1===s.indexOf(c):s!==c)&&(a[o]=[c].concat(s)):a[o]=c}(n.options,e);var m=function(n,e,t){var o=e.options.props;if(!a(o)){var r={},s=n.attrs,c=n.props;if(i(s)||i(c))for(var l in o){var p=T(l);Zn(r,c,l,p,!0)||Zn(r,s,l,p,!1)}return r}}(e,n);if(s(n.options.functional))return function(n,e,t,a,s){var c=n.options,l={},p=c.props;if(i(p))for(var d in p)l[d]=St(d,p,e||o);else i(t.attrs)&&ht(l,t.attrs),i(t.props)&&ht(l,t.props);var u=new mt(t,l,s,a,n),m=c.render.call(null,u._c,u);if(m instanceof mn)return ft(m,t,u.parent,c,u);if(r(m)){for(var f=Hn(m)||[],h=new Array(f.length),g=0;g<f.length;g++)h[g]=ft(f[g],t,u.parent,c,u);return h}}(n,m,e,t,c);var f=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<bt.length;t++){var o=bt[t],r=e[o],a=vt[o];r===a||r&&r._merged||(e[o]=r?yt(a,r):a)}}(e);var v=gt(n.options)||l;return new mn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:f,tag:l,children:c},u)}}}function yt(n,e){var t=function(t,o){n(t,o),e(t,o)};return t._merged=!0,t}var _t=D,Et=N.optionMergeStrategies;function xt(n,e){if(!e)return n;for(var t,o,r,a=pn?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++)"__ob__"!==(t=a[i])&&(o=n[t],r=e[t],E(n,t)?o!==r&&u(o)&&u(r)&&xt(o,r):In(n,t,r));return n}function wt(n,e,t){return t?function(){var o=l(e)?e.call(t,t):e,r=l(n)?n.call(t,t):n;return o?xt(o,r):r}:e?n?function(){return xt(l(e)?e.call(this,this):e,l(n)?n.call(this,this):n)}:e:n}function Ct(n,e){var t=e?n?n.concat(e):r(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function At(n,e,t,o){var r=Object.create(n||null);return e?O(r,e):r}Et.data=function(n,e,t){return t?wt(n,e,t):e&&"function"!=typeof e?n:wt(n,e)},L.forEach((function(n){Et[n]=Ct})),R.forEach((function(n){Et[n+"s"]=At})),Et.watch=function(n,e,t,o){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in O(a,n),e){var s=a[i],c=e[i];s&&!r(s)&&(s=[s]),a[i]=s?s.concat(c):r(c)?c:[c]}return a},Et.props=Et.methods=Et.inject=Et.computed=function(n,e,t,o){if(!n)return e;var r=Object.create(null);return O(r,n),e&&O(r,e),r},Et.provide=wt;var Bt=function(n,e){return void 0===e?n:e};function Tt(n,e,t){if(l(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var o,a,i={};if(r(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(i[C(a)]={type:null});else if(u(t))for(var s in t)a=t[s],i[C(s)]=u(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var o=n.inject={};if(r(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(u(t))for(var i in t){var s=t[i];o[i]=u(s)?O({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var o=e[t];l(o)&&(e[t]={bind:o,update:o})}}(e),!e._base&&(e.extends&&(n=Tt(n,e.extends,t)),e.mixins))for(var o=0,a=e.mixins.length;o<a;o++)n=Tt(n,e.mixins[o],t);var i,s={};for(i in n)c(i);for(i in e)E(n,i)||c(i);function c(o){var r=Et[o]||Bt;s[o]=r(n[o],e[o],t,o)}return s}function Pt(n,e,t,o){if("string"==typeof t){var r=n[e];if(E(r,t))return r[t];var a=C(t);if(E(r,a))return r[a];var i=A(a);return E(r,i)?r[i]:r[t]||r[a]||r[i]}}function St(n,e,t,o){var r=e[n],a=!E(t,n),i=t[n],s=zt(Boolean,r.type);if(s>-1)if(a&&!E(r,"default"))i=!1;else if(""===i||i===T(n)){var c=zt(String,r.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!E(e,"default"))return;var o=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return l(o)&&"Function"!==It(e.type)?o.call(n):o}(o,r,n);var p=An;Bn(!0),Sn(i),Bn(p)}return i}var Ot=/^\s*function (\w+)/;function It(n){var e=n&&n.toString().match(Ot);return e?e[1]:""}function Dt(n,e){return It(n)===It(e)}function zt(n,e){if(!r(e))return Dt(e,n)?0:-1;for(var t=0,o=e.length;t<o;t++)if(Dt(e[t],n))return t;return-1}var jt={enumerable:!0,configurable:!0,get:D,set:D};function qt(n,e,t){jt.get=function(){return this[e][t]},jt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,jt)}function Mt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},o=n._props=jn({}),r=n.$options._propKeys=[];n.$parent&&Bn(!1);var a=function(a){r.push(a);var i=St(a,e,t,n);On(o,a,i),a in n||qt(n,"_props",a)};for(var i in e)a(i);Bn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var o=n._setupContext=ve(n);un(n),yn();var r=Ae(t,null,[n._props||jn({}),o],n,"setup");if(_n(),un(),l(r))e.render=r;else if(p(r))if(n._setupState=r,r.__sfc){var a=n._setupProxy={};for(var i in r)"__sfc"!==i&&Fn(a,r,i)}else for(var i in r)V(i)||Fn(n,r,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?D:P(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;u(e=n._data=l(e)?function(n,e){yn();try{return n.call(e,e)}catch(n){return Ce(n,e,"data()"),{}}finally{_n()}}(e,n):e||{})||(e={});var t=Object.keys(e),o=n.$options.props,r=(n.$options.methods,t.length);for(;r--;){var a=t[r];0,o&&E(o,a)||V(a)||qt(n,"_data",a)}var i=Sn(e);i&&i.vmCount++}(n);else{var t=Sn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),o=an();for(var r in e){var a=e[r],i=l(a)?a:a.get;0,o||(t[r]=new Ve(n,i||D,D,$t)),r in n||Ft(n,r,a)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var o=e[t];if(r(o))for(var a=0;a<o.length;a++)Nt(n,t,o[a]);else Nt(n,t,o)}}(n,e.watch)}var $t={lazy:!0};function Ft(n,e,t){var o=!an();l(t)?(jt.get=o?Rt(e):Lt(t),jt.set=D):(jt.get=t.get?o&&!1!==t.cache?Rt(e):Lt(t.get):D,jt.set=t.set||D),Object.defineProperty(n,e,jt)}function Rt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),bn.target&&e.depend(),e.value}}function Lt(n){return function(){return n.call(this,this)}}function Nt(n,e,t,o){return u(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,o)}var Ut=0;function Vt(n){var e=n.options;if(n.super){var t=Vt(n.super);if(t!==n.superOptions){n.superOptions=t;var o=function(n){var e,t=n.options,o=n.sealedOptions;for(var r in t)t[r]!==o[r]&&(e||(e={}),e[r]=t[r]);return e}(n);o&&O(n.extendOptions,o),(e=n.options=Tt(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Kt(n){this._init(n)}function Gt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,o=t.cid,r=n._Ctor||(n._Ctor={});if(r[o])return r[o];var a=gt(n)||gt(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=Tt(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)qt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)Ft(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,R.forEach((function(n){i[n]=t[n]})),a&&(i.options.components[a]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=O({},i.options),r[o]=i,i}}function Zt(n){return n&&(gt(n.Ctor.options)||n.tag)}function Ht(n,e){return r(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function Wt(n,e){var t=n.cache,o=n.keys,r=n._vnode;for(var a in t){var i=t[a];if(i){var s=i.name;s&&!e(s)&&Xt(t,a,o,r)}}}function Xt(n,e,t,o){var r=n[e];!r||o&&r.tag===o.tag||r.componentInstance.$destroy(),n[e]=null,y(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ut++,e._isVue=!0,e.__v_skip=!0,e._scope=new Ln(!0),n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),o=e._parentVnode;t.parent=e.parent,t._parentVnode=o;var r=o.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Tt(Vt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&He(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=de(e._renderChildren,r),n.$scopedSlots=t?fe(n.$parent,t.data.scopedSlots,n.$slots):o,n._c=function(e,t,o,r){return we(n,e,t,o,r,!1)},n.$createElement=function(e,t,o,r){return we(n,e,t,o,r,!0)};var a=t&&t.data;On(n,"$attrs",a&&a.attrs||o,null,!0),On(n,"$listeners",e._parentListeners||o,null,!0)}(e),Je(e,"beforeCreate",void 0,!1),function(n){var e=ut(n.$options.inject,n);e&&(Bn(!1),Object.keys(e).forEach((function(t){On(n,t,e[t])})),Bn(!0))}(e),Mt(e),function(n){var e=n.$options.provide;if(e){var t=l(e)?e.call(n):e;if(!p(t))return;for(var o=Nn(n),r=pn?Reflect.ownKeys(t):Object.keys(t),a=0;a<r.length;a++){var i=r[a];Object.defineProperty(o,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),Je(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Kt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=In,n.prototype.$delete=Dn,n.prototype.$watch=function(n,e,t){if(u(e))return Nt(this,n,e,t);(t=t||{}).user=!0;var o=new Ve(this,n,e,t);if(t.immediate){var r='callback for immediate watcher "'.concat(o.expression,'"');yn(),Ae(e,this,[o.value],this,r),_n()}return function(){o.teardown()}}}(Kt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var o=this;if(r(n))for(var a=0,i=n.length;a<i;a++)o.$on(n[a],t);else(o._events[n]||(o._events[n]=[])).push(t),e.test(n)&&(o._hasHookEvent=!0);return o},n.prototype.$once=function(n,e){var t=this;function o(){t.$off(n,o),e.apply(t,arguments)}return o.fn=e,t.$on(n,o),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(r(n)){for(var o=0,a=n.length;o<a;o++)t.$off(n[o],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var c=s.length;c--;)if((i=s[c])===e||i.fn===e){s.splice(c,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?S(t):t;for(var o=S(arguments,1),r='event handler for "'.concat(n,'"'),a=0,i=t.length;a<i;a++)Ae(t[a],e,o,e,r)}return e}}(Kt),function(n){n.prototype._update=function(n,e){var t=this,o=t.$el,r=t._vnode,a=Xe(t);t._vnode=n,t.$el=r?t.__patch__(r,n):t.__patch__(t.$el,n,e,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){Je(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||y(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),Je(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Kt),function(n){pe(n.prototype),n.prototype.$nextTick=function(n){return $e(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,o=t.render,a=t._parentVnode;a&&e._isMounted&&(e.$scopedSlots=fe(e.$parent,a.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&ye(e._slotsProxy,e.$scopedSlots)),e.$vnode=a;try{un(e),_e=e,n=o.call(e._renderProxy,e.$createElement)}catch(t){Ce(t,e,"render"),n=e._vnode}finally{_e=null,un()}return r(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=fn()),n.parent=a,n}}(Kt);var Yt=[String,RegExp,Array],Qt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Yt,exclude:Yt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var r=t.tag,a=t.componentInstance,i=t.componentOptions;n[o]={name:Zt(i),tag:r,componentInstance:a},e.push(o),this.max&&e.length>parseInt(this.max)&&Xt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Wt(n,(function(n){return Ht(e,n)}))})),this.$watch("exclude",(function(e){Wt(n,(function(n){return!Ht(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=xe(n),t=e&&e.componentOptions;if(t){var o=Zt(t),r=this.include,a=this.exclude;if(r&&(!o||!Ht(r,o))||a&&o&&Ht(a,o))return e;var i=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[c]?(e.componentInstance=i[c].componentInstance,y(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return N}};Object.defineProperty(n,"config",e),n.util={warn:_t,extend:O,mergeOptions:Tt,defineReactive:On},n.set=In,n.delete=Dn,n.nextTick=$e,n.observable=function(n){return Sn(n),n},n.options=Object.create(null),R.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,O(n.options.components,Qt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=S(arguments,1);return t.unshift(this),l(n.install)?n.install.apply(n,t):l(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Tt(this.options,n),this}}(n),Gt(n),function(n){R.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&u(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&l(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Kt),Object.defineProperty(Kt.prototype,"$isServer",{get:an}),Object.defineProperty(Kt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Kt,"FunctionalRenderContext",{value:mt}),Kt.version="2.7.8";var Jt=b("style,class"),no=b("input,textarea,option,select,progress"),eo=b("contenteditable,draggable,spellcheck"),to=b("events,caret,typing,plaintext-only"),oo=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ro="http://www.w3.org/1999/xlink",ao=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},io=function(n){return ao(n)?n.slice(6,n.length):""},so=function(n){return null==n||!1===n};function co(n){for(var e=n.data,t=n,o=n;i(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(e=lo(o.data,e));for(;i(t=t.parent);)t&&t.data&&(e=lo(e,t.data));return function(n,e){if(i(n)||i(e))return po(n,uo(e));return""}(e.staticClass,e.class)}function lo(n,e){return{staticClass:po(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function po(n,e){return n?e?n+" "+e:n:e||""}function uo(n){return Array.isArray(n)?function(n){for(var e,t="",o=0,r=n.length;o<r;o++)i(e=uo(n[o]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):p(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var mo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fo=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),ho=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),go=function(n){return fo(n)||ho(n)};var vo=Object.create(null);var bo=b("text,number,password,search,email,tel,url");var ko=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(mo[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),yo={create:function(n,e){_o(e)},update:function(n,e){n.data.ref!==e.data.ref&&(_o(n,!0),_o(e))},destroy:function(n){_o(n,!0)}};function _o(n,e){var t=n.data.ref;if(i(t)){var o=n.context,a=n.componentInstance||n.elm,s=e?null:a,c=e?void 0:a;if(l(t))Ae(t,o,[s],o,"template ref function");else{var p=n.data.refInFor,d="string"==typeof t||"number"==typeof t,u=$n(t),m=o.$refs;if(d||u)if(p){var f=d?m[t]:t.value;e?r(f)&&y(f,a):r(f)?f.includes(a)||f.push(a):d?(m[t]=[a],Eo(o,t,m[t])):t.value=[a]}else if(d){if(e&&m[t]!==a)return;m[t]=c,Eo(o,t,s)}else if(u){if(e&&t.value!==a)return;t.value=s}else 0}}}function Eo(n,e,t){var o=n._setupState;o&&E(o,e)&&($n(o[e])?o[e].value=t:o[e]=t)}var xo=new mn("",{},[]),wo=["create","activate","update","remove","destroy"];function Co(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,o=i(t=n.data)&&i(t=t.attrs)&&t.type,r=i(t=e.data)&&i(t=t.attrs)&&t.type;return o===r||bo(o)&&bo(r)}(n,e)||s(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function Ao(n,e,t){var o,r,a={};for(o=e;o<=t;++o)i(r=n[o].key)&&(a[r]=o);return a}var Bo={create:To,update:To,destroy:function(n){To(n,xo)}};function To(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,o,r,a=n===xo,i=e===xo,s=So(n.data.directives,n.context),c=So(e.data.directives,e.context),l=[],p=[];for(t in c)o=s[t],r=c[t],o?(r.oldValue=o.value,r.oldArg=o.arg,Io(r,"update",e,n),r.def&&r.def.componentUpdated&&p.push(r)):(Io(r,"bind",e,n),r.def&&r.def.inserted&&l.push(r));if(l.length){var d=function(){for(var t=0;t<l.length;t++)Io(l[t],"inserted",e,n)};a?Gn(e,"insert",d):d()}p.length&&Gn(e,"postpatch",(function(){for(var t=0;t<p.length;t++)Io(p[t],"componentUpdated",e,n)}));if(!a)for(t in s)c[t]||Io(s[t],"unbind",n,n,i)}(n,e)}var Po=Object.create(null);function So(n,e){var t,o,r=Object.create(null);if(!n)return r;for(t=0;t<n.length;t++)(o=n[t]).modifiers||(o.modifiers=Po),r[Oo(o)]=o,e._setupState&&e._setupState.__sfc&&(o.def=o.def||Pt(e,"_setupState","v-"+o.name)),o.def=o.def||Pt(e.$options,"directives",o.name);return r}function Oo(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Io(n,e,t,o,r){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,o,r)}catch(o){Ce(o,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Do=[yo,Bo];function zo(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var o,r,c=e.elm,l=n.data.attrs||{},p=e.data.attrs||{};for(o in(i(p.__ob__)||s(p._v_attr_proxy))&&(p=e.data.attrs=O({},p)),p)r=p[o],l[o]!==r&&jo(c,o,r,e.data.pre);for(o in(X||Q)&&p.value!==l.value&&jo(c,"value",p.value),l)a(p[o])&&(ao(o)?c.removeAttributeNS(ro,io(o)):eo(o)||c.removeAttribute(o))}}function jo(n,e,t,o){o||n.tagName.indexOf("-")>-1?qo(n,e,t):oo(e)?so(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):eo(e)?n.setAttribute(e,function(n,e){return so(e)||"false"===e?"false":"contenteditable"===n&&to(e)?e:"true"}(e,t)):ao(e)?so(t)?n.removeAttributeNS(ro,io(e)):n.setAttributeNS(ro,e,t):qo(n,e,t)}function qo(n,e,t){if(so(t))n.removeAttribute(e);else{if(X&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var o=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",o)};n.addEventListener("input",o),n.__ieph=!0}n.setAttribute(e,t)}}var Mo={create:zo,update:zo};function $o(n,e){var t=e.elm,o=e.data,r=n.data;if(!(a(o.staticClass)&&a(o.class)&&(a(r)||a(r.staticClass)&&a(r.class)))){var s=co(e),c=t._transitionClasses;i(c)&&(s=po(s,uo(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Fo,Ro={create:$o,update:$o};function Lo(n,e,t){var o=Fo;return function r(){var a=e.apply(null,arguments);null!==a&&Vo(n,r,t,o)}}var No=Se&&!(en&&Number(en[1])<=53);function Uo(n,e,t,o){if(No){var r=it,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=r||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}Fo.addEventListener(n,e,on?{capture:t,passive:o}:t)}function Vo(n,e,t,o){(o||Fo).removeEventListener(n,e._wrapper||e,t)}function Ko(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},o=n.data.on||{};Fo=e.elm||n.elm,function(n){if(i(n.__r)){var e=X?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Kn(t,o,Uo,Vo,Lo,e.context),Fo=void 0}}var Go,Zo={create:Ko,update:Ko,destroy:function(n){return Ko(n,xo)}};function Ho(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,o,r=e.elm,c=n.data.domProps||{},l=e.data.domProps||{};for(t in(i(l.__ob__)||s(l._v_attr_proxy))&&(l=e.data.domProps=O({},l)),c)t in l||(r[t]="");for(t in l){if(o=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),o===c[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=o;var p=a(o)?"":String(o);Wo(r,p)&&(r.value=p)}else if("innerHTML"===t&&ho(r.tagName)&&a(r.innerHTML)){(Go=Go||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var d=Go.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;d.firstChild;)r.appendChild(d.firstChild)}else if(o!==c[t])try{r[t]=o}catch(n){}}}}function Wo(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,o=n._vModifiers;if(i(o)){if(o.number)return v(t)!==v(e);if(o.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Xo={create:Ho,update:Ho},Yo=x((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var o=n.split(t);o.length>1&&(e[o[0].trim()]=o[1].trim())}})),e}));function Qo(n){var e=Jo(n.style);return n.staticStyle?O(n.staticStyle,e):e}function Jo(n){return Array.isArray(n)?I(n):"string"==typeof n?Yo(n):n}var nr,er=/^--/,tr=/\s*!important$/,or=function(n,e,t){if(er.test(e))n.style.setProperty(e,t);else if(tr.test(t))n.style.setProperty(T(e),t.replace(tr,""),"important");else{var o=ar(e);if(Array.isArray(t))for(var r=0,a=t.length;r<a;r++)n.style[o]=t[r];else n.style[o]=t}},rr=["Webkit","Moz","ms"],ar=x((function(n){if(nr=nr||document.createElement("div").style,"filter"!==(n=C(n))&&n in nr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<rr.length;t++){var o=rr[t]+e;if(o in nr)return o}}));function ir(n,e){var t=e.data,o=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var r,s,c=e.elm,l=o.staticStyle,p=o.normalizedStyle||o.style||{},d=l||p,u=Jo(e.data.style)||{};e.data.normalizedStyle=i(u.__ob__)?O({},u):u;var m=function(n,e){var t,o={};if(e)for(var r=n;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Qo(r.data))&&O(o,t);(t=Qo(n.data))&&O(o,t);for(var a=n;a=a.parent;)a.data&&(t=Qo(a.data))&&O(o,t);return o}(e,!0);for(s in d)a(m[s])&&or(c,s,"");for(s in m)(r=m[s])!==d[s]&&or(c,s,null==r?"":r)}}var sr={create:ir,update:ir},cr=/\s+/;function lr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(cr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function pr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(cr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),o=" "+e+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function dr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&O(e,ur(n.name||"v")),O(e,n),e}return"string"==typeof n?ur(n):void 0}}var ur=x((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),mr=H&&!Y,fr="transition",hr="transitionend",gr="animation",vr="animationend";mr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fr="WebkitTransition",hr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(gr="WebkitAnimation",vr="webkitAnimationEnd"));var br=H?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function kr(n){br((function(){br(n)}))}function yr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),lr(n,e))}function _r(n,e){n._transitionClasses&&y(n._transitionClasses,e),pr(n,e)}function Er(n,e,t){var o=wr(n,e),r=o.type,a=o.timeout,i=o.propCount;if(!r)return t();var s="transition"===r?hr:vr,c=0,l=function(){n.removeEventListener(s,p),t()},p=function(e){e.target===n&&++c>=i&&l()};setTimeout((function(){c<i&&l()}),a+1),n.addEventListener(s,p)}var xr=/\b(transform|all)(,|$)/;function wr(n,e){var t,o=window.getComputedStyle(n),r=(o[fr+"Delay"]||"").split(", "),a=(o[fr+"Duration"]||"").split(", "),i=Cr(r,a),s=(o[gr+"Delay"]||"").split(", "),c=(o[gr+"Duration"]||"").split(", "),l=Cr(s,c),p=0,d=0;return"transition"===e?i>0&&(t="transition",p=i,d=a.length):"animation"===e?l>0&&(t="animation",p=l,d=c.length):d=(t=(p=Math.max(i,l))>0?i>l?"transition":"animation":null)?"transition"===t?a.length:c.length:0,{type:t,timeout:p,propCount:d,hasTransform:"transition"===t&&xr.test(o[fr+"Property"])}}function Cr(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ar(e)+Ar(n[t])})))}function Ar(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Br(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=dr(n.data.transition);if(!a(o)&&!i(t._enterCb)&&1===t.nodeType){for(var r=o.css,s=o.type,c=o.enterClass,d=o.enterToClass,u=o.enterActiveClass,m=o.appearClass,f=o.appearToClass,h=o.appearActiveClass,g=o.beforeEnter,b=o.enter,k=o.afterEnter,y=o.enterCancelled,_=o.beforeAppear,E=o.appear,x=o.afterAppear,w=o.appearCancelled,C=o.duration,A=We,B=We.$vnode;B&&B.parent;)A=B.context,B=B.parent;var T=!A._isMounted||!n.isRootInsert;if(!T||E||""===E){var P=T&&m?m:c,S=T&&h?h:u,O=T&&f?f:d,I=T&&_||g,D=T&&l(E)?E:b,z=T&&x||k,j=T&&w||y,q=v(p(C)?C.enter:C);0;var M=!1!==r&&!Y,F=Sr(D),R=t._enterCb=$((function(){M&&(_r(t,O),_r(t,S)),R.cancelled?(M&&_r(t,P),j&&j(t)):z&&z(t),t._enterCb=null}));n.data.show||Gn(n,"insert",(function(){var e=t.parentNode,o=e&&e._pending&&e._pending[n.key];o&&o.tag===n.tag&&o.elm._leaveCb&&o.elm._leaveCb(),D&&D(t,R)})),I&&I(t),M&&(yr(t,P),yr(t,S),kr((function(){_r(t,P),R.cancelled||(yr(t,O),F||(Pr(q)?setTimeout(R,q):Er(t,s,R)))}))),n.data.show&&(e&&e(),D&&D(t,R)),M||F||R()}}}function Tr(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=dr(n.data.transition);if(a(o)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var r=o.css,s=o.type,c=o.leaveClass,l=o.leaveToClass,d=o.leaveActiveClass,u=o.beforeLeave,m=o.leave,f=o.afterLeave,h=o.leaveCancelled,g=o.delayLeave,b=o.duration,k=!1!==r&&!Y,y=Sr(m),_=v(p(b)?b.leave:b);0;var E=t._leaveCb=$((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),k&&(_r(t,l),_r(t,d)),E.cancelled?(k&&_r(t,c),h&&h(t)):(e(),f&&f(t)),t._leaveCb=null}));g?g(x):x()}function x(){E.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),u&&u(t),k&&(yr(t,c),yr(t,d),kr((function(){_r(t,c),E.cancelled||(yr(t,l),y||(Pr(_)?setTimeout(E,_):Er(t,s,E)))}))),m&&m(t,E),k||y||E())}}function Pr(n){return"number"==typeof n&&!isNaN(n)}function Sr(n){if(a(n))return!1;var e=n.fns;return i(e)?Sr(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Or(n,e){!0!==e.data.show&&Br(e)}var Ir=function(n){var e,t,o={},l=n.modules,p=n.nodeOps;for(e=0;e<wo.length;++e)for(o[wo[e]]=[],t=0;t<l.length;++t)i(l[t][wo[e]])&&o[wo[e]].push(l[t][wo[e]]);function d(n){var e=p.parentNode(n);i(e)&&p.removeChild(e,n)}function u(n,e,t,r,a,c,l){if(i(n.elm)&&i(c)&&(n=c[l]=gn(n)),n.isRootInsert=!a,!function(n,e,t,r){var a=n.data;if(i(a)){var c=i(n.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(n,!1),i(n.componentInstance))return m(n,e),f(t,n.elm,r),s(c)&&function(n,e,t,r){var a,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(a=s.data)&&i(a=a.transition)){for(a=0;a<o.activate.length;++a)o.activate[a](xo,s);e.push(s);break}f(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var d=n.data,u=n.children,g=n.tag;i(g)?(n.elm=n.ns?p.createElementNS(n.ns,g):p.createElement(g,n),k(n),h(n,u,e),i(d)&&v(n,e),f(t,n.elm,r)):s(n.isComment)?(n.elm=p.createComment(n.text),f(t,n.elm,r)):(n.elm=p.createTextNode(n.text),f(t,n.elm,r))}}function m(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),k(n)):(_o(n),e.push(n))}function f(n,e,t){i(n)&&(i(t)?p.parentNode(t)===n&&p.insertBefore(n,e,t):p.appendChild(n,e))}function h(n,e,t){if(r(e)){0;for(var o=0;o<e.length;++o)u(e[o],t,n.elm,null,!0,e,o)}else c(n.text)&&p.appendChild(n.elm,p.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function v(n,t){for(var r=0;r<o.create.length;++r)o.create[r](xo,n);i(e=n.data.hook)&&(i(e.create)&&e.create(xo,n),i(e.insert)&&t.push(n))}function k(n){var e;if(i(e=n.fnScopeId))p.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e),t=t.parent;i(e=We)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e)}function y(n,e,t,o,r,a){for(;o<=r;++o)u(t[o],a,n,e,!1,t,o)}function _(n){var e,t,r=n.data;if(i(r))for(i(e=r.hook)&&i(e=e.destroy)&&e(n),e=0;e<o.destroy.length;++e)o.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)_(n.children[t])}function E(n,e,t){for(;e<=t;++e){var o=n[e];i(o)&&(i(o.tag)?(x(o),_(o)):d(o.elm))}}function x(n,e){if(i(e)||i(n.data)){var t,r=o.remove.length+1;for(i(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,r),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&x(t,e),t=0;t<o.remove.length;++t)o.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else d(n.elm)}function w(n,e,t,o){for(var r=t;r<o;r++){var a=e[r];if(i(a)&&Co(n,a))return r}}function C(n,e,t,r,c,l){if(n!==e){i(e.elm)&&i(r)&&(e=r[c]=gn(e));var d=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?T(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var m,f=e.data;i(f)&&i(m=f.hook)&&i(m=m.prepatch)&&m(n,e);var h=n.children,v=e.children;if(i(f)&&g(e)){for(m=0;m<o.update.length;++m)o.update[m](n,e);i(m=f.hook)&&i(m=m.update)&&m(n,e)}a(e.text)?i(h)&&i(v)?h!==v&&function(n,e,t,o,r){var s,c,l,d=0,m=0,f=e.length-1,h=e[0],g=e[f],v=t.length-1,b=t[0],k=t[v],_=!r;for(0;d<=f&&m<=v;)a(h)?h=e[++d]:a(g)?g=e[--f]:Co(h,b)?(C(h,b,o,t,m),h=e[++d],b=t[++m]):Co(g,k)?(C(g,k,o,t,v),g=e[--f],k=t[--v]):Co(h,k)?(C(h,k,o,t,v),_&&p.insertBefore(n,h.elm,p.nextSibling(g.elm)),h=e[++d],k=t[--v]):Co(g,b)?(C(g,b,o,t,m),_&&p.insertBefore(n,g.elm,h.elm),g=e[--f],b=t[++m]):(a(s)&&(s=Ao(e,d,f)),a(c=i(b.key)?s[b.key]:w(b,e,d,f))?u(b,o,n,h.elm,!1,t,m):Co(l=e[c],b)?(C(l,b,o,t,m),e[c]=void 0,_&&p.insertBefore(n,l.elm,h.elm)):u(b,o,n,h.elm,!1,t,m),b=t[++m]);d>f?y(n,a(t[v+1])?null:t[v+1].elm,t,m,v,o):m>v&&E(e,d,f)}(d,h,v,t,l):i(v)?(i(n.text)&&p.setTextContent(d,""),y(d,null,v,0,v.length-1,t)):i(h)?E(h,0,h.length-1):i(n.text)&&p.setTextContent(d,""):n.text!==e.text&&p.setTextContent(d,e.text),i(f)&&i(m=f.hook)&&i(m=m.postpatch)&&m(n,e)}}}function A(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var o=0;o<e.length;++o)e[o].data.hook.insert(e[o])}var B=b("attrs,class,staticClass,staticStyle,key");function T(n,e,t,o){var r,a=e.tag,c=e.data,l=e.children;if(o=o||c&&c.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(r=c.hook)&&i(r=r.init)&&r(e,!0),i(r=e.componentInstance)))return m(e,t),!0;if(i(a)){if(i(l))if(n.hasChildNodes())if(i(r=c)&&i(r=r.domProps)&&i(r=r.innerHTML)){if(r!==n.innerHTML)return!1}else{for(var p=!0,d=n.firstChild,u=0;u<l.length;u++){if(!d||!T(d,l[u],t,o)){p=!1;break}d=d.nextSibling}if(!p||d)return!1}else h(e,l,t);if(i(c)){var f=!1;for(var g in c)if(!B(g)){f=!0,v(e,t);break}!f&&c.class&&Le(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,r){if(!a(e)){var c,l=!1,d=[];if(a(n))l=!0,u(e,d);else{var m=i(n.nodeType);if(!m&&Co(n,e))C(n,e,d,null,null,r);else{if(m){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&T(n,e,d))return A(e,d,!0),n;c=n,n=new mn(p.tagName(c).toLowerCase(),{},[],void 0,c)}var f=n.elm,h=p.parentNode(f);if(u(e,d,f._leaveCb?null:h,p.nextSibling(f)),i(e.parent))for(var v=e.parent,b=g(e);v;){for(var k=0;k<o.destroy.length;++k)o.destroy[k](v);if(v.elm=e.elm,b){for(var y=0;y<o.create.length;++y)o.create[y](xo,v);var x=v.data.hook.insert;if(x.merged)for(var w=1;w<x.fns.length;w++)x.fns[w]()}else _o(v);v=v.parent}i(h)?E([n],0,0):i(n.tag)&&_(n)}}return A(e,d,l),e.elm}i(n)&&_(n)}}({nodeOps:ko,modules:[Mo,Ro,Zo,Xo,sr,H?{create:Or,activate:Or,remove:function(n,e){!0!==n.data.show?Tr(n,e):e()}}:{}].concat(Do)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Rr(n,"input")}));var Dr={inserted:function(n,e,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?Gn(t,"postpatch",(function(){Dr.componentUpdated(n,e,t)})):zr(n,e,t.context),n._vOptions=[].map.call(n.options,Mr)):("textarea"===t.tag||bo(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",$r),n.addEventListener("compositionend",Fr),n.addEventListener("change",Fr),Y&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){zr(n,e,t.context);var o=n._vOptions,r=n._vOptions=[].map.call(n.options,Mr);if(r.some((function(n,e){return!q(n,o[e])})))(n.multiple?e.value.some((function(n){return qr(n,r)})):e.value!==e.oldValue&&qr(e.value,r))&&Rr(n,"change")}}};function zr(n,e,t){jr(n,e,t),(X||Q)&&setTimeout((function(){jr(n,e,t)}),0)}function jr(n,e,t){var o=e.value,r=n.multiple;if(!r||Array.isArray(o)){for(var a,i,s=0,c=n.options.length;s<c;s++)if(i=n.options[s],r)a=M(o,Mr(i))>-1,i.selected!==a&&(i.selected=a);else if(q(Mr(i),o))return void(n.selectedIndex!==s&&(n.selectedIndex=s));r||(n.selectedIndex=-1)}}function qr(n,e){return e.every((function(e){return!q(e,n)}))}function Mr(n){return"_value"in n?n._value:n.value}function $r(n){n.target.composing=!0}function Fr(n){n.target.composing&&(n.target.composing=!1,Rr(n.target,"input"))}function Rr(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Lr(n){return!n.componentInstance||n.data&&n.data.transition?n:Lr(n.componentInstance._vnode)}var Nr={model:Dr,show:{bind:function(n,e,t){var o=e.value,r=(t=Lr(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;o&&r?(t.data.show=!0,Br(t,(function(){n.style.display=a}))):n.style.display=o?a:"none"},update:function(n,e,t){var o=e.value;!o!=!e.oldValue&&((t=Lr(t)).data&&t.data.transition?(t.data.show=!0,o?Br(t,(function(){n.style.display=n.__vOriginalDisplay})):Tr(t,(function(){n.style.display="none"}))):n.style.display=o?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,o,r){r||(n.style.display=n.__vOriginalDisplay)}}},Ur={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Vr(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Vr(xe(e.children)):n}function Kr(n){var e={},t=n.$options;for(var o in t.propsData)e[o]=n[o];var r=t._parentListeners;for(var o in r)e[C(o)]=r[o];return e}function Gr(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Zr=function(n){return n.tag||me(n)},Hr=function(n){return"show"===n.name},Wr={name:"transition",props:Ur,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Zr)).length){0;var o=this.mode;0;var r=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return r;var a=Vr(r);if(!a)return r;if(this._leaving)return Gr(n,r);var i="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?i+"comment":i+a.tag:c(a.key)?0===String(a.key).indexOf(i)?a.key:i+a.key:a.key;var s=(a.data||(a.data={})).transition=Kr(this),l=this._vnode,p=Vr(l);if(a.data.directives&&a.data.directives.some(Hr)&&(a.data.show=!0),p&&p.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,p)&&!me(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var d=p.data.transition=O({},s);if("out-in"===o)return this._leaving=!0,Gn(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Gr(n,r);if("in-out"===o){if(me(a))return l;var u,m=function(){u()};Gn(s,"afterEnter",m),Gn(s,"enterCancelled",m),Gn(d,"delayLeave",(function(n){u=n}))}}return r}}},Xr=O({tag:String,moveClass:String},Ur);function Yr(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Qr(n){n.data.newPos=n.elm.getBoundingClientRect()}function Jr(n){var e=n.data.pos,t=n.data.newPos,o=e.left-t.left,r=e.top-t.top;if(o||r){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate(".concat(o,"px,").concat(r,"px)"),a.transitionDuration="0s"}}delete Xr.mode;var na={Transition:Wr,TransitionGroup:{props:Xr,beforeMount:function(){var n=this,e=this._update;this._update=function(t,o){var r=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,r(),e.call(n,t,o)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],a=this.children=[],i=Kr(this),s=0;s<r.length;s++){if((p=r[s]).tag)if(null!=p.key&&0!==String(p.key).indexOf("__vlist"))a.push(p),t[p.key]=p,(p.data||(p.data={})).transition=i;else;}if(o){var c=[],l=[];for(s=0;s<o.length;s++){var p;(p=o[s]).data.transition=i,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):l.push(p)}this.kept=n(e,null,c),this.removed=l}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Yr),n.forEach(Qr),n.forEach(Jr),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,o=t.style;yr(t,e),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(hr,t._moveCb=function n(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(hr,n),t._moveCb=null,_r(t,e))})}})))},methods:{hasMove:function(n,e){if(!mr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){pr(t,n)})),lr(t,e),t.style.display="none",this.$el.appendChild(t);var o=wr(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ea(n,e){for(var t in e)n[t]=e[t];return n}Kt.config.mustUseProp=function(n,e,t){return"value"===t&&no(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Kt.config.isReservedTag=go,Kt.config.isReservedAttr=Jt,Kt.config.getTagNamespace=function(n){return ho(n)?"svg":"math"===n?"math":void 0},Kt.config.isUnknownElement=function(n){if(!H)return!0;if(go(n))return!1;if(n=n.toLowerCase(),null!=vo[n])return vo[n];var e=document.createElement(n);return n.indexOf("-")>-1?vo[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:vo[n]=/HTMLUnknownElement/.test(e.toString())},O(Kt.options.directives,Nr),O(Kt.options.components,na),Kt.prototype.__patch__=H?Ir:D,Kt.prototype.$mount=function(n,e){return function(n,e,t){var o;n.$el=e,n.$options.render||(n.$options.render=fn),Je(n,"beforeMount"),o=function(){n._update(n._render(),t)},new Ve(n,o,D,{before:function(){n._isMounted&&!n._isDestroyed&&Je(n,"beforeUpdate")}},!0),t=!1;var r=n._preWatchers;if(r)for(var a=0;a<r.length;a++)r[a].run();return null==n.$vnode&&(n._isMounted=!0,Je(n,"mounted")),n}(this,n=n&&H?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},H&&setTimeout((function(){N.devtools&&sn&&sn.emit("init",Kt)}),0);var ta=/[!'()*]/g,oa=function(n){return"%"+n.charCodeAt(0).toString(16)},ra=/%2C/g,aa=function(n){return encodeURIComponent(n).replace(ta,oa).replace(ra,",")};function ia(n){try{return decodeURIComponent(n)}catch(n){0}return n}var sa=function(n){return null==n||"object"==typeof n?n:String(n)};function ca(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),o=ia(t.shift()),r=t.length>0?ia(t.join("=")):null;void 0===e[o]?e[o]=r:Array.isArray(e[o])?e[o].push(r):e[o]=[e[o],r]})),e):e}function la(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return aa(e);if(Array.isArray(t)){var o=[];return t.forEach((function(n){void 0!==n&&(null===n?o.push(aa(e)):o.push(aa(e)+"="+aa(n)))})),o.join("&")}return aa(e)+"="+aa(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var pa=/\/?$/;function da(n,e,t,o){var r=o&&o.options.stringifyQuery,a=e.query||{};try{a=ua(a)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:ha(e,r),matched:n?fa(n):[]};return t&&(i.redirectedFrom=ha(t,r)),Object.freeze(i)}function ua(n){if(Array.isArray(n))return n.map(ua);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=ua(n[t]);return e}return n}var ma=da(null,{path:"/"});function fa(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function ha(n,e){var t=n.path,o=n.query;void 0===o&&(o={});var r=n.hash;return void 0===r&&(r=""),(t||"/")+(e||la)(o)+r}function ga(n,e,t){return e===ma?n===e:!!e&&(n.path&&e.path?n.path.replace(pa,"")===e.path.replace(pa,"")&&(t||n.hash===e.hash&&va(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&va(n.query,e.query)&&va(n.params,e.params))))}function va(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),o=Object.keys(e).sort();return t.length===o.length&&t.every((function(t,r){var a=n[t];if(o[r]!==t)return!1;var i=e[t];return null==a||null==i?a===i:"object"==typeof a&&"object"==typeof i?va(a,i):String(a)===String(i)}))}function ba(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var o in t.instances){var r=t.instances[o],a=t.enteredCbs[o];if(r&&a){delete t.enteredCbs[o];for(var i=0;i<a.length;i++)r._isBeingDestroyed||a[i](r)}}}}var ka={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,o=e.children,r=e.parent,a=e.data;a.routerView=!0;for(var i=r.$createElement,s=t.name,c=r.$route,l=r._routerViewCache||(r._routerViewCache={}),p=0,d=!1;r&&r._routerRoot!==r;){var u=r.$vnode?r.$vnode.data:{};u.routerView&&p++,u.keepAlive&&r._directInactive&&r._inactive&&(d=!0),r=r.$parent}if(a.routerViewDepth=p,d){var m=l[s],f=m&&m.component;return f?(m.configProps&&ya(f,a,m.route,m.configProps),i(f,a,o)):i()}var h=c.matched[p],g=h&&h.components[s];if(!h||!g)return l[s]=null,i();l[s]={component:g},a.registerRouteInstance=function(n,e){var t=h.instances[s];(e&&t!==n||!e&&t===n)&&(h.instances[s]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){h.instances[s]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[s]&&(h.instances[s]=n.componentInstance),ba(c)};var v=h.props&&h.props[s];return v&&(ea(l[s],{route:c,configProps:v}),ya(g,a,c,v)),i(g,a,o)}};function ya(n,e,t,o){var r=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,o);if(r){r=e.props=ea({},r);var a=e.attrs=e.attrs||{};for(var i in r)n.props&&i in n.props||(a[i]=r[i],delete r[i])}}function _a(n,e,t){var o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var a=n.replace(/^\//,"").split("/"),i=0;i<a.length;i++){var s=a[i];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function Ea(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var xa=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},wa=$a,Ca=Sa,Aa=function(n,e){return Ia(Sa(n,e),e)},Ba=Ia,Ta=Ma,Pa=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Sa(n,e){for(var t,o=[],r=0,a=0,i="",s=e&&e.delimiter||"/";null!=(t=Pa.exec(n));){var c=t[0],l=t[1],p=t.index;if(i+=n.slice(a,p),a=p+c.length,l)i+=l[1];else{var d=n[a],u=t[2],m=t[3],f=t[4],h=t[5],g=t[6],v=t[7];i&&(o.push(i),i="");var b=null!=u&&null!=d&&d!==u,k="+"===g||"*"===g,y="?"===g||"*"===g,_=t[2]||s,E=f||h;o.push({name:m||r++,prefix:u||"",delimiter:_,optional:y,repeat:k,partial:b,asterisk:!!v,pattern:E?za(E):v?".*":"[^"+Da(_)+"]+?"})}}return a<n.length&&(i+=n.substr(a)),i&&o.push(i),o}function Oa(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Ia(n,e){for(var t=new Array(n.length),o=0;o<n.length;o++)"object"==typeof n[o]&&(t[o]=new RegExp("^(?:"+n[o].pattern+")$",qa(e)));return function(e,o){for(var r="",a=e||{},i=(o||{}).pretty?Oa:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,p=a[c.name];if(null==p){if(c.optional){c.partial&&(r+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(xa(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(l=i(p[d]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");r+=(0===d?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(p),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');r+=c.prefix+l}}else r+=c}return r}}function Da(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function za(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function ja(n,e){return n.keys=e,n}function qa(n){return n&&n.sensitive?"":"i"}function Ma(n,e,t){xa(e)||(t=e||t,e=[]);for(var o=(t=t||{}).strict,r=!1!==t.end,a="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)a+=Da(s);else{var c=Da(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),a+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var p=Da(t.delimiter||"/"),d=a.slice(-p.length)===p;return o||(a=(d?a.slice(0,-p.length):a)+"(?:"+p+"(?=$))?"),a+=r?"$":o&&d?"":"(?="+p+"|$)",ja(new RegExp("^"+a,qa(t)),e)}function $a(n,e,t){return xa(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)e.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return ja(n,e)}(n,e):xa(n)?function(n,e,t){for(var o=[],r=0;r<n.length;r++)o.push($a(n[r],e,t).source);return ja(new RegExp("(?:"+o.join("|")+")",qa(t)),e)}(n,e,t):function(n,e,t){return Ma(Sa(n,t),e,t)}(n,e,t)}wa.parse=Ca,wa.compile=Aa,wa.tokensToFunction=Ba,wa.tokensToRegExp=Ta;var Fa=Object.create(null);function Ra(n,e,t){e=e||{};try{var o=Fa[n]||(Fa[n]=wa.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),o(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function La(n,e,t,o){var r="string"==typeof n?{path:n}:n;if(r._normalized)return r;if(r.name){var a=(r=ea({},n)).params;return a&&"object"==typeof a&&(r.params=ea({},a)),r}if(!r.path&&r.params&&e){(r=ea({},r))._normalized=!0;var i=ea(ea({},e.params),r.params);if(e.name)r.name=e.name,r.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;r.path=Ra(s,i,e.path)}else 0;return r}var c=function(n){var e="",t="",o=n.indexOf("#");o>=0&&(e=n.slice(o),n=n.slice(0,o));var r=n.indexOf("?");return r>=0&&(t=n.slice(r+1),n=n.slice(0,r)),{path:n,query:t,hash:e}}(r.path||""),l=e&&e.path||"/",p=c.path?_a(c.path,l,t||r.append):l,d=function(n,e,t){void 0===e&&(e={});var o,r=t||ca;try{o=r(n||"")}catch(n){o={}}for(var a in e){var i=e[a];o[a]=Array.isArray(i)?i.map(sa):sa(i)}return o}(c.query,r.query,o&&o.options.parseQuery),u=r.hash||c.hash;return u&&"#"!==u.charAt(0)&&(u="#"+u),{_normalized:!0,path:p,query:d,hash:u}}var Na,Ua=function(){},Va={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,o=this.$route,r=t.resolve(this.to,o,this.append),a=r.location,i=r.route,s=r.href,c={},l=t.options.linkActiveClass,p=t.options.linkExactActiveClass,d=null==l?"router-link-active":l,u=null==p?"router-link-exact-active":p,m=null==this.activeClass?d:this.activeClass,f=null==this.exactActiveClass?u:this.exactActiveClass,h=i.redirectedFrom?da(null,La(i.redirectedFrom),null,t):i;c[f]=ga(o,h,this.exactPath),c[m]=this.exact||this.exactPath?c[f]:function(n,e){return 0===n.path.replace(pa,"/").indexOf(e.path.replace(pa,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(o,h);var g=c[f]?this.ariaCurrentValue:null,v=function(n){Ka(n)&&(e.replace?t.replace(a,Ua):t.push(a,Ua))},b={click:Ka};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var k={class:c},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:v,isActive:c[m],isExactActive:c[f]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)k.on=b,k.attrs={href:s,"aria-current":g};else{var _=function n(e){var t;if(e)for(var o=0;o<e.length;o++){if("a"===(t=e[o]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(_){_.isStatic=!1;var E=_.data=ea({},_.data);for(var x in E.on=E.on||{},E.on){var w=E.on[x];x in b&&(E.on[x]=Array.isArray(w)?w:[w])}for(var C in b)C in E.on?E.on[C].push(b[C]):E.on[C]=v;var A=_.data.attrs=ea({},_.data.attrs);A.href=s,A["aria-current"]=g}else k.on=b}return n(this.tag,k,this.$slots.default)}};function Ka(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ga="undefined"!=typeof window;function Za(n,e,t,o,r){var a=e||[],i=t||Object.create(null),s=o||Object.create(null);n.forEach((function(n){!function n(e,t,o,r,a,i){var s=r.path,c=r.name;0;var l=r.pathToRegexpOptions||{},p=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return Ea(e.path+"/"+n)}(s,a,l.strict);"boolean"==typeof r.caseSensitive&&(l.sensitive=r.caseSensitive);var d={path:p,regex:Ha(p,l),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:c,parent:a,matchAs:i,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var a=i?Ea(i+"/"+r.path):void 0;n(e,t,o,r,d,a)}));t[d.path]||(e.push(d.path),t[d.path]=d);if(void 0!==r.alias)for(var u=Array.isArray(r.alias)?r.alias:[r.alias],m=0;m<u.length;++m){0;var f={path:u[m],children:r.children};n(e,t,o,f,a,d.path||"/")}c&&(o[c]||(o[c]=d))}(a,i,s,n,r)}));for(var c=0,l=a.length;c<l;c++)"*"===a[c]&&(a.push(a.splice(c,1)[0]),l--,c--);return{pathList:a,pathMap:i,nameMap:s}}function Ha(n,e){return wa(n,[],e)}function Wa(n,e){var t=Za(n),o=t.pathList,r=t.pathMap,a=t.nameMap;function i(n,t,i){var s=La(n,t,!1,e),l=s.name;if(l){var p=a[l];if(!p)return c(null,s);var d=p.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var u in t.params)!(u in s.params)&&d.indexOf(u)>-1&&(s.params[u]=t.params[u]);return s.path=Ra(p.path,s.params),c(p,s,i)}if(s.path){s.params={};for(var m=0;m<o.length;m++){var f=o[m],h=r[f];if(Xa(h.regex,s.path,s.params))return c(h,s,i)}}return c(null,s)}function s(n,t){var o=n.redirect,r="function"==typeof o?o(da(n,t,null,e)):o;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return c(null,t);var s=r,l=s.name,p=s.path,d=t.query,u=t.hash,m=t.params;if(d=s.hasOwnProperty("query")?s.query:d,u=s.hasOwnProperty("hash")?s.hash:u,m=s.hasOwnProperty("params")?s.params:m,l){a[l];return i({_normalized:!0,name:l,query:d,hash:u,params:m},void 0,t)}if(p){var f=function(n,e){return _a(n,e.parent?e.parent.path:"/",!0)}(p,n);return i({_normalized:!0,path:Ra(f,m),query:d,hash:u},void 0,t)}return c(null,t)}function c(n,t,o){return n&&n.redirect?s(n,o||t):n&&n.matchAs?function(n,e,t){var o=i({_normalized:!0,path:Ra(t,e.params)});if(o){var r=o.matched,a=r[r.length-1];return e.params=o.params,c(a,e)}return c(null,e)}(0,t,n.matchAs):da(n,t,o,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Za([e||n],o,r,a,t),t&&t.alias.length&&Za(t.alias.map((function(n){return{path:n,children:[e]}})),o,r,a,t)},getRoutes:function(){return o.map((function(n){return r[n]}))},addRoutes:function(n){Za(n,o,r,a)}}}function Xa(n,e,t){var o=e.match(n);if(!o)return!1;if(!t)return!0;for(var r=1,a=o.length;r<a;++r){var i=n.keys[r-1];i&&(t[i.name||"pathMatch"]="string"==typeof o[r]?ia(o[r]):o[r])}return!0}var Ya=Ga&&window.performance&&window.performance.now?window.performance:Date;function Qa(){return Ya.now().toFixed(3)}var Ja=Qa();function ni(){return Ja}function ei(n){return Ja=n}var ti=Object.create(null);function oi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ea({},window.history.state);return t.key=ni(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ii),function(){window.removeEventListener("popstate",ii)}}function ri(n,e,t,o){if(n.app){var r=n.options.scrollBehavior;r&&n.app.$nextTick((function(){var a=function(){var n=ni();if(n)return ti[n]}(),i=r.call(n,e,t,o?a:null);i&&("function"==typeof i.then?i.then((function(n){di(n,a)})).catch((function(n){0})):di(i,a))}))}}function ai(){var n=ni();n&&(ti[n]={x:window.pageXOffset,y:window.pageYOffset})}function ii(n){ai(),n.state&&n.state.key&&ei(n.state.key)}function si(n){return li(n.x)||li(n.y)}function ci(n){return{x:li(n.x)?n.x:window.pageXOffset,y:li(n.y)?n.y:window.pageYOffset}}function li(n){return"number"==typeof n}var pi=/^#\d/;function di(n,e){var t,o="object"==typeof n;if(o&&"string"==typeof n.selector){var r=pi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(r){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),o=n.getBoundingClientRect();return{x:o.left-t.left-e.x,y:o.top-t.top-e.y}}(r,a={x:li((t=a).x)?t.x:0,y:li(t.y)?t.y:0})}else si(n)&&(e=ci(n))}else o&&si(n)&&(e=ci(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var ui,mi=Ga&&((-1===(ui=window.navigator.userAgent).indexOf("Android 2.")&&-1===ui.indexOf("Android 4.0")||-1===ui.indexOf("Mobile Safari")||-1!==ui.indexOf("Chrome")||-1!==ui.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fi(n,e){ai();var t=window.history;try{if(e){var o=ea({},t.state);o.key=ni(),t.replaceState(o,"",n)}else t.pushState({key:ei(Qa())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function hi(n){fi(n,!0)}function gi(n,e,t){var o=function(r){r>=n.length?t():n[r]?e(n[r],(function(){o(r+1)})):o(r+1)};o(0)}var vi={redirected:2,aborted:4,cancelled:8,duplicated:16};function bi(n,e){return yi(n,e,vi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return _i.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function ki(n,e){return yi(n,e,vi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function yi(n,e,t,o){var r=new Error(o);return r._isRouter=!0,r.from=n,r.to=e,r.type=t,r}var _i=["params","query","hash"];function Ei(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function xi(n,e){return Ei(n)&&n._isRouter&&(null==e||n.type===e)}function wi(n){return function(e,t,o){var r=!1,a=0,i=null;Ci(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){r=!0,a++;var c,l=Ti((function(e){var r;((r=e).__esModule||Bi&&"Module"===r[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Na.extend(e),t.components[s]=e,--a<=0&&o()})),p=Ti((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=Ei(n)?n:new Error(e),o(i))}));try{c=n(l,p)}catch(n){p(n)}if(c)if("function"==typeof c.then)c.then(l,p);else{var d=c.component;d&&"function"==typeof d.then&&d.then(l,p)}}})),r||o()}}function Ci(n,e){return Ai(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Ai(n){return Array.prototype.concat.apply([],n)}var Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ti(n){var e=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!e)return e=!0,n.apply(this,t)}}var Pi=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ga){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ma,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Si(n,e,t,o){var r=Ci(n,(function(n,o,r,a){var i=function(n,e){"function"!=typeof n&&(n=Na.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,o,r,a)})):t(i,o,r,a)}));return Ai(o?r.reverse():r)}function Oi(n,e){if(e)return function(){return n.apply(e,arguments)}}Pi.prototype.listen=function(n){this.cb=n},Pi.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Pi.prototype.onError=function(n){this.errorCbs.push(n)},Pi.prototype.transitionTo=function(n,e,t){var o,r=this;try{o=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(o,(function(){r.updateRoute(o),e&&e(o),r.ensureURL(),r.router.afterHooks.forEach((function(n){n&&n(o,a)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(n){n(o)})))}),(function(n){t&&t(n),n&&!r.ready&&(xi(n,vi.redirected)&&a===ma||(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(n)}))))}))},Pi.prototype.confirmTransition=function(n,e,t){var o=this,r=this.current;this.pending=n;var a,i,s=function(n){!xi(n)&&Ei(n)&&(o.errorCbs.length?o.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=r.matched.length-1;if(ga(n,r)&&c===l&&n.matched[c]===r.matched[l])return this.ensureURL(),n.hash&&ri(this.router,r,n,!1),s(((i=yi(a=r,n,vi.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",i));var p=function(n,e){var t,o=Math.max(n.length,e.length);for(t=0;t<o&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),d=p.updated,u=p.deactivated,m=p.activated,f=[].concat(function(n){return Si(n,"beforeRouteLeave",Oi,!0)}(u),this.router.beforeHooks,function(n){return Si(n,"beforeRouteUpdate",Oi)}(d),m.map((function(n){return n.beforeEnter})),wi(m)),h=function(e,t){if(o.pending!==n)return s(ki(r,n));try{e(n,r,(function(e){!1===e?(o.ensureURL(!0),s(function(n,e){return yi(n,e,vi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(r,n))):Ei(e)?(o.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(bi(r,n)),"object"==typeof e&&e.replace?o.replace(e):o.push(e)):t(e)}))}catch(n){s(n)}};gi(f,h,(function(){gi(function(n){return Si(n,"beforeRouteEnter",(function(n,e,t,o){return function(n,e,t){return function(o,r,a){return n(o,r,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,o)}))}(m).concat(o.router.resolveHooks),h,(function(){if(o.pending!==n)return s(ki(r,n));o.pending=null,e(n),o.router.app&&o.router.app.$nextTick((function(){ba(n)}))}))}))},Pi.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Pi.prototype.setupListeners=function(){},Pi.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ma,this.pending=null};var Ii=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Di(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,o=mi&&t;o&&this.listeners.push(oi());var r=function(){var t=n.current,r=Di(n.base);n.current===ma&&r===n._startLocation||n.transitionTo(r,(function(n){o&&ri(e,n,t,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){fi(Ea(o.base+n.fullPath)),ri(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){hi(Ea(o.base+n.fullPath)),ri(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Di(this.base)!==this.current.fullPath){var e=Ea(this.base+this.current.fullPath);n?fi(e):hi(e)}},e.prototype.getCurrentLocation=function(){return Di(this.base)},e}(Pi);function Di(n){var e=window.location.pathname,t=e.toLowerCase(),o=n.toLowerCase();return!n||t!==o&&0!==t.indexOf(Ea(o+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var zi=function(n){function e(e,t,o){n.call(this,e,t),o&&function(n){var e=Di(n);if(!/^\/#/.test(e))return window.location.replace(Ea(n+"/#"+e)),!0}(this.base)||ji()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=mi&&e;t&&this.listeners.push(oi());var o=function(){var e=n.current;ji()&&n.transitionTo(qi(),(function(o){t&&ri(n.router,o,e,!0),mi||Fi(o.fullPath)}))},r=mi?"popstate":"hashchange";window.addEventListener(r,o),this.listeners.push((function(){window.removeEventListener(r,o)}))}},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){$i(n.fullPath),ri(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){Fi(n.fullPath),ri(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;qi()!==e&&(n?$i(e):Fi(e))},e.prototype.getCurrentLocation=function(){return qi()},e}(Pi);function ji(){var n=qi();return"/"===n.charAt(0)||(Fi("/"+n),!1)}function qi(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Mi(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function $i(n){mi?fi(Mi(n)):window.location.hash=n}function Fi(n){mi?hi(Mi(n)):window.location.replace(Mi(n))}var Ri=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var o=this;this.transitionTo(n,(function(n){o.stack=o.stack.slice(0,o.index+1).concat(n),o.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this;this.transitionTo(n,(function(n){o.stack=o.stack.slice(0,o.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var n=e.current;e.index=t,e.updateRoute(o),e.router.afterHooks.forEach((function(e){e&&e(o,n)}))}),(function(n){xi(n,vi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Pi),Li=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Wa(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!mi&&!1!==n.fallback,this.fallback&&(e="hash"),Ga||(e="abstract"),this.mode=e,e){case"history":this.history=new Ii(this,n.base);break;case"hash":this.history=new zi(this,n.base,this.fallback);break;case"abstract":this.history=new Ri(this,n.base);break;default:0}},Ni={currentRoute:{configurable:!0}};function Ui(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Li.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Ni.currentRoute.get=function(){return this.history&&this.history.current},Li.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ii||t instanceof zi){var o=function(n){t.setupListeners(),function(n){var o=t.current,r=e.options.scrollBehavior;mi&&r&&"fullPath"in n&&ri(e,n,o,!1)}(n)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Li.prototype.beforeEach=function(n){return Ui(this.beforeHooks,n)},Li.prototype.beforeResolve=function(n){return Ui(this.resolveHooks,n)},Li.prototype.afterEach=function(n){return Ui(this.afterHooks,n)},Li.prototype.onReady=function(n,e){this.history.onReady(n,e)},Li.prototype.onError=function(n){this.history.onError(n)},Li.prototype.push=function(n,e,t){var o=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){o.history.push(n,e,t)}));this.history.push(n,e,t)},Li.prototype.replace=function(n,e,t){var o=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){o.history.replace(n,e,t)}));this.history.replace(n,e,t)},Li.prototype.go=function(n){this.history.go(n)},Li.prototype.back=function(){this.go(-1)},Li.prototype.forward=function(){this.go(1)},Li.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Li.prototype.resolve=function(n,e,t){var o=La(n,e=e||this.history.current,t,this),r=this.match(o,e),a=r.redirectedFrom||r.fullPath;return{location:o,route:r,href:function(n,e,t){var o="hash"===t?"#"+e:e;return n?Ea(n+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:r}},Li.prototype.getRoutes=function(){return this.matcher.getRoutes()},Li.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Li.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Li.prototype,Ni),Li.install=function n(e){if(!n.installed||Na!==e){n.installed=!0,Na=e;var t=function(n){return void 0!==n},o=function(n,e){var o=n.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ka),e.component("RouterLink",Va);var r=e.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Li.version="3.5.4",Li.isNavigationFailure=xi,Li.NavigationFailureType=vi,Li.START_LOCATION=ma,Ga&&window.Vue&&window.Vue.use(Li);var Vi=Li;t(103);t(126);var Ki={NotFound:()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,331)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,330))},Gi={"v-6ee71fe0":()=>t.e(6).then(t.bind(null,332)),"v-fc698e82":()=>t.e(7).then(t.bind(null,333)),"v-06a3e7f2":()=>t.e(8).then(t.bind(null,334)),"v-3a9d6f9d":()=>t.e(9).then(t.bind(null,335)),"v-85c7ffce":()=>t.e(10).then(t.bind(null,336)),"v-392d8aae":()=>t.e(11).then(t.bind(null,337)),"v-169b12eb":()=>t.e(12).then(t.bind(null,338)),"v-132121e4":()=>t.e(14).then(t.bind(null,339)),"v-4b9555d9":()=>t.e(13).then(t.bind(null,340)),"v-be755618":()=>t.e(15).then(t.bind(null,341)),"v-26c04c03":()=>t.e(16).then(t.bind(null,342)),"v-4d3d3bec":()=>t.e(17).then(t.bind(null,343)),"v-59c6ef63":()=>t.e(18).then(t.bind(null,344)),"v-0b248a60":()=>t.e(19).then(t.bind(null,345)),"v-2f3eb2e7":()=>t.e(20).then(t.bind(null,346)),"v-1247b65b":()=>t.e(21).then(t.bind(null,347)),"v-cbe0d60a":()=>t.e(22).then(t.bind(null,348)),"v-81d98e10":()=>t.e(23).then(t.bind(null,349)),"v-16eeeecc":()=>t.e(24).then(t.bind(null,350)),"v-c5d8330a":()=>t.e(25).then(t.bind(null,351)),"v-6da5591e":()=>t.e(26).then(t.bind(null,352)),"v-211c03e0":()=>t.e(27).then(t.bind(null,353)),"v-3a9f53ca":()=>t.e(28).then(t.bind(null,354)),"v-6e77716d":()=>t.e(29).then(t.bind(null,355)),"v-77ff5797":()=>t.e(30).then(t.bind(null,356)),"v-256d06ea":()=>t.e(31).then(t.bind(null,357)),"v-395859ae":()=>t.e(32).then(t.bind(null,358)),"v-226c4c47":()=>t.e(33).then(t.bind(null,359)),"v-2ce4f6b6":()=>t.e(34).then(t.bind(null,360)),"v-67301908":()=>t.e(35).then(t.bind(null,361)),"v-fa04c054":()=>t.e(36).then(t.bind(null,362)),"v-6c7b2800":()=>t.e(37).then(t.bind(null,363)),"v-783e73dc":()=>t.e(38).then(t.bind(null,364)),"v-51cd8504":()=>t.e(39).then(t.bind(null,365)),"v-0169ea0d":()=>t.e(40).then(t.bind(null,366)),"v-5b58f46b":()=>t.e(41).then(t.bind(null,367)),"v-92ed690a":()=>t.e(42).then(t.bind(null,368)),"v-d695f1cc":()=>t.e(43).then(t.bind(null,369)),"v-54d78b23":()=>t.e(3).then(t.bind(null,370)),"v-5167d661":()=>t.e(44).then(t.bind(null,371)),"v-240a9dec":()=>t.e(45).then(t.bind(null,372)),"v-397f9139":()=>t.e(46).then(t.bind(null,373)),"v-02ffbd9e":()=>t.e(47).then(t.bind(null,374)),"v-5ee541f8":()=>t.e(48).then(t.bind(null,375)),"v-093891d7":()=>t.e(49).then(t.bind(null,376)),"v-b4021342":()=>t.e(51).then(t.bind(null,377)),"v-1b6d1231":()=>t.e(50).then(t.bind(null,378)),"v-de20ac86":()=>t.e(52).then(t.bind(null,379)),"v-21013b52":()=>t.e(53).then(t.bind(null,380)),"v-6d806f67":()=>t.e(54).then(t.bind(null,381)),"v-d84e5c68":()=>t.e(55).then(t.bind(null,382)),"v-ea1be710":()=>t.e(56).then(t.bind(null,383)),"v-4a20ad90":()=>t.e(57).then(t.bind(null,384)),"v-2e18135a":()=>t.e(58).then(t.bind(null,385)),"v-080925d0":()=>t.e(59).then(t.bind(null,386)),"v-51e55098":()=>t.e(60).then(t.bind(null,387)),"v-4ed9e4ca":()=>t.e(61).then(t.bind(null,388)),"v-50e59150":()=>t.e(62).then(t.bind(null,389)),"v-4c375d97":()=>t.e(63).then(t.bind(null,390)),"v-994f98d2":()=>t.e(64).then(t.bind(null,391)),"v-ea545412":()=>t.e(65).then(t.bind(null,392)),"v-1d3069d2":()=>t.e(66).then(t.bind(null,393)),"v-0c8b6730":()=>t.e(67).then(t.bind(null,394))};function Zi(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Hi=/-(\w)/g,Wi=Zi(n=>n.replace(Hi,(n,e)=>e?e.toUpperCase():"")),Xi=/\B([A-Z])/g,Yi=Zi(n=>n.replace(Xi,"-$1").toLowerCase()),Qi=Zi(n=>n.charAt(0).toUpperCase()+n.slice(1));function Ji(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Qi(Wi(e))):n(Qi(e))||n(Yi(e))}const ns=Object.assign({},Ki,Gi),es=n=>ns[n],ts=n=>Gi[n],os=n=>Ki[n],rs=n=>Kt.component(n);function as(n){return Ji(ts,n)}function is(n){return Ji(os,n)}function ss(n){return Ji(es,n)}function cs(n){return Ji(rs,n)}function ls(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!cs(n)&&ss(n)){const e=await ss(n)();Kt.component(n,e.default)}}))}function ps(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ds=t(92),us=t.n(ds),ms=t(93),fs=t.n(ms),hs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${fs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=bs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return us()([{name:"description",content:this.$description}],n,this.siteMeta,ks)},updateCanonicalLink(){gs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){bs(null,this.currentMetaTags),gs()}};function gs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function vs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function bs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ks(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var ys=t(49),_s={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(ys)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],i=e[n+1],s=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),c=decodeURIComponent(this.$route.hash);if(s&&c!==decodeURIComponent(a.hash)){const t=a;if(r===o)for(let t=n+1;t<e.length;t++)if(c===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Es=t(23),xs=t.n(Es),ws={mounted(){xs.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Kt.component(n.name)||xs.a.start(),t()}),this.$router.afterEach(()=>{xs.a.done(),this.isSidebarOpen=!1})}};t(233),t(234);class Cs{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var As={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Cs).show({text:"复制成功 🎉",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===t&&o.firstChild?o.insertBefore(r,o.firstChild):o.appendChild(r),r.styleSheet?r.styleSheet.cssText=n:r.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Bs={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Ts={},Ps=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Ss=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:Bs[n]},Os=function n(e,t,o){var r=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))r[n]=t[n];else{var e=n.replace("data","");r.dataset[e]=t[n]}})),o&&o.forEach((function(e){var t=e.tag,o=e.attrs,a=e.children;r.appendChild(n(t,o,a))})),r},Is=function(n,e,t){var o,r=(o=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(o));return 1!==r.length||t?r:r[0]},Ds=function(n,e){var t,o,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<template>([\s\S]+)<\/template>/),i=n.match(/<script>([\s\S]+)<\/script>/),s={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Ps(s.html),s.jsTpl=(t=s.js,o=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(o,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),o="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),r=window.Babel?window.Babel.transform(o,{presets:["es2015"]}).code:o,a=[eval][0](r);return a.template=e,a}(s.js,s.html);var c=Ss("vue");return s.jsLib.unshift(c),s},zs=function(n,e){var t,o=n.match(/<style>([\s\S]+)<\/style>/),r=n.match(/<html>([\s\S]+)<\/html>/),a=n.match(/<script>([\s\S]+)<\/script>/),i={css:o&&o[1].replace(/^\n|\n$/g,""),html:r&&r[1].replace(/^\n|\n$/g,""),js:a&&a[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return i.htmlTpl=i.html,i.jsTpl=i.js,i.script=(t=i.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),i},js=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function qs(){var n=Is(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Is(n,"vuepress-plugin-demo-block__code"),t=Is(n,"vuepress-plugin-demo-block__display"),o=Is(n,"vuepress-plugin-demo-block__footer"),r=Is(t,"vuepress-plugin-demo-block__app"),a=decodeURIComponent(n.dataset.code),i=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);i=i?JSON.parse(i):{};var c=e.querySelector("div").clientHeight,l="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,o="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),r=new Function("return ".concat(o))(),a={js:r,css:r.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:js(n),htmlTpl:Ps("")},i=Ss("react"),s=Ss("reactDOM");return a.jsLib.unshift(i,s),a}(a,i):"vanilla"===s?zs(a,i):Ds(a,i),p=Os("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(o.appendChild(p),p.addEventListener("click",Ms.bind(null,p,c,e,o)),Ss("jsfiddle")&&o.appendChild(function(n){var e=n.css,t=n.htmlTpl,o=n.jsTpl,r=n.jsLib,a=n.cssLib,i=r.concat(a).concat(Ss("cssLib")).concat(Ss("jsLib")).join(",");return Os("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:o}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:i}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(l)),Ss("codepen")&&o.appendChild(function(n){var e=n.css,t=n.htmlTpl,o=n.jsTpl,r=n.jsLib,a=n.cssLib,i=JSON.stringify({css:e,html:t,js:o,js_external:r.concat(Ss("jsLib")).join(";"),css_external:a.concat(Ss("cssLib")).join(";"),layout:Ss("codepenLayout"),js_pre_processor:Ss("codepenJsProcessor"),editors:Ss("codepenEditors")});return Os("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:i}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(l)),void 0!==i.horizontal?i.horizontal:Ss("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var d=e.firstChild.cloneNode(!0);d.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(d)}if(l.css&&function(n){if(!Ts[n]){var e=Os("style",{innerHTML:n});document.body.appendChild(e),Ts[n]=!0}}(l.css),"react"===s)ReactDOM.render(React.createElement(l.js),r);else if("vue"===s){var u=(new(Vue.extend(l.script))).$mount();r.appendChild(u.$el)}else"vanilla"===s&&(r.innerHTML=l.html,new Function("return (function(){".concat(l.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){qs()}),300)}function Ms(n,e,t,o){var r="1"!==n.dataset.isExpand;t.style.height=r?"".concat(e,"px"):0,r?o.classList.add("vuepress-plugin-demo-block__show-link"):o.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=r?"1":"0"}var $s={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},qs()},updated:function(){qs()}},Fs="auto",Rs="zoom-in",Ls="zoom-out",Ns="grab",Us="move";function Vs(n,e,t){var o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r={passive:!1};o?n.addEventListener(e,t,r):n.removeEventListener(e,t,r)}function Ks(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Gs(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Zs(n,e,t){!function(n){var e=Hs,t=Ws;if(n.transition){var o=n.transition;delete n.transition,n[e]=o}if(n.transform){var r=n.transform;delete n.transform,n[t]=r}}(e);var o=n.style,r={};for(var a in e)t&&(r[a]=o[a]||""),o[a]=e[a];return r}var Hs="transition",Ws="transform",Xs="transform",Ys="transitionend";var Qs=function(){},Js={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Qs,onClose:Qs,onGrab:Qs,onMove:Qs,onRelease:Qs,onBeforeOpen:Qs,onBeforeClose:Qs,onBeforeGrab:Qs,onBeforeRelease:Qs,onImageLoading:Qs,onImageLoaded:Qs},nc={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),tc(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var o=this.lastScrollPosition.x-e,r=this.lastScrollPosition.y-t,a=this.options.scrollThreshold;(Math.abs(r)>=a||Math.abs(o)>=a)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(ec(n)&&!tc(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){ec(n)&&!tc(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,o=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,o)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,o=e.clientY;this.move(t,o)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function ec(n){return 0===n.button}function tc(n){return n.metaKey||n.ctrlKey}var oc={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Zs(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Vs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Zs(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},rc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},ac=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),ic=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},sc={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Gs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,o=n.transitionDuration,r=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Ns:Ls,transition:Xs+"\n        "+o+"s\n        "+r,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Zs(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Zs(this.el,{transform:"none"})},grab:function(n,e,t){var o=cc(),r=o.x-n,a=o.y-e;Zs(this.el,{cursor:Us,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var o=cc(),r=o.x-n,a=o.y-e;Zs(this.el,{transition:Xs,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Zs(this.el,this.styleClose)},restoreOpenStyle:function(){Zs(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=cc(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,o=this.instance.options,r=o.customSize,a=o.scaleBase;if(!r&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(r&&"object"===(void 0===r?"undefined":rc(r)))return{x:r.width/this.rect.width,y:r.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,c=cc(),l={x:c.x-i,y:c.y-s},p=l.x/i,d=l.y/s,u=a+Math.min(p,d);if(r&&"string"==typeof r){var m=t||this.el.naturalWidth,f=e||this.el.naturalHeight,h=parseFloat(r)*m/(100*this.rect.width),g=parseFloat(r)*f/(100*this.rect.height);if(u>h||u>g)return{x:h,y:g}}return{x:u,y:u}}};function cc(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function lc(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(o){Vs(n,o,e[o],t)}))}var pc=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(sc),this.overlay=Object.create(oc),this.handler=Object.create(nc),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ic({},Js,e),this.overlay.init(this),this.handler.init(this)}return ac(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Rs,Vs(n,"click",this.handler.click),this.options.preloadImage&&Ks(Gs(n)));return this}},{key:"config",value:function(n){return n?(ic(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var o="string"==typeof n?document.querySelector(n):n;if("IMG"===o.tagName){if(this.options.onBeforeOpen(o),this.target.init(o,this),!this.options.preloadImage){var r=this.target.srcOriginal;null!=r&&(this.options.onImageLoading(o),Ks(r,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Vs(document,"scroll",this.handler.scroll),Vs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Vs(window,"resize",this.handler.resizeWindow);var a=function n(){Vs(o,Ys,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&lc(document,e.handler,!0),t(o)};return Vs(o,Ys,a),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Fs,this.overlay.fadeOut(),this.target.zoomOut(),Vs(document,"scroll",this.handler.scroll,!1),Vs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Vs(window,"resize",this.handler.resizeWindow,!1);var o=function o(){Vs(t,Ys,o,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&lc(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Vs(t,Ys,o),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var r=this.target.el;this.options.onBeforeGrab(r),this.released=!1,this.target.grab(n,e,t);var a=function n(){Vs(r,Ys,n,!1),o(r)};return Vs(r,Ys,a),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Us,this.target.move(n,e,t);var r=this.target.el,a=function n(){Vs(r,Ys,n,!1),o(r)};return Vs(r,Ys,a),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Fs,this.target.restoreOpenStyle();var o=function o(){Vs(t,Ys,o,!1),n.lock=!1,n.released=!0,e(t)};return Vs(t,Ys,o),this}}}]),n}();const dc=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),uc=Number("500");class mc{constructor(){this.instance=new pc(dc)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=uc){setTimeout(()=>this.update(n),e)}}var fc=[hs,_s,ws,As,$s,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new mc,this.$vuepress.zooming.updateDelay()}}],hc={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ps("layout",n),Kt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},gc=t(0),vc=Object(gc.a)(hc,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(vc,"mixins",fc);const bc=[{name:"v-6ee71fe0",path:"/tech/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6ee71fe0").then(t)}},{path:"/tech/index.html",redirect:"/tech/"},{path:"/00.目录页/01.技术杂谈.html",redirect:"/tech/"},{name:"v-fc698e82",path:"/life/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-fc698e82").then(t)}},{path:"/life/index.html",redirect:"/life/"},{path:"/00.目录页/02.生活随写.html",redirect:"/life/"},{name:"v-06a3e7f2",path:"/pages/yxcypz/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-06a3e7f2").then(t)}},{path:"/pages/yxcypz/index.html",redirect:"/pages/yxcypz/"},{path:"/01.技术杂谈/01.常用总结/01.一些常用配置.html",redirect:"/pages/yxcypz/"},{name:"v-3a9d6f9d",path:"/pages/yxgjwz/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-3a9d6f9d").then(t)}},{path:"/pages/yxgjwz/index.html",redirect:"/pages/yxgjwz/"},{path:"/01.技术杂谈/01.常用总结/02.一些工具网站.html",redirect:"/pages/yxgjwz/"},{name:"v-85c7ffce",path:"/pages/yxxxwz/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-85c7ffce").then(t)}},{path:"/pages/yxxxwz/index.html",redirect:"/pages/yxxxwz/"},{path:"/01.技术杂谈/01.常用总结/03.一些学习网站.html",redirect:"/pages/yxxxwz/"},{name:"v-392d8aae",path:"/pages/yxgjaz/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-392d8aae").then(t)}},{path:"/pages/yxgjaz/index.html",redirect:"/pages/yxgjaz/"},{path:"/01.技术杂谈/01.常用总结/04.一些工具安装.html",redirect:"/pages/yxgjaz/"},{name:"v-169b12eb",path:"/pages/2022ckjl/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-169b12eb").then(t)}},{path:"/pages/2022ckjl/index.html",redirect:"/pages/2022ckjl/"},{path:"/01.技术杂谈/02.踩坑记录/01.2022踩坑记录.html",redirect:"/pages/2022ckjl/"},{name:"v-132121e4",path:"/pages/92d322/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-132121e4").then(t)}},{path:"/pages/92d322/index.html",redirect:"/pages/92d322/"},{path:"/01.技术杂谈/03.kubernetes/02.k8s存储.html",redirect:"/pages/92d322/"},{name:"v-4b9555d9",path:"/pages/k8sjichu/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-4b9555d9").then(t)}},{path:"/pages/k8sjichu/index.html",redirect:"/pages/k8sjichu/"},{path:"/01.技术杂谈/03.kubernetes/01.k8s基础.html",redirect:"/pages/k8sjichu/"},{name:"v-be755618",path:"/pages/9e8904/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-be755618").then(t)}},{path:"/pages/9e8904/index.html",redirect:"/pages/9e8904/"},{path:"/01.技术杂谈/03.kubernetes/03.k8s网络.html",redirect:"/pages/9e8904/"},{name:"v-26c04c03",path:"/pages/1408c2/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-26c04c03").then(t)}},{path:"/pages/1408c2/index.html",redirect:"/pages/1408c2/"},{path:"/01.技术杂谈/03.kubernetes/04.pod cgroup和资源限制.html",redirect:"/pages/1408c2/"},{name:"v-4d3d3bec",path:"/pages/d395da/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-4d3d3bec").then(t)}},{path:"/pages/d395da/index.html",redirect:"/pages/d395da/"},{path:"/01.技术杂谈/03.kubernetes/05.流量限制.html",redirect:"/pages/d395da/"},{name:"v-59c6ef63",path:"/pages/9594e3/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-59c6ef63").then(t)}},{path:"/pages/9594e3/index.html",redirect:"/pages/9594e3/"},{path:"/01.技术杂谈/03.kubernetes/06.网络策略calico.html",redirect:"/pages/9594e3/"},{name:"v-0b248a60",path:"/pages/f1f52d/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-0b248a60").then(t)}},{path:"/pages/f1f52d/index.html",redirect:"/pages/f1f52d/"},{path:"/01.技术杂谈/03.kubernetes/07.grafana和promuthues.html",redirect:"/pages/f1f52d/"},{name:"v-2f3eb2e7",path:"/pages/43f072/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-2f3eb2e7").then(t)}},{path:"/pages/43f072/index.html",redirect:"/pages/43f072/"},{path:"/01.技术杂谈/03.kubernetes/08.etcd节点down机数据恢复.html",redirect:"/pages/43f072/"},{name:"v-1247b65b",path:"/pages/070d33/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-1247b65b").then(t)}},{path:"/pages/070d33/index.html",redirect:"/pages/070d33/"},{path:"/01.技术杂谈/03.kubernetes/09.ceph.html",redirect:"/pages/070d33/"},{name:"v-cbe0d60a",path:"/pages/bfddf3/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-cbe0d60a").then(t)}},{path:"/pages/bfddf3/index.html",redirect:"/pages/bfddf3/"},{path:"/01.技术杂谈/03.kubernetes/10.chrony.html",redirect:"/pages/bfddf3/"},{name:"v-81d98e10",path:"/pages/5d5fcc/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-81d98e10").then(t)}},{path:"/pages/5d5fcc/index.html",redirect:"/pages/5d5fcc/"},{path:"/01.技术杂谈/03.kubernetes/11.crd operator.html",redirect:"/pages/5d5fcc/"},{name:"v-16eeeecc",path:"/pages/fe3b2b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-16eeeecc").then(t)}},{path:"/pages/fe3b2b/index.html",redirect:"/pages/fe3b2b/"},{path:"/01.技术杂谈/03.kubernetes/12.cri之containerd shimv2.html",redirect:"/pages/fe3b2b/"},{name:"v-c5d8330a",path:"/pages/c3cbc2/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-c5d8330a").then(t)}},{path:"/pages/c3cbc2/index.html",redirect:"/pages/c3cbc2/"},{path:"/01.技术杂谈/03.kubernetes/13.harbor.html",redirect:"/pages/c3cbc2/"},{name:"v-6da5591e",path:"/pages/b685a0/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6da5591e").then(t)}},{path:"/pages/b685a0/index.html",redirect:"/pages/b685a0/"},{path:"/01.技术杂谈/03.kubernetes/14.helm chart.html",redirect:"/pages/b685a0/"},{name:"v-211c03e0",path:"/pages/1bc186/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-211c03e0").then(t)}},{path:"/pages/1bc186/index.html",redirect:"/pages/1bc186/"},{path:"/01.技术杂谈/03.kubernetes/15.Loongnix mips64.html",redirect:"/pages/1bc186/"},{name:"v-3a9f53ca",path:"/pages/717c4b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-3a9f53ca").then(t)}},{path:"/pages/717c4b/index.html",redirect:"/pages/717c4b/"},{path:"/01.技术杂谈/03.kubernetes/16.nvidia-device-plugin.html",redirect:"/pages/717c4b/"},{name:"v-6e77716d",path:"/pages/4be786/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6e77716d").then(t)}},{path:"/pages/4be786/index.html",redirect:"/pages/4be786/"},{path:"/01.技术杂谈/03.kubernetes/17.openebs-lvm-localpv.html",redirect:"/pages/4be786/"},{name:"v-77ff5797",path:"/pages/f23c30/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-77ff5797").then(t)}},{path:"/pages/f23c30/index.html",redirect:"/pages/f23c30/"},{path:"/01.技术杂谈/03.kubernetes/300.docker/00.docker基础.html",redirect:"/pages/f23c30/"},{name:"v-256d06ea",path:"/pages/f7bcff/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-256d06ea").then(t)}},{path:"/pages/f7bcff/index.html",redirect:"/pages/f7bcff/"},{path:"/01.技术杂谈/03.kubernetes/300.docker/01.buildx多平台构建.html",redirect:"/pages/f7bcff/"},{name:"v-395859ae",path:"/pages/4b6bd5/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-395859ae").then(t)}},{path:"/pages/4b6bd5/index.html",redirect:"/pages/4b6bd5/"},{path:"/01.技术杂谈/03.kubernetes/300.docker/02.dockerfile改源.html",redirect:"/pages/4b6bd5/"},{name:"v-226c4c47",path:"/pages/74eaf6/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-226c4c47").then(t)}},{path:"/pages/74eaf6/index.html",redirect:"/pages/74eaf6/"},{path:"/01.技术杂谈/03.kubernetes/300.docker/03.docker镜像.html",redirect:"/pages/74eaf6/"},{name:"v-2ce4f6b6",path:"/pages/be8ffb/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-2ce4f6b6").then(t)}},{path:"/pages/be8ffb/index.html",redirect:"/pages/be8ffb/"},{path:"/01.技术杂谈/03.kubernetes/300.docker/04.docker镜像优化.html",redirect:"/pages/be8ffb/"},{name:"v-67301908",path:"/pages/e29999/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-67301908").then(t)}},{path:"/pages/e29999/index.html",redirect:"/pages/e29999/"},{path:"/01.技术杂谈/03.kubernetes/300.docker/05.在Docker中设置时区.html",redirect:"/pages/e29999/"},{name:"v-fa04c054",path:"/pages/7a288b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-fa04c054").then(t)}},{path:"/pages/7a288b/index.html",redirect:"/pages/7a288b/"},{path:"/01.技术杂谈/04.golang/01.常用计算.html",redirect:"/pages/7a288b/"},{name:"v-6c7b2800",path:"/pages/b587ce/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6c7b2800").then(t)}},{path:"/pages/b587ce/index.html",redirect:"/pages/b587ce/"},{path:"/01.技术杂谈/04.golang/02.golang面试问题.html",redirect:"/pages/b587ce/"},{name:"v-783e73dc",path:"/pages/88c22b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-783e73dc").then(t)}},{path:"/pages/88c22b/index.html",redirect:"/pages/88c22b/"},{path:"/01.技术杂谈/04.golang/03.go-指针.html",redirect:"/pages/88c22b/"},{name:"v-51cd8504",path:"/pages/ebb478/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-51cd8504").then(t)}},{path:"/pages/ebb478/index.html",redirect:"/pages/ebb478/"},{path:"/01.技术杂谈/04.golang/04.go embed.html",redirect:"/pages/ebb478/"},{name:"v-0169ea0d",path:"/pages/5848e9/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-0169ea0d").then(t)}},{path:"/pages/5848e9/index.html",redirect:"/pages/5848e9/"},{path:"/01.技术杂谈/04.golang/05.go-封装继承和多态.html",redirect:"/pages/5848e9/"},{name:"v-5b58f46b",path:"/pages/b270a4/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-5b58f46b").then(t)}},{path:"/pages/b270a4/index.html",redirect:"/pages/b270a4/"},{path:"/01.技术杂谈/04.golang/06.go-文件操作.html",redirect:"/pages/b270a4/"},{name:"v-92ed690a",path:"/pages/417389/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-92ed690a").then(t)}},{path:"/pages/417389/index.html",redirect:"/pages/417389/"},{path:"/01.技术杂谈/04.golang/07.go-json.html",redirect:"/pages/417389/"},{name:"v-d695f1cc",path:"/pages/1d629a/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-d695f1cc").then(t)}},{path:"/pages/1d629a/index.html",redirect:"/pages/1d629a/"},{path:"/01.技术杂谈/04.golang/08.go-slice切片.html",redirect:"/pages/1d629a/"},{name:"v-54d78b23",path:"/pages/276ee1/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-54d78b23").then(t)}},{path:"/pages/276ee1/index.html",redirect:"/pages/276ee1/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/01.kata基本原理与架构.html",redirect:"/pages/276ee1/"},{name:"v-5167d661",path:"/pages/25c61d/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-5167d661").then(t)}},{path:"/pages/25c61d/index.html",redirect:"/pages/25c61d/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/02.kata网络和存储文件系统分析.html",redirect:"/pages/25c61d/"},{name:"v-240a9dec",path:"/pages/d4921b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-240a9dec").then(t)}},{path:"/pages/d4921b/index.html",redirect:"/pages/d4921b/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/03.kata cgroup及资源限制.html",redirect:"/pages/d4921b/"},{name:"v-397f9139",path:"/pages/e5081b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-397f9139").then(t)}},{path:"/pages/e5081b/index.html",redirect:"/pages/e5081b/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/04.guest kernel和guestos.html",redirect:"/pages/e5081b/"},{name:"v-02ffbd9e",path:"/pages/4df25b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-02ffbd9e").then(t)}},{path:"/pages/4df25b/index.html",redirect:"/pages/4df25b/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/05.kata-monitor监控.html",redirect:"/pages/4df25b/"},{name:"v-5ee541f8",path:"/pages/f1a570/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-5ee541f8").then(t)}},{path:"/pages/f1a570/index.html",redirect:"/pages/f1a570/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/06.kata使用限制.html",redirect:"/pages/f1a570/"},{name:"v-093891d7",path:"/pages/2dc340/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-093891d7").then(t)}},{path:"/pages/2dc340/index.html",redirect:"/pages/2dc340/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/07.其他特性.html",redirect:"/pages/2dc340/"},{name:"v-b4021342",path:"/pages/84f980/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-b4021342").then(t)}},{path:"/pages/84f980/index.html",redirect:"/pages/84f980/"},{path:"/01.技术杂谈/06.kata-containers/02.kata部署/01.kata-deploy部署、卸载与升级.html",redirect:"/pages/84f980/"},{name:"v-1b6d1231",path:"/pages/cda215/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-1b6d1231").then(t)}},{path:"/pages/cda215/index.html",redirect:"/pages/cda215/"},{path:"/01.技术杂谈/06.kata-containers/01.kata初识/08.一个kata容器的创建示例.html",redirect:"/pages/cda215/"},{name:"v-de20ac86",path:"/pages/69d5c3/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-de20ac86").then(t)}},{path:"/pages/69d5c3/index.html",redirect:"/pages/69d5c3/"},{path:"/01.技术杂谈/06.kata-containers/02.kata部署/02.kata-deploy分析.html",redirect:"/pages/69d5c3/"},{name:"v-21013b52",path:"/pages/3cb03e/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-21013b52").then(t)}},{path:"/pages/3cb03e/index.html",redirect:"/pages/3cb03e/"},{path:"/01.技术杂谈/06.kata-containers/04.kata应用/01.常用命令.html",redirect:"/pages/3cb03e/"},{name:"v-6d806f67",path:"/pages/37753f/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6d806f67").then(t)}},{path:"/pages/37753f/index.html",redirect:"/pages/37753f/"},{path:"/01.技术杂谈/06.kata-containers/04.kata应用/02.kata使用问题汇总.html",redirect:"/pages/37753f/"},{name:"v-d84e5c68",path:"/pages/821097/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-d84e5c68").then(t)}},{path:"/pages/821097/index.html",redirect:"/pages/821097/"},{path:"/01.技术杂谈/06.kata-containers/04.kata应用/03.kata相关配置及路径.html",redirect:"/pages/821097/"},{name:"v-ea1be710",path:"/pages/7393ee/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-ea1be710").then(t)}},{path:"/pages/7393ee/index.html",redirect:"/pages/7393ee/"},{path:"/01.技术杂谈/06.kata-containers/04.kata应用/04.kata debug与日志.html",redirect:"/pages/7393ee/"},{name:"v-4a20ad90",path:"/pages/6f3d25/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-4a20ad90").then(t)}},{path:"/pages/6f3d25/index.html",redirect:"/pages/6f3d25/"},{path:"/01.技术杂谈/07.虚拟化/01.开启硬件虚拟化.html",redirect:"/pages/6f3d25/"},{name:"v-2e18135a",path:"/pages/697e48/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-2e18135a").then(t)}},{path:"/pages/697e48/index.html",redirect:"/pages/697e48/"},{path:"/01.技术杂谈/07.虚拟化/02.虚拟化基础概念.html",redirect:"/pages/697e48/"},{name:"v-080925d0",path:"/pages/33705b/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-080925d0").then(t)}},{path:"/pages/33705b/index.html",redirect:"/pages/33705b/"},{path:"/01.技术杂谈/07.虚拟化/03.centos使用kvm创建虚拟机.html",redirect:"/pages/33705b/"},{name:"v-51e55098",path:"/pages/ythx/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-51e55098").then(t)}},{path:"/pages/ythx/index.html",redirect:"/pages/ythx/"},{path:"/02.生活随写/01.养桃日记/01.养桃花销.html",redirect:"/pages/ythx/"},{name:"v-4ed9e4ca",path:"/about/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-4ed9e4ca").then(t)}},{path:"/about/index.html",redirect:"/about/"},{path:"/03.关于/01.关于.html",redirect:"/about/"},{name:"v-50e59150",path:"/books/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-50e59150").then(t)}},{path:"/books/index.html",redirect:"/books/"},{path:"/04.书籍/01.书单.html",redirect:"/books/"},{name:"v-4c375d97",path:"/pages/dianzishu/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-4c375d97").then(t)}},{path:"/pages/dianzishu/index.html",redirect:"/pages/dianzishu/"},{path:"/04.书籍/02.电子书.html",redirect:"/pages/dianzishu/"},{name:"v-994f98d2",path:"/archives/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-994f98d2").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-ea545412",path:"/categories/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-ea545412").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-1d3069d2",path:"/tags/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-1d3069d2").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-0c8b6730",path:"/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-0c8b6730").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:vc}],kc={title:"hff",description:"https://fangfenghuang.github.io/",base:"/",headTags:[["link",{rel:"icon",href:"/img/logo.ico"}],["meta",{name:"keywords",content:"golang,python,c,c++,vue,shell,php"}],["meta",{name:"baidu-site-verification",content:"code-LTKHwOecxI"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"referrer",content:"no-referrer-when-downgrade"}],["link",{rel:"stylesheet",href:"https://at.alicdn.com/t/font_3114978_qe0b39no76.css"}],["script",{language:"javascript",type:"text/javascript",src:"/js/pgmanor-self.js"}]],pages:[{title:"技术杂谈",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"01.技术杂谈",imgUrl:"/img/tech.png",description:"学习、工作"}},title:"技术杂谈",date:"2020-03-11T21:50:53.000Z",permalink:"/tech/",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"fangfenghuang",link:"https://github.com/fangfenghuang"},titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"技术杂谈"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88.html"},{property:"og:type",content:"article"},{property:"og:title",content:"技术杂谈"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2020-03-11T21:50:53.000Z"},{itemprop:"name",content:"技术杂谈"},{itemprop:"description",content:""}]},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88.html",relativePath:"00.目录页/01.技术杂谈.md",key:"v-6ee71fe0",path:"/tech/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/26, 10:59:19",lastUpdatedTimestamp:1658804359e3},{title:"生活随写",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"02.生活随写",imgUrl:"/img/life.png",description:"个人、随笔"}},title:"生活随写",date:"2020-03-11T21:50:54.000Z",permalink:"/life/",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"fangfenghuang",link:"https://github.com/fangfenghuang"},titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"生活随写"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%86%99.html"},{property:"og:type",content:"article"},{property:"og:title",content:"生活随写"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%86%99.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2020-03-11T21:50:54.000Z"},{itemprop:"name",content:"生活随写"},{itemprop:"description",content:""}]},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%86%99.html",relativePath:"00.目录页/02.生活随写.md",key:"v-fc698e82",path:"/life/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/26, 10:59:19",lastUpdatedTimestamp:1658804359e3},{title:"一些常用配置",frontmatter:{title:"一些常用配置",date:"2021-11-02T09:51:37.000Z",permalink:"/pages/yxcypz/",categories:["配置"],tags:["常用"],author:"fangfenghuang",titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"一些常用配置"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/01.%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.html"},{property:"og:type",content:"article"},{property:"og:title",content:"一些常用配置"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/01.%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2021-11-02T09:51:37.000Z"},{property:"article:tag",content:"常用"},{itemprop:"name",content:"一些常用配置"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/01.%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.html",relativePath:"01.技术杂谈/01.常用总结/01.一些常用配置.md",key:"v-06a3e7f2",path:"/pages/yxcypz/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/26, 11:45:15",lastUpdatedTimestamp:1658807115e3},{title:"一些工具网站",frontmatter:{title:"一些工具网站",date:"2021-11-02T09:51:37.000Z",permalink:"/pages/yxgjwz/",categories:["工具"],tags:["常用"],author:"fangfenghuang",titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"一些工具网站"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/02.%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99.html"},{property:"og:type",content:"article"},{property:"og:title",content:"一些工具网站"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/02.%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2021-11-02T09:51:37.000Z"},{property:"article:tag",content:"常用"},{itemprop:"name",content:"一些工具网站"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/02.%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99.html",relativePath:"01.技术杂谈/01.常用总结/02.一些工具网站.md",key:"v-3a9d6f9d",path:"/pages/yxgjwz/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"一些工具网站",frontmatter:{title:"一些工具网站",date:"2021-11-02T09:51:37.000Z",permalink:"/pages/yxxxwz/",categories:["学习网站"],tags:["常用"],author:"fangfenghuang",titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"一些工具网站"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/03.%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99.html"},{property:"og:type",content:"article"},{property:"og:title",content:"一些工具网站"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/03.%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2021-11-02T09:51:37.000Z"},{property:"article:tag",content:"常用"},{itemprop:"name",content:"一些工具网站"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/03.%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99.html",relativePath:"01.技术杂谈/01.常用总结/03.一些学习网站.md",key:"v-85c7ffce",path:"/pages/yxxxwz/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"一些工具安装",frontmatter:{title:"一些工具安装",date:"2021-11-02T09:51:37.000Z",permalink:"/pages/yxgjaz/",categories:["工具"],tags:["常用"],author:"fangfenghuang",titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"一些工具安装"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/04.%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.html"},{property:"og:type",content:"article"},{property:"og:title",content:"一些工具安装"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/04.%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2021-11-02T09:51:37.000Z"},{property:"article:tag",content:"常用"},{itemprop:"name",content:"一些工具安装"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/01.%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/04.%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.html",relativePath:"01.技术杂谈/01.常用总结/04.一些工具安装.md",key:"v-392d8aae",path:"/pages/yxgjaz/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"2022踩坑记录",frontmatter:{title:"2022踩坑记录",date:"2021-11-02T09:51:37.000Z",permalink:"/pages/2022ckjl/",categories:["踩坑记录"],tags:["常用"],author:"fangfenghuang",titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"2022踩坑记录"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/02.%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/01.2022%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html"},{property:"og:type",content:"article"},{property:"og:title",content:"2022踩坑记录"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/02.%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/01.2022%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2021-11-02T09:51:37.000Z"},{property:"article:tag",content:"常用"},{itemprop:"name",content:"2022踩坑记录"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/02.%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/01.2022%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html",relativePath:"01.技术杂谈/02.踩坑记录/01.2022踩坑记录.md",key:"v-169b12eb",path:"/pages/2022ckjl/",headersStr:null,content:"# cordns域名解析alpine镜像不兼容问题\n\n> 20220622\n\nalpine版本兼容性问题会导致backend pod里cordns解析失败 docker镜像是使用alpine作为底包，如果版本不匹配会导致域名解析问题 https://stackoverflow.com/questions/65181012/does-alpine-have-known-dns-issue-within-kubernetes https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/dns-debugging-resolution/ https://github.com/kubernetes-sigs/kind/issues/2418\n\n\n# kata-monitor宿主机服务对kata-deploy的影响\n\n重启服务器会导致kata-deploy起不来\n\n\n# containerd重启不影响容器进程；docker也可以\n\n\n# 重启服务器containerd启动超时问题\n\nhttps://github.com/containerd/containerd/issues/5597\n\n\n# golang mkdir 777 权限问题\n\nhttps://github.com/golang/go/issues/15210 https://zhuanlan.zhihu.com/p/33692995",normalizedContent:"# cordns域名解析alpine镜像不兼容问题\n\n> 20220622\n\nalpine版本兼容性问题会导致backend pod里cordns解析失败 docker镜像是使用alpine作为底包，如果版本不匹配会导致域名解析问题 https://stackoverflow.com/questions/65181012/does-alpine-have-known-dns-issue-within-kubernetes https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/dns-debugging-resolution/ https://github.com/kubernetes-sigs/kind/issues/2418\n\n\n# kata-monitor宿主机服务对kata-deploy的影响\n\n重启服务器会导致kata-deploy起不来\n\n\n# containerd重启不影响容器进程；docker也可以\n\n\n# 重启服务器containerd启动超时问题\n\nhttps://github.com/containerd/containerd/issues/5597\n\n\n# golang mkdir 777 权限问题\n\nhttps://github.com/golang/go/issues/15210 https://zhuanlan.zhihu.com/p/33692995",charsets:{cjk:!0}},{title:"k8s存储",frontmatter:{title:"k8s存储",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/92d322/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"[TOC]",meta:[{name:"twitter:title",content:"k8s存储"},{name:"twitter:description",content:"[TOC]"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/02.k8s%E5%AD%98%E5%82%A8.html"},{property:"og:type",content:"article"},{property:"og:title",content:"k8s存储"},{property:"og:description",content:"[TOC]"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/02.k8s%E5%AD%98%E5%82%A8.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"k8s存储"},{itemprop:"description",content:"[TOC]"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/02.k8s%E5%AD%98%E5%82%A8.html",relativePath:"01.技术杂谈/03.kubernetes/02.k8s存储.md",key:"v-132121e4",path:"/pages/92d322/",headers:[{level:2,title:"overlay2",slug:"overlay2",normalizedTitle:"overlay2",charIndex:74},{level:3,title:"新增一个镜像",slug:"新增一个镜像",normalizedTitle:"新增一个镜像",charIndex:1485},{level:3,title:"写时复制",slug:"写时复制",normalizedTitle:"写时复制",charIndex:4167},{level:2,title:"查看docker镜像、容器、数据卷所占用的空间",slug:"查看docker镜像、容器、数据卷所占用的空间",normalizedTitle:"查看docker镜像、容器、数据卷所占用的空间",charIndex:4396}],headersStr:"overlay2 新增一个镜像 写时复制 查看docker镜像、容器、数据卷所占用的空间",content:'[TOC]\n\n\n# Docker 镜像存储原理\n\ndocker支持多种graphDriver，包括vfs、devicemapper、overlay、overlay2、aufs等等\n\n\n# overlay2\n\nLinux 内核在 4.0 版本对overlay做了很多必要的改进，此时的 OverlayFS 被称之为overlay2\n\n * 要想使用overlay2，Docker 版本必须高于 17.06.02。\n * 如果你的操作系统是 RHEL 或 CentOS，Linux 内核版本必须使用 3.10.0-514 或者更高版本，其他 Linux 发行版的内核版本必须高于 4.0（例如 Ubuntu 或 Debian）\n * overlay2最好搭配 xfs 文件系统使用，并且使用 xfs 作为底层文件系统时，d_type必须开启，可以使用以下命令验证 d_type 是否开启：\n\n$ xfs_info /var/lib/docker | grep ftype\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n\n\n1\n2\n\n\nverlay2 是这样储存文件的： overlay2将镜像层和容器层都放在单独的目录，并且有唯一 ID，每一层仅存储发生变化的文件，最终使用联合挂载技术将容器层和镜像层的所有文件统一挂载到容器中，使得容器中看到完整的系统文件。\n\n[root@localhost ~]# docker info | grep Storage\n Storage Driver: overlay2\n\n\n1\n2\n\n\nOverlay驱动的镜像只有两层：一个upper文件系统和一个lower文件系统，分别代表Docker的镜像层和容器层\n\nmerged层是lower层和upper层的统一视图\n\n当需要修改一个文件时，使用CoW将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。\n\n在Docker中，底下的只读层就是image，可写层就是Container。voerlay2驱动存储位置为/var/lib/docker/（/app/docker）\n\n[root@tztest kbuser]# ls /app/docker/\nbuilder  buildkit  containerd  containers  image  kubelet  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes\n[root@tztest kbuser]# ls /app/docker/overlay2/7e32a486c4dc7a52d0685b7fb3e4f6fb4eb7b9ae963f0820285c3659e3f361ca\ncommitted  diff  link  lower  work\n[root@tztest kbuser]# ls /app/docker/image/overlay2\ndistribution  imagedb  layerdb  repositories.json\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n * overlay2目录，存储镜像和容器的层信息\n\n * image目录，存储镜像元相关信息\n\n * repositories.json就是存储镜像信息，主要是name和image id的对应，digest和image id的对应\n\n\n# 新增一个镜像\n\n[root@tztest kbuser]# docker images | grep web-demo\nweb-demo_c7cac94                    dev-1648826415118                          df2b573855e0        12 days ago         17.7MB\n[root@tztest kbuser]# ls /app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0\ncommitted  diff  link  lower  work\n\n（可能新增多个镜像层目录文件）\n\n\n//允许一个容器\n[root@tztest kbuser]# docker run --name hfftest -it  df2b573855e0 sh\n[root@tztest kbuser]#  docker ps | grep hfftest\n1e73601f56d9        df2b573855e0                                          "sh"                     34 seconds ago      Up 32 seconds       80/tcp, 8080/tcp         hfftest\n\n\n[root@tztest kbuser]# ls /app/docker/overlay2/ -tl\n总用量 3900\ndrwx------ 5 root root  4096 4月  14 16:42 4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0\ndrwx------ 4 root root  4096 4月  14 16:42 4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0-init\ndrwx------ 2 root root 69632 4月  14 16:42 l\ndrwx------ 4 root root  4096 4月   1 23:22 d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0\n//多了两个目录（4695d98...108d41eb0）和一个l目录\n\nl目录是一堆软连接，把一些较短的随机串软连到镜像层的 diff 文件夹下，这样做是为了避免达到mount命令参数的长度限制。\n\n\n[root@tztest kbuser]# docker inspect df2b573855e0 | grep Dir\n\n"LowerDir": "/app/docker/overlay2/d90eefdee868034a568195793cd1c269664a8e459f773cef20cefe5fc81f9e1b/diff:/app/docker/overlay2/b1789038611adaa88789bc8600ff21ebf28d0f4437ae720bfea03b34d50cc689/diff:/app/docker/overlay2/9c3ce321c132b4e638a2187c58d6af6dff58f74c3f49780df8ee4eb80b0dc5f2/diff:/app/docker/overlay2/198313ba0d321e9efa1205820408780b4edb07027456cfcd89cc660bbfa92953/diff",\n"MergedDir": "/app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0/merged",\n"UpperDir": "/app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0/diff",\n"WorkDir": "/app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0/work"\n\nLowerDir：对应的是容器的只读镜像层，在新生成目录2c...74-init下；\nUpperDir：为容器的可读写层，在新生成目录2c...74下；\nMergedDir：为底层只读镜像层和上层可读写容器层的统一视图\n\n//写入一个文件：\n[root@tztest kbuser]# docker run --name hfftest -it  df2b573855e0 sh\n/app # touch hfftest0414\n/app # echo 111 > hfftest0414\n\n[root@tztest kbuser]# find / -name  hfftest0414\n/app/docker/overlay2/4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0/diff/app/hfftest0414\n/app/docker/overlay2/4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0/merged/app/hfftest0414\n//写入文件在UpperDir和MergedDir中\n\n//停止容器后，创建的文件仍然存在（diff,merge不在了）。当容器被删除后，两个新增目录及其相关文件被删除\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# 写时复制\n\noverlay2 对文件的修改采用的是写时复制的工作机制：\n\n * 第一次修改文件：当我们第一次在容器中修改某个文件时，overlay2 会触发写时复制操作，overlay2 首先从镜像层复制文件到容器层，然后在容器层执行对应的文件修改操作。\n * 删除文件或目录：当文件或目录被删除时，overlay2 并不会真正从镜像中删除它，因为镜像层是只读的，overlay2 会创建一个特殊的文件或目录，这种特殊的文件或目录会阻止容器的访问。\n\n\n# 查看docker镜像、容器、数据卷所占用的空间\n\n[root@tztest kbuser]# docker system df\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              117                 51                  18.52GB             11.19GB (60%)\nContainers          203                 100                 2.842GB             1.446GB (50%)\nLocal Volumes       13                  12                  30.42MB             0B (0%)\nBuild Cache         0                   0                   0B                  0B\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 参考资料\n\nhttps://www.modb.pro/db/127388',normalizedContent:'[toc]\n\n\n# docker 镜像存储原理\n\ndocker支持多种graphdriver，包括vfs、devicemapper、overlay、overlay2、aufs等等\n\n\n# overlay2\n\nlinux 内核在 4.0 版本对overlay做了很多必要的改进，此时的 overlayfs 被称之为overlay2\n\n * 要想使用overlay2，docker 版本必须高于 17.06.02。\n * 如果你的操作系统是 rhel 或 centos，linux 内核版本必须使用 3.10.0-514 或者更高版本，其他 linux 发行版的内核版本必须高于 4.0（例如 ubuntu 或 debian）\n * overlay2最好搭配 xfs 文件系统使用，并且使用 xfs 作为底层文件系统时，d_type必须开启，可以使用以下命令验证 d_type 是否开启：\n\n$ xfs_info /var/lib/docker | grep ftype\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1\n\n\n1\n2\n\n\nverlay2 是这样储存文件的： overlay2将镜像层和容器层都放在单独的目录，并且有唯一 id，每一层仅存储发生变化的文件，最终使用联合挂载技术将容器层和镜像层的所有文件统一挂载到容器中，使得容器中看到完整的系统文件。\n\n[root@localhost ~]# docker info | grep storage\n storage driver: overlay2\n\n\n1\n2\n\n\noverlay驱动的镜像只有两层：一个upper文件系统和一个lower文件系统，分别代表docker的镜像层和容器层\n\nmerged层是lower层和upper层的统一视图\n\n当需要修改一个文件时，使用cow将文件从只读的lower复制到可写的upper进行修改，结果也保存在upper层。\n\n在docker中，底下的只读层就是image，可写层就是container。voerlay2驱动存储位置为/var/lib/docker/（/app/docker）\n\n[root@tztest kbuser]# ls /app/docker/\nbuilder  buildkit  containerd  containers  image  kubelet  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes\n[root@tztest kbuser]# ls /app/docker/overlay2/7e32a486c4dc7a52d0685b7fb3e4f6fb4eb7b9ae963f0820285c3659e3f361ca\ncommitted  diff  link  lower  work\n[root@tztest kbuser]# ls /app/docker/image/overlay2\ndistribution  imagedb  layerdb  repositories.json\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n * overlay2目录，存储镜像和容器的层信息\n\n * image目录，存储镜像元相关信息\n\n * repositories.json就是存储镜像信息，主要是name和image id的对应，digest和image id的对应\n\n\n# 新增一个镜像\n\n[root@tztest kbuser]# docker images | grep web-demo\nweb-demo_c7cac94                    dev-1648826415118                          df2b573855e0        12 days ago         17.7mb\n[root@tztest kbuser]# ls /app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0\ncommitted  diff  link  lower  work\n\n（可能新增多个镜像层目录文件）\n\n\n//允许一个容器\n[root@tztest kbuser]# docker run --name hfftest -it  df2b573855e0 sh\n[root@tztest kbuser]#  docker ps | grep hfftest\n1e73601f56d9        df2b573855e0                                          "sh"                     34 seconds ago      up 32 seconds       80/tcp, 8080/tcp         hfftest\n\n\n[root@tztest kbuser]# ls /app/docker/overlay2/ -tl\n总用量 3900\ndrwx------ 5 root root  4096 4月  14 16:42 4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0\ndrwx------ 4 root root  4096 4月  14 16:42 4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0-init\ndrwx------ 2 root root 69632 4月  14 16:42 l\ndrwx------ 4 root root  4096 4月   1 23:22 d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0\n//多了两个目录（4695d98...108d41eb0）和一个l目录\n\nl目录是一堆软连接，把一些较短的随机串软连到镜像层的 diff 文件夹下，这样做是为了避免达到mount命令参数的长度限制。\n\n\n[root@tztest kbuser]# docker inspect df2b573855e0 | grep dir\n\n"lowerdir": "/app/docker/overlay2/d90eefdee868034a568195793cd1c269664a8e459f773cef20cefe5fc81f9e1b/diff:/app/docker/overlay2/b1789038611adaa88789bc8600ff21ebf28d0f4437ae720bfea03b34d50cc689/diff:/app/docker/overlay2/9c3ce321c132b4e638a2187c58d6af6dff58f74c3f49780df8ee4eb80b0dc5f2/diff:/app/docker/overlay2/198313ba0d321e9efa1205820408780b4edb07027456cfcd89cc660bbfa92953/diff",\n"mergeddir": "/app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0/merged",\n"upperdir": "/app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0/diff",\n"workdir": "/app/docker/overlay2/d1142002c8d33580ab1213fff5746027a174d763e37885039df98b7108d41eb0/work"\n\nlowerdir：对应的是容器的只读镜像层，在新生成目录2c...74-init下；\nupperdir：为容器的可读写层，在新生成目录2c...74下；\nmergeddir：为底层只读镜像层和上层可读写容器层的统一视图\n\n//写入一个文件：\n[root@tztest kbuser]# docker run --name hfftest -it  df2b573855e0 sh\n/app # touch hfftest0414\n/app # echo 111 > hfftest0414\n\n[root@tztest kbuser]# find / -name  hfftest0414\n/app/docker/overlay2/4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0/diff/app/hfftest0414\n/app/docker/overlay2/4695d98d682387009f6ab5c84d86599fe35460dae36aea7d00e1561042d630e0/merged/app/hfftest0414\n//写入文件在upperdir和mergeddir中\n\n//停止容器后，创建的文件仍然存在（diff,merge不在了）。当容器被删除后，两个新增目录及其相关文件被删除\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# 写时复制\n\noverlay2 对文件的修改采用的是写时复制的工作机制：\n\n * 第一次修改文件：当我们第一次在容器中修改某个文件时，overlay2 会触发写时复制操作，overlay2 首先从镜像层复制文件到容器层，然后在容器层执行对应的文件修改操作。\n * 删除文件或目录：当文件或目录被删除时，overlay2 并不会真正从镜像中删除它，因为镜像层是只读的，overlay2 会创建一个特殊的文件或目录，这种特殊的文件或目录会阻止容器的访问。\n\n\n# 查看docker镜像、容器、数据卷所占用的空间\n\n[root@tztest kbuser]# docker system df\ntype                total               active              size                reclaimable\nimages              117                 51                  18.52gb             11.19gb (60%)\ncontainers          203                 100                 2.842gb             1.446gb (50%)\nlocal volumes       13                  12                  30.42mb             0b (0%)\nbuild cache         0                   0                   0b                  0b\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 参考资料\n\nhttps://www.modb.pro/db/127388',charsets:{cjk:!0}},{title:"k8s基础",frontmatter:{title:"k8s基础",date:"2021-11-02T09:51:37.000Z",permalink:"/pages/k8sjichu/",categories:["k8s"],tags:["k8s"],author:"fangfenghuang",titleTag:"原创",readingShow:"top",description:"kubectl api-versions\n`",meta:[{name:"twitter:title",content:"k8s基础"},{name:"twitter:description",content:"kubectl api-versions\n`"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/01.k8s%E5%9F%BA%E7%A1%80.html"},{property:"og:type",content:"article"},{property:"og:title",content:"k8s基础"},{property:"og:description",content:"kubectl api-versions\n`"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/01.k8s%E5%9F%BA%E7%A1%80.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2021-11-02T09:51:37.000Z"},{property:"article:tag",content:"k8s"},{itemprop:"name",content:"k8s基础"},{itemprop:"description",content:"kubectl api-versions\n`"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/01.k8s%E5%9F%BA%E7%A1%80.html",relativePath:"01.技术杂谈/03.kubernetes/01.k8s基础.md",key:"v-4b9555d9",path:"/pages/k8sjichu/",headers:[{level:2,title:"使用限制：",slug:"使用限制",normalizedTitle:"使用限制：",charIndex:2394},{level:2,title:"效果",slug:"效果",normalizedTitle:"效果",charIndex:2549}],headersStr:"使用限制： 效果",content:"# apiVersion\n\nkubectl api-versions\n\n\n1\n\n\n * alpha 名称中带有alpha的API版本是进入Kubernetes的新功能的早期候选版本。这些可能包含错误，并且不保证将来可以使用。\n\n * beta API版本名称中的beta表示测试已经超过了alpha级别，并且该功能最终将包含在Kubernetes中。 虽然它的工作方式可能会改变，并且对象的定义方式可能会完全改变，但该特征本身很可能以某种形式将其变为Kubernetes。\n\n * stable 稳定的apiVersion这些名称中不包含alpha或beta。 它们可以安全使用。\n\n * v1 这是Kubernetes API的第一个稳定版本。 它包含许多核心对象。\n\n * apps/v1 apps是Kubernetes中最常见的API组，其中包含许多核心对象和v1。 它包括与在Kubernetes上运行应用程序相关的功能，如Deployments，RollingUpdates和ReplicaSets。\n\n * autoscaling/v1 此API版本允许根据不同的资源使用指标自动调整容器。此稳定版本仅支持CPU扩展，但未来的alpha和beta版本将允许您根据内存使用情况和自定义指标进行扩展。\n\n * batch/v1 batchAPI组包含与批处理和类似作业的任务相关的对象（而不是像应用程序一样的任务，如无限期地运行Web服务器）。 这个apiVersion是这些API对象的第一个稳定版本。\n\n * batch/v1beta1 Kubernetes中批处理对象的新功能测试版，特别是包括允许您在特定时间或周期运行作业的CronJobs。\n\n * certificates.k8s.io/v1beta1 此API版本添加了验证网络证书的功能，以便在群集中进行安全通信。 您可以在官方文档上阅读更多内容。\n\n * extensions/v1beta1 此版本的API包含许多新的常用Kubernetes功能。 部署，DaemonSets，ReplicaSet和Ingresses都在此版本中收到了重大更改。\n\n * policy/v1beta1 此apiVersion增加了设置pod中断预算和pod安全性新规则的功能\n\n * rbac.authorization.k8s.io/v1 此apiVersion包含Kubernetes基于角色的访问控制的额外功能。这有助于您保护群集\n\n\n# resourceVersion\n\n这个版本号是一个 K8s 的内部机制，用户不应该假设它是一个数字或者通过比较两个版本号大小来确定资源对象的新旧，唯一能做的就是通过比较版本号相等来确定对象是否是同一个版本（即是否发生了变化）。而 resourceVersion 一个重要的用处，就是来做 update 请求的版本控制。 kube-apiserver 会校验用户 update 请求提交对象中的 resourceVersion 一定要和当前 K8s 中这个对象最新的 resourceVersion 一致，才能接受本次 update。否则，K8s 会拒绝请求，并告诉用户发生了版本冲突（Conflict）。\n\n\n# Patch 机制\n\n * json patch 在 json patch 中我们要指定操作类型，比如 add 新增还是 replace 替换，另外在修改 containers 列表时要通过元素序号来指定容器。\n\n * merge patch（默认） merge patch 无法单独更新一个列表中的某个元素，因此不管我们是要在 containers 里新增容器、还是修改已有容器的 image、env 等字段，都要用整个 containers 列表来提交 patch：\n\n * strategic merge patch 在我们 patch 更新 containers 不再需要指定下标序号了，而是指定 name 来修改，K8s 会把 name 作为 key 来计算 merge。 目前 strategic 策略只能用于原生 K8s 资源以及 Aggregated API 方式的自定义资源，对于 CRD 定义的资源对象，是无法使用的。\n\n\n# externalTrafficPolicy，跳过SNAT\n\n对于Service, 如果指定类型为 NodePort, 那么这个端口会在集群的所有 Node 上打开，即使这个Node 上面没有这个pod\n\nKube-proxy转发时会保留源IP。即：容器收到的报文，看到源IP地址还是用户的。\n\n缺点是负载均衡可能不是很好，因为一旦容器实例分布在多个节点上，它只转发给本机，不跨节点转发流量。当然，少了一次转发，性能会相对好一丢丢。\n\n注：这种模式下的Service类型只能为外部流量，即：LoadBalancer 或者 NodePort 两种，否则会报错\n\n\n# 存储空间资源限制ephemeral-storage\n\n在每个Kubernetes的节点上，kubelet的根目录(默认是/var/lib/kubelet)和日志目录(/var/log)保存在节点的主分区上，这个分区同时也会被Pod的EmptyDir类型的volume、容器日志、镜像的层、容器的可写层所占用。\n\nresources:\n  requests:\n    cpu: 1\n    memory: 2048Mi\n    ephemeral-storage: 2Gi\n  limits:\n    cpu: 2\n    memory: 2048Mi\n    ephemeral-storage: 5Gi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 使用限制：\n\n * 只要Root Dir和kubelet --root-dir在一个分区，就能起作用\n * 如果运行时指定了别的独立的分区，比如修改了docker的镜像层和容器可写层的存储位置(默认是/var/lib/docker)所在的分区，将不再将其计入ephemeral-storage的消耗。\n\n\n# 效果\n\n在容器写入超过存储限制时就会被驱逐掉 teststorage 0/1 Evicted 0 1m",normalizedContent:"# apiversion\n\nkubectl api-versions\n\n\n1\n\n\n * alpha 名称中带有alpha的api版本是进入kubernetes的新功能的早期候选版本。这些可能包含错误，并且不保证将来可以使用。\n\n * beta api版本名称中的beta表示测试已经超过了alpha级别，并且该功能最终将包含在kubernetes中。 虽然它的工作方式可能会改变，并且对象的定义方式可能会完全改变，但该特征本身很可能以某种形式将其变为kubernetes。\n\n * stable 稳定的apiversion这些名称中不包含alpha或beta。 它们可以安全使用。\n\n * v1 这是kubernetes api的第一个稳定版本。 它包含许多核心对象。\n\n * apps/v1 apps是kubernetes中最常见的api组，其中包含许多核心对象和v1。 它包括与在kubernetes上运行应用程序相关的功能，如deployments，rollingupdates和replicasets。\n\n * autoscaling/v1 此api版本允许根据不同的资源使用指标自动调整容器。此稳定版本仅支持cpu扩展，但未来的alpha和beta版本将允许您根据内存使用情况和自定义指标进行扩展。\n\n * batch/v1 batchapi组包含与批处理和类似作业的任务相关的对象（而不是像应用程序一样的任务，如无限期地运行web服务器）。 这个apiversion是这些api对象的第一个稳定版本。\n\n * batch/v1beta1 kubernetes中批处理对象的新功能测试版，特别是包括允许您在特定时间或周期运行作业的cronjobs。\n\n * certificates.k8s.io/v1beta1 此api版本添加了验证网络证书的功能，以便在群集中进行安全通信。 您可以在官方文档上阅读更多内容。\n\n * extensions/v1beta1 此版本的api包含许多新的常用kubernetes功能。 部署，daemonsets，replicaset和ingresses都在此版本中收到了重大更改。\n\n * policy/v1beta1 此apiversion增加了设置pod中断预算和pod安全性新规则的功能\n\n * rbac.authorization.k8s.io/v1 此apiversion包含kubernetes基于角色的访问控制的额外功能。这有助于您保护群集\n\n\n# resourceversion\n\n这个版本号是一个 k8s 的内部机制，用户不应该假设它是一个数字或者通过比较两个版本号大小来确定资源对象的新旧，唯一能做的就是通过比较版本号相等来确定对象是否是同一个版本（即是否发生了变化）。而 resourceversion 一个重要的用处，就是来做 update 请求的版本控制。 kube-apiserver 会校验用户 update 请求提交对象中的 resourceversion 一定要和当前 k8s 中这个对象最新的 resourceversion 一致，才能接受本次 update。否则，k8s 会拒绝请求，并告诉用户发生了版本冲突（conflict）。\n\n\n# patch 机制\n\n * json patch 在 json patch 中我们要指定操作类型，比如 add 新增还是 replace 替换，另外在修改 containers 列表时要通过元素序号来指定容器。\n\n * merge patch（默认） merge patch 无法单独更新一个列表中的某个元素，因此不管我们是要在 containers 里新增容器、还是修改已有容器的 image、env 等字段，都要用整个 containers 列表来提交 patch：\n\n * strategic merge patch 在我们 patch 更新 containers 不再需要指定下标序号了，而是指定 name 来修改，k8s 会把 name 作为 key 来计算 merge。 目前 strategic 策略只能用于原生 k8s 资源以及 aggregated api 方式的自定义资源，对于 crd 定义的资源对象，是无法使用的。\n\n\n# externaltrafficpolicy，跳过snat\n\n对于service, 如果指定类型为 nodeport, 那么这个端口会在集群的所有 node 上打开，即使这个node 上面没有这个pod\n\nkube-proxy转发时会保留源ip。即：容器收到的报文，看到源ip地址还是用户的。\n\n缺点是负载均衡可能不是很好，因为一旦容器实例分布在多个节点上，它只转发给本机，不跨节点转发流量。当然，少了一次转发，性能会相对好一丢丢。\n\n注：这种模式下的service类型只能为外部流量，即：loadbalancer 或者 nodeport 两种，否则会报错\n\n\n# 存储空间资源限制ephemeral-storage\n\n在每个kubernetes的节点上，kubelet的根目录(默认是/var/lib/kubelet)和日志目录(/var/log)保存在节点的主分区上，这个分区同时也会被pod的emptydir类型的volume、容器日志、镜像的层、容器的可写层所占用。\n\nresources:\n  requests:\n    cpu: 1\n    memory: 2048mi\n    ephemeral-storage: 2gi\n  limits:\n    cpu: 2\n    memory: 2048mi\n    ephemeral-storage: 5gi\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 使用限制：\n\n * 只要root dir和kubelet --root-dir在一个分区，就能起作用\n * 如果运行时指定了别的独立的分区，比如修改了docker的镜像层和容器可写层的存储位置(默认是/var/lib/docker)所在的分区，将不再将其计入ephemeral-storage的消耗。\n\n\n# 效果\n\n在容器写入超过存储限制时就会被驱逐掉 teststorage 0/1 evicted 0 1m",charsets:{cjk:!0}},{title:"k8s网络",frontmatter:{title:"k8s网络",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/9e8904/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"容器网络发端于 Docker 的网络。Docker 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。",meta:[{name:"twitter:title",content:"k8s网络"},{name:"twitter:description",content:"容器网络发端于 Docker 的网络。Docker 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/03.k8s%E7%BD%91%E7%BB%9C.html"},{property:"og:type",content:"article"},{property:"og:title",content:"k8s网络"},{property:"og:description",content:"容器网络发端于 Docker 的网络。Docker 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/03.k8s%E7%BD%91%E7%BB%9C.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"k8s网络"},{itemprop:"description",content:"容器网络发端于 Docker 的网络。Docker 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/03.k8s%E7%BD%91%E7%BB%9C.html",relativePath:"01.技术杂谈/03.kubernetes/03.k8s网络.md",key:"v-be755618",path:"/pages/9e8904/",headers:[{level:2,title:"docker0:",slug:"docker0",normalizedTitle:"docker0:",charIndex:499},{level:2,title:"calico网络",slug:"calico网络",normalizedTitle:"calico网络",charIndex:1130},{level:3,title:"Calico主要由Felix、Orchestrator Plugin、etcd、BIRD和BGP Router Reflector等组件组成。",slug:"calico主要由felix、orchestrator-plugin、etcd、bird和bgp-router-reflector等组件组成。",normalizedTitle:"calico主要由felix、orchestrator plugin、etcd、bird和bgp router reflector等组件组成。",charIndex:1143},{level:3,title:"BGP: Pod 1跨节点访问Pod 2大致流程如下：",slug:"bgp-pod-1跨节点访问pod-2大致流程如下",normalizedTitle:"bgp: pod 1跨节点访问pod 2大致流程如下：",charIndex:1446},{level:3,title:"Calico Route Reflector模式（RR）（路由器反射）",slug:"calico-route-reflector模式-rr-路由器反射",normalizedTitle:"calico route reflector模式（rr）（路由器反射）",charIndex:1680},{level:3,title:"IPIP: Pod 1访问Pod 2大致流程如下：",slug:"ipip-pod-1访问pod-2大致流程如下",normalizedTitle:"ipip: pod 1访问pod 2大致流程如下：",charIndex:1767}],headersStr:"docker0: calico网络 Calico主要由Felix、Orchestrator Plugin、etcd、BIRD和BGP Router Reflector等组件组成。 BGP: Pod 1跨节点访问Pod 2大致流程如下： Calico Route Reflector模式（RR）（路由器反射） IPIP: Pod 1访问Pod 2大致流程如下：",content:"# docker网络\n\n容器网络发端于 Docker 的网络。Docker 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。\n\ndocker0：Docker服务会在它所在的机器上创建一个名为docker0的网桥。 docker0的IP地址为172.17.0.1，子网掩码为255.255.0.0。\n\n[root@rqy-k8s-2 kbuser]# docker network ls NETWORK ID NAME DRIVER SCOPE e29e51f3f12a bridge bridge local b70c41f7568e host host local 3a890954cce6 none null local\n\nDocker容器在启动时，如果没有显式指定加入任何网络，就会默认加入到名为bridge的网络。而这个bridge网络就是基于docker0实现的。 加入host网络的容器，可以实现和Docker daemon守护进程（也就是Docker服务）所在的宿主机网络环境进行直接通信 none网络，则表示容器在启动时不带任何网络设备。\n\n\n# k8s网络\n\n\n# docker0:\n\n 1. 同一Pod内的容器间通信: 因为pause容器提供pod内网络共享，所以容器直接可以使用localhost(lo)访问其他容器\n\n 2. 各Pod彼此之间的通信(两个pod在一台主机上面, 两个pod分布在不同主机之上) 1)两个pod在一台主机上面: 通过docker默认的docker网桥互连容器(docker0), ifconfig 查了docker0 2)两个pod分布在不同主机之上: 通过CNI插件实现，eg: flannel,calico\n\n 3. Pod与Service间的通信 Service分配的ip叫cluster ip是一个虚拟ip（相对固定，除非删除service），这个ip只能在k8s集群内部使用， 如果service需要对外提供，只能使用Nodeport方式映射到主机上，使用主机的ip和端口对外提供服务。 节点上面有个kube-proxy进程，这个进程从master apiserver获取信息，感知service和endpoint的创建，然后做两个事： 1.为每个service 在集群中每个节点上面创建一个随机端口，任何该端口上面的连接会代理到相应的pod 2.集群中每个节点安装iptables/ipvs规则，用于clusterip + port路由到上一步定义的随机端口上面， 所以集群中每个node上面都有service的转发规则:iptables -L -n -t filter\n\n\n# calico网络\n\n\n# Calico主要由Felix、Orchestrator Plugin、etcd、BIRD和BGP Router Reflector等组件组成。\n\n * Felix：Calico Agent，运行于每个节点。\n * Orchestrator Plugi：编排系统（如 Kubernetes 、 OpenStack 等）以将 Calico整合进系统中的插件，例如Kubernetes的CNI。\n * etcd：持久存储Calico数据的存储管理系统。\n * BIRD：用于分发路由信息的BGP客户端。\n * BGP Route Reflector：BGP路由反射器，可选组件，用于较大规模的网络场景。\n\n\n# BGP: Pod 1跨节点访问Pod 2大致流程如下：\n\n 1. 数据包从容器1出到达Veth Pair另一端（宿主机上，以cali前缀开头）；\n 2. 宿主机根据路由规则，将数据包转发给下一跳（网关）；\n 3. 到达Node2，根据路由规则将数据包转发给cali设备，从而到达容器2。 这里最核心的“下一跳”路由规则，就是由Calico的Felix进程负责维护的。这些路由规则信息，则是通过BGP Client也就是BIRD组件，使用BGP协议传输而来的。\n\n\n# Calico Route Reflector模式（RR）（路由器反射）\n\nCalico维护的网络在默认是（Node-to-Node Mesh）全互联模式（mesh）\n\n\n# IPIP: Pod 1访问Pod 2大致流程如下：\n\n 1. 数据包从容器1出到达Veth Pair另一端（宿主机上，以cali前缀开头）；\n 2. 进入IP隧道设备（tunl0），由Linux内核IPIP驱动封装在宿主机网络的IP包中（新的IP包目的地之是原IP包的下一跳地址，即192.168.31.63），这样，就成了Node1到Node2的数据包；\n 3. 数据包经过路由器三层转发到Node2；\n 4. Node2收到数据包后，网络协议栈会使用IPIP驱动进行解包，从中拿到原始IP包；\n 5. 然后根据路由规则，根据路由规则将数据包转发给cali设备，从而到达容器2。",normalizedContent:"# docker网络\n\n容器网络发端于 docker 的网络。docker 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 ip。\n\ndocker0：docker服务会在它所在的机器上创建一个名为docker0的网桥。 docker0的ip地址为172.17.0.1，子网掩码为255.255.0.0。\n\n[root@rqy-k8s-2 kbuser]# docker network ls network id name driver scope e29e51f3f12a bridge bridge local b70c41f7568e host host local 3a890954cce6 none null local\n\ndocker容器在启动时，如果没有显式指定加入任何网络，就会默认加入到名为bridge的网络。而这个bridge网络就是基于docker0实现的。 加入host网络的容器，可以实现和docker daemon守护进程（也就是docker服务）所在的宿主机网络环境进行直接通信 none网络，则表示容器在启动时不带任何网络设备。\n\n\n# k8s网络\n\n\n# docker0:\n\n 1. 同一pod内的容器间通信: 因为pause容器提供pod内网络共享，所以容器直接可以使用localhost(lo)访问其他容器\n\n 2. 各pod彼此之间的通信(两个pod在一台主机上面, 两个pod分布在不同主机之上) 1)两个pod在一台主机上面: 通过docker默认的docker网桥互连容器(docker0), ifconfig 查了docker0 2)两个pod分布在不同主机之上: 通过cni插件实现，eg: flannel,calico\n\n 3. pod与service间的通信 service分配的ip叫cluster ip是一个虚拟ip（相对固定，除非删除service），这个ip只能在k8s集群内部使用， 如果service需要对外提供，只能使用nodeport方式映射到主机上，使用主机的ip和端口对外提供服务。 节点上面有个kube-proxy进程，这个进程从master apiserver获取信息，感知service和endpoint的创建，然后做两个事： 1.为每个service 在集群中每个节点上面创建一个随机端口，任何该端口上面的连接会代理到相应的pod 2.集群中每个节点安装iptables/ipvs规则，用于clusterip + port路由到上一步定义的随机端口上面， 所以集群中每个node上面都有service的转发规则:iptables -l -n -t filter\n\n\n# calico网络\n\n\n# calico主要由felix、orchestrator plugin、etcd、bird和bgp router reflector等组件组成。\n\n * felix：calico agent，运行于每个节点。\n * orchestrator plugi：编排系统（如 kubernetes 、 openstack 等）以将 calico整合进系统中的插件，例如kubernetes的cni。\n * etcd：持久存储calico数据的存储管理系统。\n * bird：用于分发路由信息的bgp客户端。\n * bgp route reflector：bgp路由反射器，可选组件，用于较大规模的网络场景。\n\n\n# bgp: pod 1跨节点访问pod 2大致流程如下：\n\n 1. 数据包从容器1出到达veth pair另一端（宿主机上，以cali前缀开头）；\n 2. 宿主机根据路由规则，将数据包转发给下一跳（网关）；\n 3. 到达node2，根据路由规则将数据包转发给cali设备，从而到达容器2。 这里最核心的“下一跳”路由规则，就是由calico的felix进程负责维护的。这些路由规则信息，则是通过bgp client也就是bird组件，使用bgp协议传输而来的。\n\n\n# calico route reflector模式（rr）（路由器反射）\n\ncalico维护的网络在默认是（node-to-node mesh）全互联模式（mesh）\n\n\n# ipip: pod 1访问pod 2大致流程如下：\n\n 1. 数据包从容器1出到达veth pair另一端（宿主机上，以cali前缀开头）；\n 2. 进入ip隧道设备（tunl0），由linux内核ipip驱动封装在宿主机网络的ip包中（新的ip包目的地之是原ip包的下一跳地址，即192.168.31.63），这样，就成了node1到node2的数据包；\n 3. 数据包经过路由器三层转发到node2；\n 4. node2收到数据包后，网络协议栈会使用ipip驱动进行解包，从中拿到原始ip包；\n 5. 然后根据路由规则，根据路由规则将数据包转发给cali设备，从而到达容器2。",charsets:{cjk:!0}},{title:"pod cgroup和资源限制",frontmatter:{title:"pod cgroup和资源限制",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/1408c2/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"Cgroups 是 Control Groups 的缩写，由 Linux内核提供。用于限制、记录和隔离进程组使用的物理资源（CPU、内存、i/o）。",meta:[{name:"twitter:title",content:"pod cgroup和资源限制"},{name:"twitter:description",content:"Cgroups 是 Control Groups 的缩写，由 Linux内核提供。用于限制、记录和隔离进程组使用的物理资源（CPU、内存、i/o）。"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/04.pod%20cgroup%E5%92%8C%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6.html"},{property:"og:type",content:"article"},{property:"og:title",content:"pod cgroup和资源限制"},{property:"og:description",content:"Cgroups 是 Control Groups 的缩写，由 Linux内核提供。用于限制、记录和隔离进程组使用的物理资源（CPU、内存、i/o）。"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/04.pod%20cgroup%E5%92%8C%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"pod cgroup和资源限制"},{itemprop:"description",content:"Cgroups 是 Control Groups 的缩写，由 Linux内核提供。用于限制、记录和隔离进程组使用的物理资源（CPU、内存、i/o）。"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/04.pod%20cgroup%E5%92%8C%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6.html",relativePath:"01.技术杂谈/03.kubernetes/04.pod cgroup和资源限制.md",key:"v-26c04c03",path:"/pages/1408c2/",headers:[{level:2,title:"容器级别的Cgroup",slug:"容器级别的cgroup",normalizedTitle:"容器级别的cgroup",charIndex:1936},{level:2,title:"Pod级别的Cgroup",slug:"pod级别的cgroup",normalizedTitle:"pod级别的cgroup",charIndex:2119},{level:2,title:"QoS级别的Cgroup",slug:"qos级别的cgroup",normalizedTitle:"qos级别的cgroup",charIndex:2635},{level:2,title:"节点Node级别的Cgroup",slug:"节点node级别的cgroup",normalizedTitle:"节点node级别的cgroup",charIndex:3026},{level:2,title:"Eviction",slug:"eviction",normalizedTitle:"eviction",charIndex:3723}],headersStr:"容器级别的Cgroup Pod级别的Cgroup QoS级别的Cgroup 节点Node级别的Cgroup Eviction",content:"Cgroups 是 Control Groups 的缩写，由 Linux内核提供。用于限制、记录和隔离进程组使用的物理资源（CPU、内存、i/o）。\n\n[root@localhost ~]# mount -t cgroup\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)\ncgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio,net_cls)\ncgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct,cpu)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)\ncgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)\ncgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ncpuset、cpu、 memory子系统\n\ncfs_period和cfs_quota:限制进程在长度为cfs_period的一段时间内，只能被分配到总量为cfs_quota的CPU时间,CPU quota默认没有任何限制（即：-1）,CPU period默认100 ms（100000 us）\n\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/docker/cpu.cfs_period_us\n100000\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/docker/cpu.cfs_quota_us\n-1\n\n\n1\n2\n3\n4\n\n\n注： 可压缩资源：cpu等(当可压缩资源不足时，Pod只会“饥饿”，但不会退出) 非可压缩资源： mem(当不可压缩资源不足时，Pod就会因为OOM（Out-Of-Memory）被内核杀掉。)\n\n\n# K8s中的Cgroups\n\nkubelet启动时，它会根据需要创建一个4层的cgroup树。\n\n * Node(root) cgroup\n * QoS cgroup\n * Pod cgroup\n * Container cgroup\n\nKubelet运行在Kubernetes集群的工作节点上，管理pod的生命周期，连接到CRI、CNI、CSI等运行时接口，通过cgroup按照配置向pod提供资源，并在使用超过时删除或OOMKilled pod。\n\nkubelet中的所有cgroup操作都是由其内部的containerManager模块实现的，该模块通过cgroup(从下到上)对资源使用进行逐层限制\n\n> container-> pod-> qos -> node(root)。\n\n\n# 容器级别的Cgroup\n\n * 如果容器超出其内存限制，则可能终止该容器。如果它是可重新启动的，kubelet将重新启动它，就像处理任何其他类型的运行时故障一样。\n * 如果容器超出了它的内存请求，那么每当节点耗尽内存时，它的Pod很可能会被逐出。\n * 容器可能被允许，也可能不被允许在较长时间内超过其CPU限制。但是，它不会因为CPU占用过多而被杀死。\n\n\n# Pod级别的Cgroup\n\n每个pod都有一定的开销资源，比如由sandbox容器或docker containerd-shim(在1.22中删除)使用的资源。另外，pod在指定内存类型的卷时也会占用内存资源。\n\n * 计算所有pod容器的CPU请求/限制和内存限制，并将CPU请求/限制转换为cpuhares和cpuQuota。\n\n> pod/cpu.shares = sum(pod.spec.containers.resources.requests[cpu]) pod/cpu.cfs_quota_us = sum(pod.spec.containers.resources.limits[cpu]) pod/memory.limit_in_bytes = sum(pod.spec.containers.resources.limits[memory])\n\n * 只有pod cgroup的cpu。如果其中一个容器只指定请求而不指定限制，则将设置共享值，而不设置其限制值。\n\n * 只设置cpu。当无容器指定请求值或限制值时共享，即pod在资源空闲时使用所有节点资源，在资源受限时不获取任何资源，符合低优先级原则\n\n\n# QoS级别的Cgroup\n\n * Guaranteed(保证型)::由请求设置的值等于由限制设置的值。 当Pod里的每一个Container都同时设置了requests和limits，并且requests和limits值相等的时候，这个Pod就属于Guaranteed类别\n * Burstable(突增型):请求设置的值小于限制设置的值，但是!= 0。 而当Pod不满足Guaranteed的条件，但至少有一个Container设置了requests。那么这个Pod就会被划分到Burstable类别\n * BestEffort(尽力而为型):请求和限制设置的值都是0。 优先级是 而如果一个Pod既没有设置requests，也没有设置limits，那么它的QoS类别就是BestEffort\n\n> Guaranteed > Burstable > BestEffort\n\n\n# 节点Node级别的Cgroup\n\n * 业务流程使用的资源，即pod使用的资源。\n * Kubernetes组件使用的资源，如kubelet和docker。\n * 系统组件使用的资源，如logind、journald和其他进程。\n\n\n# 资源限制\n\n在调度的时候，kube-scheduler只会按照requests的值进行计算。而在真正设置Cgroups限制的时候，kubelet则会按照limits的值来进行设置。\n\n * 当你指定了requests.cpu=250m之后，相当于将Cgroups的cpu.shares的值设置为(250/1000)*1024。而当你没有设置requests.cpu的时候，cpu.shares默认则是1024\n\n * 如果你指定了limits.cpu=500m之后，则相当于将Cgroups的cpu.cfs_quota_us的值设置为(500/1000)*100ms，而cpu.cfs_period_us的值始终是100ms。这样，Kubernetes就为你设置了这个容器只能用到CPU的50%。\n\n * 对于内存来说，当你指定了limits.memory=128Mi之后，相当于将Cgroups的memory.limit_in_bytes设置为128 * 1024 * 1024。\n\n> Kubernetes这种对CPU和内存资源限额的设计，实际上参考了Borg论文中对“动态资源边界”的定义，既：容器化作业在提交时所设置的资源边界，并不一定是调度系统所必须严格遵守的，这是因为在实际场景中，大多数作业使用到的资源其实远小于它所请求的资源限额。\n\n\n# Eviction\n\n目前，Kubernetes为你设置的Eviction的默认阈值如下所示：\n\nmemory.available<100Mi nodefs.available<10% nodefs.inodesFree<5% imagefs.available<15% 当然，上述各个触发条件在kubelet里都是可配置的。比如下面这个例子：\n\nkubelet --eviction-hard=imagefs.available<10%,memory.available<500Mi,nodefs.available<5%,nodefs.inodesFree<5% --eviction-soft=imagefs.available<30%,nodefs.available<10% --eviction-soft-grace-period=imagefs.available=2m,nodefs.available=2m --eviction-max-pod-grace-period=600 在这个配置中，你可以看到Eviction在Kubernetes里其实分为Soft和Hard两种模式。\n\n\n# 容器是一个“单进程”模型",normalizedContent:"cgroups 是 control groups 的缩写，由 linux内核提供。用于限制、记录和隔离进程组使用的物理资源（cpu、内存、i/o）。\n\n[root@localhost ~]# mount -t cgroup\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)\ncgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio,net_cls)\ncgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct,cpu)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)\ncgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)\ncgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\ncpuset、cpu、 memory子系统\n\ncfs_period和cfs_quota:限制进程在长度为cfs_period的一段时间内，只能被分配到总量为cfs_quota的cpu时间,cpu quota默认没有任何限制（即：-1）,cpu period默认100 ms（100000 us）\n\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/docker/cpu.cfs_period_us\n100000\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/docker/cpu.cfs_quota_us\n-1\n\n\n1\n2\n3\n4\n\n\n注： 可压缩资源：cpu等(当可压缩资源不足时，pod只会“饥饿”，但不会退出) 非可压缩资源： mem(当不可压缩资源不足时，pod就会因为oom（out-of-memory）被内核杀掉。)\n\n\n# k8s中的cgroups\n\nkubelet启动时，它会根据需要创建一个4层的cgroup树。\n\n * node(root) cgroup\n * qos cgroup\n * pod cgroup\n * container cgroup\n\nkubelet运行在kubernetes集群的工作节点上，管理pod的生命周期，连接到cri、cni、csi等运行时接口，通过cgroup按照配置向pod提供资源，并在使用超过时删除或oomkilled pod。\n\nkubelet中的所有cgroup操作都是由其内部的containermanager模块实现的，该模块通过cgroup(从下到上)对资源使用进行逐层限制\n\n> container-> pod-> qos -> node(root)。\n\n\n# 容器级别的cgroup\n\n * 如果容器超出其内存限制，则可能终止该容器。如果它是可重新启动的，kubelet将重新启动它，就像处理任何其他类型的运行时故障一样。\n * 如果容器超出了它的内存请求，那么每当节点耗尽内存时，它的pod很可能会被逐出。\n * 容器可能被允许，也可能不被允许在较长时间内超过其cpu限制。但是，它不会因为cpu占用过多而被杀死。\n\n\n# pod级别的cgroup\n\n每个pod都有一定的开销资源，比如由sandbox容器或docker containerd-shim(在1.22中删除)使用的资源。另外，pod在指定内存类型的卷时也会占用内存资源。\n\n * 计算所有pod容器的cpu请求/限制和内存限制，并将cpu请求/限制转换为cpuhares和cpuquota。\n\n> pod/cpu.shares = sum(pod.spec.containers.resources.requests[cpu]) pod/cpu.cfs_quota_us = sum(pod.spec.containers.resources.limits[cpu]) pod/memory.limit_in_bytes = sum(pod.spec.containers.resources.limits[memory])\n\n * 只有pod cgroup的cpu。如果其中一个容器只指定请求而不指定限制，则将设置共享值，而不设置其限制值。\n\n * 只设置cpu。当无容器指定请求值或限制值时共享，即pod在资源空闲时使用所有节点资源，在资源受限时不获取任何资源，符合低优先级原则\n\n\n# qos级别的cgroup\n\n * guaranteed(保证型)::由请求设置的值等于由限制设置的值。 当pod里的每一个container都同时设置了requests和limits，并且requests和limits值相等的时候，这个pod就属于guaranteed类别\n * burstable(突增型):请求设置的值小于限制设置的值，但是!= 0。 而当pod不满足guaranteed的条件，但至少有一个container设置了requests。那么这个pod就会被划分到burstable类别\n * besteffort(尽力而为型):请求和限制设置的值都是0。 优先级是 而如果一个pod既没有设置requests，也没有设置limits，那么它的qos类别就是besteffort\n\n> guaranteed > burstable > besteffort\n\n\n# 节点node级别的cgroup\n\n * 业务流程使用的资源，即pod使用的资源。\n * kubernetes组件使用的资源，如kubelet和docker。\n * 系统组件使用的资源，如logind、journald和其他进程。\n\n\n# 资源限制\n\n在调度的时候，kube-scheduler只会按照requests的值进行计算。而在真正设置cgroups限制的时候，kubelet则会按照limits的值来进行设置。\n\n * 当你指定了requests.cpu=250m之后，相当于将cgroups的cpu.shares的值设置为(250/1000)*1024。而当你没有设置requests.cpu的时候，cpu.shares默认则是1024\n\n * 如果你指定了limits.cpu=500m之后，则相当于将cgroups的cpu.cfs_quota_us的值设置为(500/1000)*100ms，而cpu.cfs_period_us的值始终是100ms。这样，kubernetes就为你设置了这个容器只能用到cpu的50%。\n\n * 对于内存来说，当你指定了limits.memory=128mi之后，相当于将cgroups的memory.limit_in_bytes设置为128 * 1024 * 1024。\n\n> kubernetes这种对cpu和内存资源限额的设计，实际上参考了borg论文中对“动态资源边界”的定义，既：容器化作业在提交时所设置的资源边界，并不一定是调度系统所必须严格遵守的，这是因为在实际场景中，大多数作业使用到的资源其实远小于它所请求的资源限额。\n\n\n# eviction\n\n目前，kubernetes为你设置的eviction的默认阈值如下所示：\n\nmemory.available<100mi nodefs.available<10% nodefs.inodesfree<5% imagefs.available<15% 当然，上述各个触发条件在kubelet里都是可配置的。比如下面这个例子：\n\nkubelet --eviction-hard=imagefs.available<10%,memory.available<500mi,nodefs.available<5%,nodefs.inodesfree<5% --eviction-soft=imagefs.available<30%,nodefs.available<10% --eviction-soft-grace-period=imagefs.available=2m,nodefs.available=2m --eviction-max-pod-grace-period=600 在这个配置中，你可以看到eviction在kubernetes里其实分为soft和hard两种模式。\n\n\n# 容器是一个“单进程”模型",charsets:{cjk:!0}},{title:"流量限制",frontmatter:{title:"流量限制",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/d395da/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:'[root@localhost ~]# cat /etc/cni/net.d/10-calico.conflist | grep bandwidth\n    { "type": "bandwidth", "capabilities": { "bandwidth": true } }\n`',meta:[{name:"twitter:title",content:"流量限制"},{name:"twitter:description",content:'[root@localhost ~]# cat /etc/cni/net.d/10-calico.conflist | grep bandwidth\n    { "type": "bandwidth", "capabilities": { "bandwidth": true } }\n`'},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/05.%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6.html"},{property:"og:type",content:"article"},{property:"og:title",content:"流量限制"},{property:"og:description",content:'[root@localhost ~]# cat /etc/cni/net.d/10-calico.conflist | grep bandwidth\n    { "type": "bandwidth", "capabilities": { "bandwidth": true } }\n`'},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/05.%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"流量限制"},{itemprop:"description",content:'[root@localhost ~]# cat /etc/cni/net.d/10-calico.conflist | grep bandwidth\n    { "type": "bandwidth", "capabilities": { "bandwidth": true } }\n`'}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/05.%E6%B5%81%E9%87%8F%E9%99%90%E5%88%B6.html",relativePath:"01.技术杂谈/03.kubernetes/05.流量限制.md",key:"v-4d3d3bec",path:"/pages/d395da/",headersStr:null,content:'# kubelet启动参数：\n\n> --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --network-plugin=cni\n\nsystemctl cat kubelet | grep network-plugin\n\n\n1\n\n\n\n# calico配置\n\n[root@localhost ~]# cat /etc/cni/net.d/10-calico.conflist | grep bandwidth\n    { "type": "bandwidth", "capabilities": { "bandwidth": true } }\n\n\n1\n2\n\n\n\n# 流量限制验证\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: netperf-server\n  annotations:\n    kubernetes.io/egress-bandwidth: 1M\n    kubernetes.io/ingress-bandwidth: 1M\nspec:\n  containers:\n  - image: sirot/netperf-latest\n    command: ["/bin/sh","-c","netserver -p 4444 -4; iperf3 -s -i 1;"]\n    imagePullPolicy: IfNotPresent\n    name: netperf\n    ports:\n    - name: netperf-port\n      containerPort: 4444\n    - name: iperf-port\n      containerPort: 5210\n  restartPolicy: Always\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n> 注： pod创建后修改annotation无效，需要重启pod才生效 如果不是docker而是使用containerd作为runtime，需要containerd 1.4版本才能支持。\n\n tc qdisc show\n\n...\n\nqdisc tbf 1: dev cali90ab6b94883 root refcnt 2 rate 1000Kbit burst 27917286b lat 1924.2s\n\nqdisc ingress ffff: dev cali90ab6b94883 parent ffff:fff1 ----------------\n\nqdisc tbf 1: dev 31b3 root refcnt 2 rate 1000Kbit burst 27917286b lat 1924.2s\n\nroot@netperf-server:/# iperf3 -c 10.19.0.13\n\nConnecting to host 10.19.0.13, port 5201\n\n[  4] local 10.242.235.108 port 46514 connected to 10.19.0.13 port 5201\n\n[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd\n\n[  4]   0.00-1.00   sec  26.2 MBytes   220 Mbits/sec    1    274 KBytes\n\n[  4]   1.00-2.00   sec  0.00 Bytes  0.00 bits/sec    0    275 KBytes\n\n[  4]   2.00-3.00   sec  0.00 Bytes  0.00 bits/sec    0    278 KBytes\n\n[  4]   3.00-4.00   sec   331 KBytes  2.71 Mbits/sec    0    285 KBytes\n\n[  4]   4.00-5.00   sec  0.00 Bytes  0.00 bits/sec    0    295 KBytes\n\n[  4]   5.00-6.00   sec   382 KBytes  3.13 Mbits/sec    0    312 KBytes\n\n[  4]   6.00-7.00   sec  0.00 Bytes  0.00 bits/sec    0    332 KBytes\n\n[  4]   7.00-8.00   sec  0.00 Bytes  0.00 bits/sec    0    361 KBytes\n\n[  4]   8.00-9.00   sec   446 KBytes  3.65 Mbits/sec    0    389 KBytes\n\n^C[  4]   9.00-9.55   sec  0.00 Bytes  0.00 bits/sec    0    405 KBytes\n\n- - - - - - - - - - - - - - - - - - - - - - - - -\n\n[ ID] Interval           Transfer     Bandwidth       Retr\n\n[  4]   0.00-9.55   sec  27.4 MBytes  24.1 Mbits/sec    1             sender\n\n[  4]   0.00-9.55   sec  0.00 Bytes  0.00 bits/sec                  receiver\n\niperf3: interrupt - the client has terminated\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# centos7安装iperf：\n\nyum install -y iperf3',normalizedContent:'# kubelet启动参数：\n\n> --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --network-plugin=cni\n\nsystemctl cat kubelet | grep network-plugin\n\n\n1\n\n\n\n# calico配置\n\n[root@localhost ~]# cat /etc/cni/net.d/10-calico.conflist | grep bandwidth\n    { "type": "bandwidth", "capabilities": { "bandwidth": true } }\n\n\n1\n2\n\n\n\n# 流量限制验证\n\napiversion: v1\nkind: pod\nmetadata:\n  name: netperf-server\n  annotations:\n    kubernetes.io/egress-bandwidth: 1m\n    kubernetes.io/ingress-bandwidth: 1m\nspec:\n  containers:\n  - image: sirot/netperf-latest\n    command: ["/bin/sh","-c","netserver -p 4444 -4; iperf3 -s -i 1;"]\n    imagepullpolicy: ifnotpresent\n    name: netperf\n    ports:\n    - name: netperf-port\n      containerport: 4444\n    - name: iperf-port\n      containerport: 5210\n  restartpolicy: always\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n> 注： pod创建后修改annotation无效，需要重启pod才生效 如果不是docker而是使用containerd作为runtime，需要containerd 1.4版本才能支持。\n\n tc qdisc show\n\n...\n\nqdisc tbf 1: dev cali90ab6b94883 root refcnt 2 rate 1000kbit burst 27917286b lat 1924.2s\n\nqdisc ingress ffff: dev cali90ab6b94883 parent ffff:fff1 ----------------\n\nqdisc tbf 1: dev 31b3 root refcnt 2 rate 1000kbit burst 27917286b lat 1924.2s\n\nroot@netperf-server:/# iperf3 -c 10.19.0.13\n\nconnecting to host 10.19.0.13, port 5201\n\n[  4] local 10.242.235.108 port 46514 connected to 10.19.0.13 port 5201\n\n[ id] interval           transfer     bandwidth       retr  cwnd\n\n[  4]   0.00-1.00   sec  26.2 mbytes   220 mbits/sec    1    274 kbytes\n\n[  4]   1.00-2.00   sec  0.00 bytes  0.00 bits/sec    0    275 kbytes\n\n[  4]   2.00-3.00   sec  0.00 bytes  0.00 bits/sec    0    278 kbytes\n\n[  4]   3.00-4.00   sec   331 kbytes  2.71 mbits/sec    0    285 kbytes\n\n[  4]   4.00-5.00   sec  0.00 bytes  0.00 bits/sec    0    295 kbytes\n\n[  4]   5.00-6.00   sec   382 kbytes  3.13 mbits/sec    0    312 kbytes\n\n[  4]   6.00-7.00   sec  0.00 bytes  0.00 bits/sec    0    332 kbytes\n\n[  4]   7.00-8.00   sec  0.00 bytes  0.00 bits/sec    0    361 kbytes\n\n[  4]   8.00-9.00   sec   446 kbytes  3.65 mbits/sec    0    389 kbytes\n\n^c[  4]   9.00-9.55   sec  0.00 bytes  0.00 bits/sec    0    405 kbytes\n\n- - - - - - - - - - - - - - - - - - - - - - - - -\n\n[ id] interval           transfer     bandwidth       retr\n\n[  4]   0.00-9.55   sec  27.4 mbytes  24.1 mbits/sec    1             sender\n\n[  4]   0.00-9.55   sec  0.00 bytes  0.00 bits/sec                  receiver\n\niperf3: interrupt - the client has terminated\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# centos7安装iperf：\n\nyum install -y iperf3',charsets:{cjk:!0}},{title:"网络策略calico",frontmatter:{title:"网络策略calico",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/9594e3/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"网络策略calico"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/06.%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5calico.html"},{property:"og:type",content:"article"},{property:"og:title",content:"网络策略calico"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/06.%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5calico.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"网络策略calico"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/06.%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5calico.html",relativePath:"01.技术杂谈/03.kubernetes/06.网络策略calico.md",key:"v-59c6ef63",path:"/pages/9594e3/",headersStr:null,content:"---\napiVersion: projectcalico.org/v3\nkind: GlobalNetworkPolicy\nmetadata:\n  name: global-default\nspec:\n  egress:\n  - action: Allow\n    destination: {}\n    source: {}\n  ingress:\n  - action: Allow\n    destination: {}\n    source: {}\n  order: 9999\n  types:\n  - Ingress\n  - Egress\n---\napiVersion: projectcalico.org/v3\nkind: GlobalNetworkPolicy\nmetadata:\n  name: global-egress-deny\nspec:\n  egress:\n  - action: Deny\n    destination:\n      selector: area == 'dummy'\n    source: {}\n  namespaceSelector: (! has(privileged-namespace))\n  order: 502\n  types:\n  - Egress\n---\napiVersion: projectcalico.org/v3\nkind: GlobalNetworkPolicy\nmetadata:\n  name: global-egress-allow\nspec:\n  egress:\n  - action: Allow\n    destination:\n      nets:\n      - 127.0.0.1/32\n    source:\n      namespaceSelector: name == \"dummy\"\n  order: 501\n  types:\n  - Egress\n---\napiVersion: projectcalico.org/v3\nkind: GlobalNetworkPolicy\nmetadata:\n  name: global-privileged-namespace\nspec:\n  egress:\n  - action: Allow\n    destination: {}\n    source: {}\n  ingress:\n  - action: Allow\n    destination: {}\n    source: {}\n  namespaceSelector: has(privileged-namespace)\n  order: 500\n  types:\n  - Ingress\n  - Egress\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n",normalizedContent:"---\napiversion: projectcalico.org/v3\nkind: globalnetworkpolicy\nmetadata:\n  name: global-default\nspec:\n  egress:\n  - action: allow\n    destination: {}\n    source: {}\n  ingress:\n  - action: allow\n    destination: {}\n    source: {}\n  order: 9999\n  types:\n  - ingress\n  - egress\n---\napiversion: projectcalico.org/v3\nkind: globalnetworkpolicy\nmetadata:\n  name: global-egress-deny\nspec:\n  egress:\n  - action: deny\n    destination:\n      selector: area == 'dummy'\n    source: {}\n  namespaceselector: (! has(privileged-namespace))\n  order: 502\n  types:\n  - egress\n---\napiversion: projectcalico.org/v3\nkind: globalnetworkpolicy\nmetadata:\n  name: global-egress-allow\nspec:\n  egress:\n  - action: allow\n    destination:\n      nets:\n      - 127.0.0.1/32\n    source:\n      namespaceselector: name == \"dummy\"\n  order: 501\n  types:\n  - egress\n---\napiversion: projectcalico.org/v3\nkind: globalnetworkpolicy\nmetadata:\n  name: global-privileged-namespace\nspec:\n  egress:\n  - action: allow\n    destination: {}\n    source: {}\n  ingress:\n  - action: allow\n    destination: {}\n    source: {}\n  namespaceselector: has(privileged-namespace)\n  order: 500\n  types:\n  - ingress\n  - egress\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n",charsets:{}},{title:"grafana和promuthues",frontmatter:{title:"grafana和promuthues",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/f1f52d/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"grafana和promuthues"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/07.grafana%E5%92%8Cpromuthues.html"},{property:"og:type",content:"article"},{property:"og:title",content:"grafana和promuthues"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/07.grafana%E5%92%8Cpromuthues.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"grafana和promuthues"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/07.grafana%E5%92%8Cpromuthues.html",relativePath:"01.技术杂谈/03.kubernetes/07.grafana和promuthues.md",key:"v-0b248a60",path:"/pages/f1f52d/",headers:[{level:2,title:"热加载",slug:"热加载",normalizedTitle:"热加载",charIndex:763},{level:2,title:"指标类型",slug:"指标类型",normalizedTitle:"指标类型",charIndex:850},{level:2,title:"计算表达式：",slug:"计算表达式",normalizedTitle:"计算表达式：",charIndex:931},{level:2,title:"指标命名规范",slug:"指标命名规范",normalizedTitle:"指标命名规范",charIndex:1107}],headersStr:"热加载 指标类型 计算表达式： 指标命名规范",content:"[TOC]\n\n\n# 组件\n\n * Prometheus Server: 用于收集和存储时间序列数据。\n * Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当Prometheus server 来 pull 时，直接返回实时状态的 metrics。对于机器层面的 metrices，需要使用 node exporter。\n * Push Gateway: 主要用于短期的 jobs。\n * Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。\n * Alertmanager: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。\n\n\n# curl\n\necho \"hfftest 111\" |curl --data-binary @- http://10.19.0.13:9091/metrics/job/schedulerStatus/instance/tztest\n\ncurl -X POST -g 'http://127.0.0.1:9090/api/v1/admin/tsdb/delete_series?match[]=scheduler_effective_dynamic_schedule_count'\n\ncurl -X POST -g 'http://10.19.0.13:9090/api/v1/admin/tsdb/delete_series?match[]={job=\"schedulerStatus\"}'\n\n\n# 热加载\n\ncurl -XPOST <prometheus-url>/-/reload\n\n\n1\n\n\n\n# pushgateway\n\n\n# Grafana\n\n\n# 指标\n\n\n# 指标类型\n\nCounter（计数器）对数据只增不减 Gauage（仪表盘）可增可减 Histogram（直方图）,Summary（摘要）提供更多的统计信\n\n\n# 计算表达式：\n\nPrometheus为不同的数据提供了非常多的计算函数，其中有个小技巧就是遇到counter数据类型，在做任何操作之前，先套上一个rate()或者increase()函数\n\n> 100-avg(irate(node_cpu_seconds_total{mode='idle'}[5m])) by (node_name)*100\n\n\n# 指标命名规范\n\n一个指标名称： • 必须符合有效字符的数据模型。 • 应该具有与指标所属域相关的（单个词汇）应用程序前缀。前缀有时被客户端库称为命名空间。对于特定于应用程序的指标，前缀通常是应用程序名称本身。然而，有时候指标更通用，比如客户端库导出的标准化指标。例如： ○ prometheus_notifications_total （针对Prometheus 服务器） ○ process_cpu_seconds_total （由客户端库导出） ○ http_request_duration_seconds （用于所有HTTP请求） • 必须有一个单一的单位（即，不要把秒与毫秒，或秒与字节混用）。 • 应该使用基本单位（如秒、字节、米——而不是毫秒、兆字节、公里）。参见下面的基本单位列表。 • 应以复数形式用后缀来描述单位。请注意，累计计数以total作为后缀，附加在单位之后。 ○ http_request_duration_seconds ○ node_memory_usage_bytes ○ http_requests_total （用于无单位的累计计数） ○ process_cpu_seconds_total （用于有单位的累计计数） ○ foobar_build_info （用于提供关于正在运行的二进制文件的元数据的伪指标） • 应该在所有的标签维度中表示相同的监控逻辑。 ○ 请求持久时长 ○ 传输的数据字节数 ○ 瞬时资源使用百分比",normalizedContent:"[toc]\n\n\n# 组件\n\n * prometheus server: 用于收集和存储时间序列数据。\n * client library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 prometheus server。当prometheus server 来 pull 时，直接返回实时状态的 metrics。对于机器层面的 metrices，需要使用 node exporter。\n * push gateway: 主要用于短期的 jobs。\n * exporters: 用于暴露已有的第三方服务的 metrics 给 prometheus。\n * alertmanager: 从 prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，opsgenie, webhook 等。\n\n\n# curl\n\necho \"hfftest 111\" |curl --data-binary @- http://10.19.0.13:9091/metrics/job/schedulerstatus/instance/tztest\n\ncurl -x post -g 'http://127.0.0.1:9090/api/v1/admin/tsdb/delete_series?match[]=scheduler_effective_dynamic_schedule_count'\n\ncurl -x post -g 'http://10.19.0.13:9090/api/v1/admin/tsdb/delete_series?match[]={job=\"schedulerstatus\"}'\n\n\n# 热加载\n\ncurl -xpost <prometheus-url>/-/reload\n\n\n1\n\n\n\n# pushgateway\n\n\n# grafana\n\n\n# 指标\n\n\n# 指标类型\n\ncounter（计数器）对数据只增不减 gauage（仪表盘）可增可减 histogram（直方图）,summary（摘要）提供更多的统计信\n\n\n# 计算表达式：\n\nprometheus为不同的数据提供了非常多的计算函数，其中有个小技巧就是遇到counter数据类型，在做任何操作之前，先套上一个rate()或者increase()函数\n\n> 100-avg(irate(node_cpu_seconds_total{mode='idle'}[5m])) by (node_name)*100\n\n\n# 指标命名规范\n\n一个指标名称： • 必须符合有效字符的数据模型。 • 应该具有与指标所属域相关的（单个词汇）应用程序前缀。前缀有时被客户端库称为命名空间。对于特定于应用程序的指标，前缀通常是应用程序名称本身。然而，有时候指标更通用，比如客户端库导出的标准化指标。例如： ○ prometheus_notifications_total （针对prometheus 服务器） ○ process_cpu_seconds_total （由客户端库导出） ○ http_request_duration_seconds （用于所有http请求） • 必须有一个单一的单位（即，不要把秒与毫秒，或秒与字节混用）。 • 应该使用基本单位（如秒、字节、米——而不是毫秒、兆字节、公里）。参见下面的基本单位列表。 • 应以复数形式用后缀来描述单位。请注意，累计计数以total作为后缀，附加在单位之后。 ○ http_request_duration_seconds ○ node_memory_usage_bytes ○ http_requests_total （用于无单位的累计计数） ○ process_cpu_seconds_total （用于有单位的累计计数） ○ foobar_build_info （用于提供关于正在运行的二进制文件的元数据的伪指标） • 应该在所有的标签维度中表示相同的监控逻辑。 ○ 请求持久时长 ○ 传输的数据字节数 ○ 瞬时资源使用百分比",charsets:{cjk:!0}},{title:"etcd节点down机数据恢复",frontmatter:{title:"etcd节点down机数据恢复",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/43f072/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"etcd节点down机数据恢复"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/08.etcd%E8%8A%82%E7%82%B9down%E6%9C%BA%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D.html"},{property:"og:type",content:"article"},{property:"og:title",content:"etcd节点down机数据恢复"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/08.etcd%E8%8A%82%E7%82%B9down%E6%9C%BA%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"etcd节点down机数据恢复"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/08.etcd%E8%8A%82%E7%82%B9down%E6%9C%BA%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D.html",relativePath:"01.技术杂谈/03.kubernetes/08.etcd节点down机数据恢复.md",key:"v-2f3eb2e7",path:"/pages/43f072/",headersStr:null,content:"(1) 移出该节点：etcdctl member remove xx（可以通过member list获取XX） (2) 停止etcd服务 (3) 需要将配置中的 cluster_state改为：existing，因为是加入已有集群，不能用 new 修复机器问题，删除旧的数据目录，重新启动 etcd 服务 (4) 加入 memeber： etcdctl member add xxx –peer-urls=https://x.x.x.x:2380 (5) 验证：etcdctl endpoint status",normalizedContent:"(1) 移出该节点：etcdctl member remove xx（可以通过member list获取xx） (2) 停止etcd服务 (3) 需要将配置中的 cluster_state改为：existing，因为是加入已有集群，不能用 new 修复机器问题，删除旧的数据目录，重新启动 etcd 服务 (4) 加入 memeber： etcdctl member add xxx –peer-urls=https://x.x.x.x:2380 (5) 验证：etcdctl endpoint status",charsets:{cjk:!0}},{title:"ceph",frontmatter:{title:"ceph",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/070d33/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"rbd不支持ReadWriteMany\n在同一个节点中,是可以支持多个pod共享rbd image运行的",meta:[{name:"twitter:title",content:"ceph"},{name:"twitter:description",content:"rbd不支持ReadWriteMany\n在同一个节点中,是可以支持多个pod共享rbd image运行的"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/09.ceph.html"},{property:"og:type",content:"article"},{property:"og:title",content:"ceph"},{property:"og:description",content:"rbd不支持ReadWriteMany\n在同一个节点中,是可以支持多个pod共享rbd image运行的"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/09.ceph.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"ceph"},{itemprop:"description",content:"rbd不支持ReadWriteMany\n在同一个节点中,是可以支持多个pod共享rbd image运行的"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/09.ceph.html",relativePath:"01.技术杂谈/03.kubernetes/09.ceph.md",key:"v-1247b65b",path:"/pages/070d33/",headersStr:null,content:"# 挂载点查询\n\n\n# rbd vs cephfs\n\nrbd不支持ReadWriteMany 在同一个节点中,是可以支持多个pod共享rbd image运行的",normalizedContent:"# 挂载点查询\n\n\n# rbd vs cephfs\n\nrbd不支持readwritemany 在同一个节点中,是可以支持多个pod共享rbd image运行的",charsets:{cjk:!0}},{title:"chrony",frontmatter:{title:"chrony",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/bfddf3/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"chrony"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/10.chrony.html"},{property:"og:type",content:"article"},{property:"og:title",content:"chrony"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/10.chrony.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"chrony"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/10.chrony.html",relativePath:"01.技术杂谈/03.kubernetes/10.chrony.md",key:"v-cbe0d60a",path:"/pages/bfddf3/",headers:[{level:2,title:"chrony的优势包括以下几点:",slug:"chrony的优势包括以下几点",normalizedTitle:"chrony的优势包括以下几点:",charIndex:643},{level:2,title:"ntp能做，chrony做不到的：",slug:"ntp能做-chrony做不到的",normalizedTitle:"ntp能做，chrony做不到的：",charIndex:923},{level:2,title:"chrony可以比ntp做得更好：",slug:"chrony可以比ntp做得更好",normalizedTitle:"chrony可以比ntp做得更好：",charIndex:1212},{level:2,title:"常用配置项：",slug:"常用配置项",normalizedTitle:"常用配置项：",charIndex:3018},{level:2,title:"建议配置项：",slug:"建议配置项",normalizedTitle:"建议配置项：",charIndex:4461},{level:2,title:"NTP Server(master节点)",slug:"ntp-server-master节点",normalizedTitle:"ntp server(master节点)",charIndex:4663},{level:2,title:"NTP Client(普通node节点)",slug:"ntp-client-普通node节点",normalizedTitle:"ntp client(普通node节点)",charIndex:4843}],headersStr:"chrony的优势包括以下几点: ntp能做，chrony做不到的： chrony可以比ntp做得更好： 常用配置项： 建议配置项： NTP Server(master节点) NTP Client(普通node节点)",content:"[TOC]\n\n\n# 一、Chrony简述\n\nchrony是网络时间协议(NTP)的另一种实现,与网络时间协议后台程序(ntpd)不同,它可以更快地且更准确地同步系统时钟，请注意，ntpd仍然包含其中以供需要运行NTP服务的客户使用。 两个主要程序：chronyd和chronyc\n\n * chronyd：后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算机增减时间的比率，并对此进行补偿\n * chronyc：命令行用户工具，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计算机上工作，也可在一台不同的远程计算机上工作\n\n> 服务unit文件： /usr/lib/systemd/system/chronyd.service 监听端口： 323/udp，123/udp 配置文件： /etc/chrony.conf\n\n\n# 二、部署版本：\n\n官方版本：3.4\n\n\n# 三、环境配置：\n\n1、关闭firewalld防火墙 2、关闭SELinux 3、chrony与ntp都是时间同步软件，两个软件不能够同时开启，会出现时间冲突\n\n\n# 四、NTP/Chrony对比：\n\n使用chronyd服务平滑同步时间的方式要优于crontab + ntpdate，因为ntpdate同步时间会造成时间的跳跃，对一些依赖时间的程序和服务会造成影响，例如：sleep、timer等，且chronyd服务可以在修正时间的过程中同时修正CPU tick。\n\n\n# chrony的优势包括以下几点:\n\n1.更快的同步只需要数分钟而非数小时时间，从而最大程度减少时间和频率误差，这对于并非全天24小时的运行的台式计算机或系统而言非常有用； 2.能够更好地响应时钟频率的快速变化，这对于具备不稳定时钟的虚拟机或导致赛事中频率发生比变化的节能技术; 3.在初始同步后，它不会停止时钟，以防对需要系统时间保持单调的应用程序造成影响; 4.在应对临时非对称延迟时(例如大规模下载造成链接饱和等情况)提供了更好的稳定性; 5.无需对时间服务器进行定期轮询，因此具备间歇性网络连接(如网络不稳定的场景)的系统仍然可以快速同步时钟。\n\n\n# ntp能做，chrony做不到的：\n\nntp支持RFC 5905的所有操作模式，包括广播、多播和manycast服务器/客户端。然而，广播和多播模式本质上不如普通的服务器/客户机模式准确和安全（即使有身份验证），通常应该避免。 ntp支持自动密钥协议（RFC 5906）来使用公钥加密对服务器进行身份验证。请注意，该协议已被证明是不安全的，并且已被NTS（RFC 8915）淘汰。 ntp已经被移植到更多的操作系统中。 ntp包含大量用于各种硬件参考时钟的驱动程序。chrony需要其他程序（如gpsd或ntp refclock）通过SHM或SOCK接口提供参考时间。\n\n\n# chrony可以比ntp做得更好：\n\nchrony可以在访问时间参考是断断续续的环境中有效地执行。ntp需要定期对引用进行轮询才能正常工作。 chrony通常可以更快地同步时钟，并具有更好的时间精度。 chrony快速适应时钟速率的突然变化（例如，由于晶体振荡器的温度变化）。ntp可能需要很长时间才能重新安定下来。 chrony即使在网络拥塞时间较长的情况下也能表现良好。 默认配置中的chrony从不占用时间来不打乱其他正在运行的程序。ntp也可以配置为从不步进时间，但是在这种情况下，它必须使用不同的方法来调整时钟（daemon循环而不是内核规程），这可能会对时钟的准确性产生负面影响。 chrony可以在更大的范围内调整时钟的速率，这使得它甚至可以在时钟中断或不稳定的机器上运行（例如在某些虚拟机中）。 chrony更小，占用的内存更少，只有在需要时才会唤醒CPU，这样更省电。 chrony可以做ntp做不到的事情： chrony支持网络时间安全（NTS）认证机制。 chrony在Linux上支持硬件时间戳，这允许在本地网络中进行非常稳定和准确的同步。 chrony为独立网络提供支持，无论时间校正的唯一方法是手动输入（例如，由管理员查看时钟）。chrony可以查看在不同更新时更正的错误，计算出计算机获得或丢失时间的速率，并使用此估计值来随后调整计算机时钟。 chrony支持计算实时时钟的增益或丢失率，即在计算机关闭时保持时间的时钟。当系统引导时，它可以使用这些数据从实时时钟的修正版本设置系统时间。到目前为止，这些实时时钟工具仅在Linux上可用。\n\n\n# 五、chrony服务安装的文件：\n\n[root@master200.yinzhengjie.org.cn ~]# rpm -ql chrony\n/etc/NetworkManager/dispatcher.d/20-chrony\n/etc/chrony.conf　　　　　　　　#chrony的主配置文件\n/etc/chrony.keys\n/etc/dhcp/dhclient.d/chrony.sh\n/etc/logrotate.d/chrony\n/etc/sysconfig/chronyd\n/usr/bin/chronyc　　　　　　　　#chronyc是一个命令行交互式接口程序，可用于监视chronyd的性能，并在运行时更改各种操作参数。\n/usr/lib/systemd/ntp-units.d/50-chronyd.list\n/usr/lib/systemd/system/chrony-dnssrv@.service\n/usr/lib/systemd/system/chrony-dnssrv@.timer\n/usr/lib/systemd/system/chrony-wait.service\n/usr/lib/systemd/system/chronyd.service　　　　　　#CentOS 7.x版本对应的unit file\n/usr/libexec/chrony-helper\n/usr/sbin/chronyd              #chronyd是一个可以在启动时启动的守护程序，它既可以充当服务端进程也可以充当服务端进程\n/usr/share/doc/chrony-3.4\n/usr/share/doc/chrony-3.4/COPYING\n/usr/share/doc/chrony-3.4/FAQ\n/usr/share/doc/chrony-3.4/NEWS\n/usr/share/doc/chrony-3.4/README\n/usr/share/man/man1/chronyc.1.gz\n/usr/share/man/man5/chrony.conf.5.gz\n/usr/share/man/man8/chronyd.8.gz\n/var/lib/chrony\n/var/lib/chrony/drift\n/var/lib/chrony/rtc\n/var/log/chrony\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 六、Chrony配置chrony.conf\n\n\n# 常用配置项：\n\nPool 10.210.116.60                       #此指令的语法与server指令的语法类似，只是它用于指定NTP服务器池，而不是单个NTP服务器。池名称需要解析为多个地址，这些地址可能会随着时间的推移而改变。\nserver 0.centos.pool.ntp.org iburst          #server可用于时钟服务器；iburst，当服务器可达时，发送一个八个数据包而不是通常的一个数据包，包间隔通常为2秒，可加快初始同步速度; iburst 是参数, 一般用此参数即可。该参数的含义是在头四次 NTP 请求以 2s 或者更短的间隔，而不是以 minpoll x 指定的最小间隔，这样的设置可以让 chronyd 启动时快速进行一次同步。\n其他的参数有 minpoll x 默认值是 6，代表 64s。maxpoll x 默认值是 9，代表 512s。\nserver 1.centos.pool.ntp.org iburst          #N.centos.pool.ntp.org：这个是地址池，是ntp服务的虚拟集群，这里可以写成集群地址，也可以写指定的某服务器\npeer 10.210.116.160     #同ntp, 对等体模式\ndriftfile /var/lib/chrony/drift              #根据实际时间计算出计算机增减时间的比率，讲它记录到一个文件中，会在重启后为系统时钟做出补偿\nmakestep 1.0 3                         #当头三次校时，如果时间相差 1.0s, 则跳跃式校时\nrtcsync                                #启用内核模式，系统时钟每11分钟会拷贝到实时时钟（RTC）\n#allow 192.168.0.0/16                   #allow/deny：仅允许/拒绝192.168.2.0/24网络的主机可以访问此时间服务器 deny all拒绝所有客户端\n#local stratum 10                       #即使server指令中时间服务器不可用，也允许讲本地时间做为标准时间授时给其它客户端\nstratumweight 0.05                      # 让chronyd在选择源时忽略源的层级\n#hwtimestamp *                        #通过使用 hwtimestamp 指令启用硬件时间戳\n#minsources 2                          #增加调整所需的可选择源的最小数量\n#keyfile /etc/chrony.keys                 # 指定包含NTP验证密钥的文件。\nlogdir /var/log/chrony                   # 指定日志文件的目录。\nlogchange 0.5                          # 如果时钟调整大于0.5秒，则向系统日志发送消息\n#log measurements statistics tracking      #选择日志文件要记录的信息\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 建议配置项：\n\n 1. 当前节点设置成server:127.127.0.1\n 2. 三个master节点作为其他普通节点的时间服务器（配置成pool）\n 3. 三个master节点互为peer(同原ntp)\n 4. 如果有外部时钟源配置，则设置成pool\n 5. 如果时间超过10min，则允许第一次跳跃 （与之前沟通需求保持一致，可修改策略）\n 6. 最多3个外部时钟源，可以不设置外部时钟源\n\n\n# NTP Server(master节点)\n\nserver 127.127.0.1 pool 外部时钟源1 pool外部时钟源2 peer master2节点IP peer master3节点IP driftfile /var/lib/chrony/drift makestep 600 1 rtcsync logdir /var/log/chrony\n\n\n# NTP Client(普通node节点)\n\nserver 127.127.0.1 pool外部时钟源1 pool外部时钟源2 pool master1节点IP pool master2节点IP pool master3节点IP driftfile /var/lib/chrony/drift makestep 600 1 rtcsync logdir /var/log/chrony\n\n\n# 七、部署:\n\nenable chrony， disable ntpd\n\n 1. Stop/disable ntpd\n 2. configure chrony.conf(master/node)\n 3. systemctl start/enable chronyd.service\n 4. systemctl restart chronyd.service (notify)\n\n\n# 八、常用chrony命令：\n\n1、 chronyd -q 'server ntp.ntsc.ac.cn iburst' 临时同步时间 2、 chronyc -n sources -v 查看时间同步服务器列表 3、 accheck - 检查NTP访问是否对特定主机可用 4、 activity - 该命令会显示有多少NTP源在线/离线 5、 add server - 手动添加一台新的NTP服务器。 6、 clients - 在客户端报告已访问到服务器 7、 delete - 手动移除NTP服务器或对等服务器 8、 settime - 手动设置守护进程时间 9、 tracking - 显示系统时间信息\n\n\n# 九、问题定位思路\n\n1.检查chrony服务是否正常：chrony activity 2.检查ntpd服务是否启动：systemctl is-active ntpd 3.检查时间同步服务器列表：chronyc -n sources -v\n\n\n# 十、参考资料：\n\nhttps://chrony.tuxfamily.org/documentation.html",normalizedContent:"[toc]\n\n\n# 一、chrony简述\n\nchrony是网络时间协议(ntp)的另一种实现,与网络时间协议后台程序(ntpd)不同,它可以更快地且更准确地同步系统时钟，请注意，ntpd仍然包含其中以供需要运行ntp服务的客户使用。 两个主要程序：chronyd和chronyc\n\n * chronyd：后台运行的守护进程，用于调整内核中运行的系统时钟和时钟服务器同步。它确定计算机增减时间的比率，并对此进行补偿\n * chronyc：命令行用户工具，用于监控性能并进行多样化的配置。它可以在chronyd实例控制的计算机上工作，也可在一台不同的远程计算机上工作\n\n> 服务unit文件： /usr/lib/systemd/system/chronyd.service 监听端口： 323/udp，123/udp 配置文件： /etc/chrony.conf\n\n\n# 二、部署版本：\n\n官方版本：3.4\n\n\n# 三、环境配置：\n\n1、关闭firewalld防火墙 2、关闭selinux 3、chrony与ntp都是时间同步软件，两个软件不能够同时开启，会出现时间冲突\n\n\n# 四、ntp/chrony对比：\n\n使用chronyd服务平滑同步时间的方式要优于crontab + ntpdate，因为ntpdate同步时间会造成时间的跳跃，对一些依赖时间的程序和服务会造成影响，例如：sleep、timer等，且chronyd服务可以在修正时间的过程中同时修正cpu tick。\n\n\n# chrony的优势包括以下几点:\n\n1.更快的同步只需要数分钟而非数小时时间，从而最大程度减少时间和频率误差，这对于并非全天24小时的运行的台式计算机或系统而言非常有用； 2.能够更好地响应时钟频率的快速变化，这对于具备不稳定时钟的虚拟机或导致赛事中频率发生比变化的节能技术; 3.在初始同步后，它不会停止时钟，以防对需要系统时间保持单调的应用程序造成影响; 4.在应对临时非对称延迟时(例如大规模下载造成链接饱和等情况)提供了更好的稳定性; 5.无需对时间服务器进行定期轮询，因此具备间歇性网络连接(如网络不稳定的场景)的系统仍然可以快速同步时钟。\n\n\n# ntp能做，chrony做不到的：\n\nntp支持rfc 5905的所有操作模式，包括广播、多播和manycast服务器/客户端。然而，广播和多播模式本质上不如普通的服务器/客户机模式准确和安全（即使有身份验证），通常应该避免。 ntp支持自动密钥协议（rfc 5906）来使用公钥加密对服务器进行身份验证。请注意，该协议已被证明是不安全的，并且已被nts（rfc 8915）淘汰。 ntp已经被移植到更多的操作系统中。 ntp包含大量用于各种硬件参考时钟的驱动程序。chrony需要其他程序（如gpsd或ntp refclock）通过shm或sock接口提供参考时间。\n\n\n# chrony可以比ntp做得更好：\n\nchrony可以在访问时间参考是断断续续的环境中有效地执行。ntp需要定期对引用进行轮询才能正常工作。 chrony通常可以更快地同步时钟，并具有更好的时间精度。 chrony快速适应时钟速率的突然变化（例如，由于晶体振荡器的温度变化）。ntp可能需要很长时间才能重新安定下来。 chrony即使在网络拥塞时间较长的情况下也能表现良好。 默认配置中的chrony从不占用时间来不打乱其他正在运行的程序。ntp也可以配置为从不步进时间，但是在这种情况下，它必须使用不同的方法来调整时钟（daemon循环而不是内核规程），这可能会对时钟的准确性产生负面影响。 chrony可以在更大的范围内调整时钟的速率，这使得它甚至可以在时钟中断或不稳定的机器上运行（例如在某些虚拟机中）。 chrony更小，占用的内存更少，只有在需要时才会唤醒cpu，这样更省电。 chrony可以做ntp做不到的事情： chrony支持网络时间安全（nts）认证机制。 chrony在linux上支持硬件时间戳，这允许在本地网络中进行非常稳定和准确的同步。 chrony为独立网络提供支持，无论时间校正的唯一方法是手动输入（例如，由管理员查看时钟）。chrony可以查看在不同更新时更正的错误，计算出计算机获得或丢失时间的速率，并使用此估计值来随后调整计算机时钟。 chrony支持计算实时时钟的增益或丢失率，即在计算机关闭时保持时间的时钟。当系统引导时，它可以使用这些数据从实时时钟的修正版本设置系统时间。到目前为止，这些实时时钟工具仅在linux上可用。\n\n\n# 五、chrony服务安装的文件：\n\n[root@master200.yinzhengjie.org.cn ~]# rpm -ql chrony\n/etc/networkmanager/dispatcher.d/20-chrony\n/etc/chrony.conf　　　　　　　　#chrony的主配置文件\n/etc/chrony.keys\n/etc/dhcp/dhclient.d/chrony.sh\n/etc/logrotate.d/chrony\n/etc/sysconfig/chronyd\n/usr/bin/chronyc　　　　　　　　#chronyc是一个命令行交互式接口程序，可用于监视chronyd的性能，并在运行时更改各种操作参数。\n/usr/lib/systemd/ntp-units.d/50-chronyd.list\n/usr/lib/systemd/system/chrony-dnssrv@.service\n/usr/lib/systemd/system/chrony-dnssrv@.timer\n/usr/lib/systemd/system/chrony-wait.service\n/usr/lib/systemd/system/chronyd.service　　　　　　#centos 7.x版本对应的unit file\n/usr/libexec/chrony-helper\n/usr/sbin/chronyd              #chronyd是一个可以在启动时启动的守护程序，它既可以充当服务端进程也可以充当服务端进程\n/usr/share/doc/chrony-3.4\n/usr/share/doc/chrony-3.4/copying\n/usr/share/doc/chrony-3.4/faq\n/usr/share/doc/chrony-3.4/news\n/usr/share/doc/chrony-3.4/readme\n/usr/share/man/man1/chronyc.1.gz\n/usr/share/man/man5/chrony.conf.5.gz\n/usr/share/man/man8/chronyd.8.gz\n/var/lib/chrony\n/var/lib/chrony/drift\n/var/lib/chrony/rtc\n/var/log/chrony\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 六、chrony配置chrony.conf\n\n\n# 常用配置项：\n\npool 10.210.116.60                       #此指令的语法与server指令的语法类似，只是它用于指定ntp服务器池，而不是单个ntp服务器。池名称需要解析为多个地址，这些地址可能会随着时间的推移而改变。\nserver 0.centos.pool.ntp.org iburst          #server可用于时钟服务器；iburst，当服务器可达时，发送一个八个数据包而不是通常的一个数据包，包间隔通常为2秒，可加快初始同步速度; iburst 是参数, 一般用此参数即可。该参数的含义是在头四次 ntp 请求以 2s 或者更短的间隔，而不是以 minpoll x 指定的最小间隔，这样的设置可以让 chronyd 启动时快速进行一次同步。\n其他的参数有 minpoll x 默认值是 6，代表 64s。maxpoll x 默认值是 9，代表 512s。\nserver 1.centos.pool.ntp.org iburst          #n.centos.pool.ntp.org：这个是地址池，是ntp服务的虚拟集群，这里可以写成集群地址，也可以写指定的某服务器\npeer 10.210.116.160     #同ntp, 对等体模式\ndriftfile /var/lib/chrony/drift              #根据实际时间计算出计算机增减时间的比率，讲它记录到一个文件中，会在重启后为系统时钟做出补偿\nmakestep 1.0 3                         #当头三次校时，如果时间相差 1.0s, 则跳跃式校时\nrtcsync                                #启用内核模式，系统时钟每11分钟会拷贝到实时时钟（rtc）\n#allow 192.168.0.0/16                   #allow/deny：仅允许/拒绝192.168.2.0/24网络的主机可以访问此时间服务器 deny all拒绝所有客户端\n#local stratum 10                       #即使server指令中时间服务器不可用，也允许讲本地时间做为标准时间授时给其它客户端\nstratumweight 0.05                      # 让chronyd在选择源时忽略源的层级\n#hwtimestamp *                        #通过使用 hwtimestamp 指令启用硬件时间戳\n#minsources 2                          #增加调整所需的可选择源的最小数量\n#keyfile /etc/chrony.keys                 # 指定包含ntp验证密钥的文件。\nlogdir /var/log/chrony                   # 指定日志文件的目录。\nlogchange 0.5                          # 如果时钟调整大于0.5秒，则向系统日志发送消息\n#log measurements statistics tracking      #选择日志文件要记录的信息\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 建议配置项：\n\n 1. 当前节点设置成server:127.127.0.1\n 2. 三个master节点作为其他普通节点的时间服务器（配置成pool）\n 3. 三个master节点互为peer(同原ntp)\n 4. 如果有外部时钟源配置，则设置成pool\n 5. 如果时间超过10min，则允许第一次跳跃 （与之前沟通需求保持一致，可修改策略）\n 6. 最多3个外部时钟源，可以不设置外部时钟源\n\n\n# ntp server(master节点)\n\nserver 127.127.0.1 pool 外部时钟源1 pool外部时钟源2 peer master2节点ip peer master3节点ip driftfile /var/lib/chrony/drift makestep 600 1 rtcsync logdir /var/log/chrony\n\n\n# ntp client(普通node节点)\n\nserver 127.127.0.1 pool外部时钟源1 pool外部时钟源2 pool master1节点ip pool master2节点ip pool master3节点ip driftfile /var/lib/chrony/drift makestep 600 1 rtcsync logdir /var/log/chrony\n\n\n# 七、部署:\n\nenable chrony， disable ntpd\n\n 1. stop/disable ntpd\n 2. configure chrony.conf(master/node)\n 3. systemctl start/enable chronyd.service\n 4. systemctl restart chronyd.service (notify)\n\n\n# 八、常用chrony命令：\n\n1、 chronyd -q 'server ntp.ntsc.ac.cn iburst' 临时同步时间 2、 chronyc -n sources -v 查看时间同步服务器列表 3、 accheck - 检查ntp访问是否对特定主机可用 4、 activity - 该命令会显示有多少ntp源在线/离线 5、 add server - 手动添加一台新的ntp服务器。 6、 clients - 在客户端报告已访问到服务器 7、 delete - 手动移除ntp服务器或对等服务器 8、 settime - 手动设置守护进程时间 9、 tracking - 显示系统时间信息\n\n\n# 九、问题定位思路\n\n1.检查chrony服务是否正常：chrony activity 2.检查ntpd服务是否启动：systemctl is-active ntpd 3.检查时间同步服务器列表：chronyc -n sources -v\n\n\n# 十、参考资料：\n\nhttps://chrony.tuxfamily.org/documentation.html",charsets:{cjk:!0}},{title:"crd operator",frontmatter:{title:"crd operator",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/5d5fcc/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"自定义资源的描述(Custom Resource Definition)",meta:[{name:"twitter:title",content:"crd operator"},{name:"twitter:description",content:"自定义资源的描述(Custom Resource Definition)"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/11.crd%20operator.html"},{property:"og:type",content:"article"},{property:"og:title",content:"crd operator"},{property:"og:description",content:"自定义资源的描述(Custom Resource Definition)"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/11.crd%20operator.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"crd operator"},{itemprop:"description",content:"自定义资源的描述(Custom Resource Definition)"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/11.crd%20operator.html",relativePath:"01.技术杂谈/03.kubernetes/11.crd operator.md",key:"v-81d98e10",path:"/pages/5d5fcc/",headersStr:null,content:"# CRD\n\n自定义资源的描述(Custom Resource Definition)\n\n\n# Operator\n\nOperator的工作原理，实际上是利用了Kubernetes的自定义API资源（CRD），来描述我们想要部署的“有状态应用”；然后在自定义控制器里，根据自定义API对象的变化，来完成具体的部署和运维工作。",normalizedContent:"# crd\n\n自定义资源的描述(custom resource definition)\n\n\n# operator\n\noperator的工作原理，实际上是利用了kubernetes的自定义api资源（crd），来描述我们想要部署的“有状态应用”；然后在自定义控制器里，根据自定义api对象的变化，来完成具体的部署和运维工作。",charsets:{cjk:!0}},{title:"cri之containerd shimv2",frontmatter:{title:"cri之containerd shimv2",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/fe3b2b/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"cri之containerd shimv2"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/12.cri%E4%B9%8Bcontainerd%20shimv2.html"},{property:"og:type",content:"article"},{property:"og:title",content:"cri之containerd shimv2"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/12.cri%E4%B9%8Bcontainerd%20shimv2.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"cri之containerd shimv2"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/12.cri%E4%B9%8Bcontainerd%20shimv2.html",relativePath:"01.技术杂谈/03.kubernetes/12.cri之containerd shimv2.md",key:"v-16eeeecc",path:"/pages/fe3b2b/",headersStr:null,content:"[TOC]\n\n\n# 参考资料\n\nhttps://www.infoq.cn/article/r*ikOvovTHhADAWw1Hb1 CRI Shimv2：一种 Kubernetes 集成容器运行时的新思路（张磊）",normalizedContent:"[toc]\n\n\n# 参考资料\n\nhttps://www.infoq.cn/article/r*ikovovthhadaww1hb1 cri shimv2：一种 kubernetes 集成容器运行时的新思路（张磊）",charsets:{cjk:!0}},{title:"harbor",frontmatter:{title:"harbor",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/c3cbc2/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"harbor"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/13.harbor.html"},{property:"og:type",content:"article"},{property:"og:title",content:"harbor"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/13.harbor.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"harbor"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/13.harbor.html",relativePath:"01.技术杂谈/03.kubernetes/13.harbor.md",key:"v-c5d8330a",path:"/pages/c3cbc2/",headers:[{level:2,title:"harbor安装",slug:"harbor安装",normalizedTitle:"harbor安装",charIndex:23},{level:2,title:"harbor升级（大于v1.10.x到更新版本）",slug:"harbor升级-大于v1-10-x到更新版本",normalizedTitle:"harbor升级（大于v1.10.x到更新版本）",charIndex:141},{level:2,title:"harbor回滚",slug:"harbor回滚",normalizedTitle:"harbor回滚",charIndex:566},{level:2,title:"harbor数据库迁移及golang-migrate",slug:"harbor数据库迁移及golang-migrate",normalizedTitle:"harbor数据库迁移及golang-migrate",charIndex:662}],headersStr:"harbor安装 harbor升级（大于v1.10.x到更新版本） harbor回滚 harbor数据库迁移及golang-migrate",content:"# harbor升级数据库迁移及回滚\n\n\n# harbor安装\n\n 1. 下载docker-compose\n 2. 下载，解压Harbor离线包\n 3. 修改配置harbor.yml.tmpl>harbor.yml及生成证书等\n 4. 安装并启动：./install.sh\n\n\n# harbor升级（大于v1.10.x到更新版本）\n\nharbor不同阶段的升级方式不同，存在兼容性问题，有些版本无法直接跨版本升级，需要多阶段升级方式达到最终升级目的 自harborv2起，迁移工具全部转移到了 goharbor/prepare 这个镜像中\n\n 1. 到github下载2.4.2版本的离线包（包含镜像goharbor/prepare）\n 2. 准备迁移工具镜像goharbor/prepare\n 3. 停止harbor\n 4. 备份数据库和安装目录\n 5. 解压离线包到安装目录\n 6. 移动旧的配置文件到新的安装目录下\n 7. 数据迁移：docker run -it --rm -v /:/hostfs goharbor/prepare:v2.4.2 migrate -i /opt/harbor/harbor.yml （此更新包括数据库模式（schema）和配置文件数据）\n 8. 安装并启动：./install.sh\n\n\n# harbor回滚\n\n 1. 停止harbor\n 2. 删除安装目录和数据库文件\n 3. 将备份目录和备份数据库还原回安装目录和数据库目录\n 4. 安装并启动：./install.sh\n\n\n# harbor数据库迁移及golang-migrate\n\n数据库升级是自动完成的，用户手动执行升级配置文件的命令行工具包。此工具包与Harbor一同发布，被包含在goharbor/prepare镜像中。\n\n每次启动Harbor实例时，它的数据库模式都是自动升级的，其原理为：Harbor在每次启动时都会调用第三方库 “golang-migrate”，它会检测当前数据库模式的版本，如果实例的版本比当前数据库的版本更高，则会自动升级。\n\n$ docker run -v /:/hostfs goharbor/prepare:v2.0.0 migrate -i ${harbor.yml路径}\n\n\n1\n",normalizedContent:"# harbor升级数据库迁移及回滚\n\n\n# harbor安装\n\n 1. 下载docker-compose\n 2. 下载，解压harbor离线包\n 3. 修改配置harbor.yml.tmpl>harbor.yml及生成证书等\n 4. 安装并启动：./install.sh\n\n\n# harbor升级（大于v1.10.x到更新版本）\n\nharbor不同阶段的升级方式不同，存在兼容性问题，有些版本无法直接跨版本升级，需要多阶段升级方式达到最终升级目的 自harborv2起，迁移工具全部转移到了 goharbor/prepare 这个镜像中\n\n 1. 到github下载2.4.2版本的离线包（包含镜像goharbor/prepare）\n 2. 准备迁移工具镜像goharbor/prepare\n 3. 停止harbor\n 4. 备份数据库和安装目录\n 5. 解压离线包到安装目录\n 6. 移动旧的配置文件到新的安装目录下\n 7. 数据迁移：docker run -it --rm -v /:/hostfs goharbor/prepare:v2.4.2 migrate -i /opt/harbor/harbor.yml （此更新包括数据库模式（schema）和配置文件数据）\n 8. 安装并启动：./install.sh\n\n\n# harbor回滚\n\n 1. 停止harbor\n 2. 删除安装目录和数据库文件\n 3. 将备份目录和备份数据库还原回安装目录和数据库目录\n 4. 安装并启动：./install.sh\n\n\n# harbor数据库迁移及golang-migrate\n\n数据库升级是自动完成的，用户手动执行升级配置文件的命令行工具包。此工具包与harbor一同发布，被包含在goharbor/prepare镜像中。\n\n每次启动harbor实例时，它的数据库模式都是自动升级的，其原理为：harbor在每次启动时都会调用第三方库 “golang-migrate”，它会检测当前数据库模式的版本，如果实例的版本比当前数据库的版本更高，则会自动升级。\n\n$ docker run -v /:/hostfs goharbor/prepare:v2.0.0 migrate -i ${harbor.yml路径}\n\n\n1\n",charsets:{cjk:!0}},{title:"helm chart",frontmatter:{title:"helm chart",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/b685a0/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"helm chart"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/14.helm%20chart.html"},{property:"og:type",content:"article"},{property:"og:title",content:"helm chart"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/14.helm%20chart.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"helm chart"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/14.helm%20chart.html",relativePath:"01.技术杂谈/03.kubernetes/14.helm chart.md",key:"v-6da5591e",path:"/pages/b685a0/",headersStr:null,content:"# helm命令：\n\nhelm create myservice helm install . helm install myservice --name myservice --namespace hfftest helm list helm package .\n\nhelm ls --all hfftest helm del --purge hfftest\n\n\n# examples/\n\nChart.yaml # Yaml文件，用于描述Chart的基本信息，包括名称版本等 LICENSE # [可选] 协议 README.md # [可选] 当前Chart的介绍 values.yaml # Chart的默认配置文件 requirements.yaml # [可选] 用于存放当前Chart依赖的其它Chart的说明文件 charts/ # [可选]: 该目录中放置当前Chart依赖的其它Chart templates/ # [可选]: 部署文件模版目录，模版使用的值来自values.yaml和由Tiller提供的值 templates/NOTES.txt # [可选]: 放置Chart的使用指南",normalizedContent:"# helm命令：\n\nhelm create myservice helm install . helm install myservice --name myservice --namespace hfftest helm list helm package .\n\nhelm ls --all hfftest helm del --purge hfftest\n\n\n# examples/\n\nchart.yaml # yaml文件，用于描述chart的基本信息，包括名称版本等 license # [可选] 协议 readme.md # [可选] 当前chart的介绍 values.yaml # chart的默认配置文件 requirements.yaml # [可选] 用于存放当前chart依赖的其它chart的说明文件 charts/ # [可选]: 该目录中放置当前chart依赖的其它chart templates/ # [可选]: 部署文件模版目录，模版使用的值来自values.yaml和由tiller提供的值 templates/notes.txt # [可选]: 放置chart的使用指南",charsets:{cjk:!0}},{title:"Loongnix mips64",frontmatter:{title:"Loongnix mips64",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/1bc186/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"[TOC]",meta:[{name:"twitter:title",content:"Loongnix mips64"},{name:"twitter:description",content:"[TOC]"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/15.Loongnix%20mips64.html"},{property:"og:type",content:"article"},{property:"og:title",content:"Loongnix mips64"},{property:"og:description",content:"[TOC]"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/15.Loongnix%20mips64.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"Loongnix mips64"},{itemprop:"description",content:"[TOC]"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/15.Loongnix%20mips64.html",relativePath:"01.技术杂谈/03.kubernetes/15.Loongnix mips64.md",key:"v-211c03e0",path:"/pages/1bc186/",headers:[{level:2,title:"yum源修改：",slug:"yum源修改",normalizedTitle:"yum源修改：",charIndex:338},{level:2,title:"apt源：",slug:"apt源",normalizedTitle:"apt源：",charIndex:834},{level:2,title:"Loongnix-20.mips64el系统源地址",slug:"loongnix-20-mips64el系统源地址",normalizedTitle:"loongnix-20.mips64el系统源地址",charIndex:1375},{level:2,title:"龙芯NPM源",slug:"龙芯npm源",normalizedTitle:"龙芯npm源",charIndex:1720}],headersStr:"yum源修改： apt源： Loongnix-20.mips64el系统源地址 龙芯NPM源",content:'[TOC]\n\n\n# 龙芯mips64\n\n\n# 社区适配情况：\n\n龙芯平台已适配了MIPS下的loongnix-Server以及Debian10对应的版本：nodejs-v12.16.3，LoongArch下的Loongnix-20.loongarch64桌面系统以及Loongnix-server-20.loongarch64服务器系统对应的版本: nodejs-v14.16.1，并将持续维护，力争为用户提供好用的开发环境。\n\n * mips: loongnix-Server Debian10\n * LoongArch: Loongnix-20.loongarch64桌面系统 Loongnix-server-20.loongarch64服务器系统\n\n\n# 源：\n\n\n# yum源修改：\n\nyum install epel-release -y\n\nvi  /etc/yum.repos.d/Loongnix-Base.repo\norg>cn\nsed -i \'s/org/cn/g\' /etc/yum.repos.d/Loongnix-Base.repo \nyum clean all \nyum makecache\n\nyum install epel-release -y && cp /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel-test.repo && sed -i s/ftp.loongnix.org/10.2.5.28/g /etc/yum.repos.d/epel-test.repo && yum makecache && yum install git which gcc g++ libatomic gpg tar openssl11 -y\n\nyum install epel-release -y && yum makecache\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# apt源：\n\necho "deb http://os.loongnix.org/mirrors/debian/debian/ buster main" >> /etc/apt/sources.list\n\necho "deb http://mirrors.163.com/debian/ buster main contrib non-free" > /etc/apt/sources.list && echo "deb http://mirrors.163.com/debian/ buster-updates main contrib non-free" >> /etc/apt/sources.list && echo "deb http://mirrors.163.com/debian/ buster-backports main contrib non-free" >> /etc/apt/sources.list && echo "deb http://mirrors.163.com/debian-security buster/updates main contrib non-free" >> /etc/apt/sources.list\n\n\n1\n2\n3\n\n\n\n# Loongnix-20.mips64el系统源地址\n\ndeb [trusted=yes] http://ftp.loongnix.org/os/loongnix/20/mips64el/ DaoXiangHu-testing main contrib non-free \ndeb-src [trusted=yes] http://ftp.loongnix.org/os/loongnix/20/mips64el/ DaoXiangHu-testing main contrib non-free\nLoongnix-server-1.7.2007 服务器系统源地址\nhttp://ftp.loongnix.org/os/loongnix-server/1.7/\n\n\n1\n2\n3\n4\n\n\n\n# 龙芯NPM源\n\n源地址1：http://npm.loongnix.cn:4873 源地址2：http://registry.loongnix.cn:4873\n\n\n# harbor\n\n用户名: loongsoncloud 密码: loongson@SYS3\n\n执行以下命令编辑/etc/docker/daemon.json，增加insecure-registries的配置，重新加载并重启docker使配置生效\n\nmkdir -p /etc/docker/\ntee /etc/docker/daemon.json <<-‘EOF’\n{\n“insecure-registries”:[“harbor.loongnix.cn”]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl enable docker\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 参考资料\n\nhttp://doc.loongnix.cn/web/#/50?page_id=146 龙芯Docker安装手册 http://ftp.loongnix.cn/ 龙芯开源社区ftp下载站点 http://www.loongnix.cn/index.php/Container-Registry Loongarch架构的软件仓库站点 http://ask.loongnix.cn/?/search/q-bm9kZWpz#all',normalizedContent:'[toc]\n\n\n# 龙芯mips64\n\n\n# 社区适配情况：\n\n龙芯平台已适配了mips下的loongnix-server以及debian10对应的版本：nodejs-v12.16.3，loongarch下的loongnix-20.loongarch64桌面系统以及loongnix-server-20.loongarch64服务器系统对应的版本: nodejs-v14.16.1，并将持续维护，力争为用户提供好用的开发环境。\n\n * mips: loongnix-server debian10\n * loongarch: loongnix-20.loongarch64桌面系统 loongnix-server-20.loongarch64服务器系统\n\n\n# 源：\n\n\n# yum源修改：\n\nyum install epel-release -y\n\nvi  /etc/yum.repos.d/loongnix-base.repo\norg>cn\nsed -i \'s/org/cn/g\' /etc/yum.repos.d/loongnix-base.repo \nyum clean all \nyum makecache\n\nyum install epel-release -y && cp /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel-test.repo && sed -i s/ftp.loongnix.org/10.2.5.28/g /etc/yum.repos.d/epel-test.repo && yum makecache && yum install git which gcc g++ libatomic gpg tar openssl11 -y\n\nyum install epel-release -y && yum makecache\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# apt源：\n\necho "deb http://os.loongnix.org/mirrors/debian/debian/ buster main" >> /etc/apt/sources.list\n\necho "deb http://mirrors.163.com/debian/ buster main contrib non-free" > /etc/apt/sources.list && echo "deb http://mirrors.163.com/debian/ buster-updates main contrib non-free" >> /etc/apt/sources.list && echo "deb http://mirrors.163.com/debian/ buster-backports main contrib non-free" >> /etc/apt/sources.list && echo "deb http://mirrors.163.com/debian-security buster/updates main contrib non-free" >> /etc/apt/sources.list\n\n\n1\n2\n3\n\n\n\n# loongnix-20.mips64el系统源地址\n\ndeb [trusted=yes] http://ftp.loongnix.org/os/loongnix/20/mips64el/ daoxianghu-testing main contrib non-free \ndeb-src [trusted=yes] http://ftp.loongnix.org/os/loongnix/20/mips64el/ daoxianghu-testing main contrib non-free\nloongnix-server-1.7.2007 服务器系统源地址\nhttp://ftp.loongnix.org/os/loongnix-server/1.7/\n\n\n1\n2\n3\n4\n\n\n\n# 龙芯npm源\n\n源地址1：http://npm.loongnix.cn:4873 源地址2：http://registry.loongnix.cn:4873\n\n\n# harbor\n\n用户名: loongsoncloud 密码: loongson@sys3\n\n执行以下命令编辑/etc/docker/daemon.json，增加insecure-registries的配置，重新加载并重启docker使配置生效\n\nmkdir -p /etc/docker/\ntee /etc/docker/daemon.json <<-‘eof’\n{\n“insecure-registries”:[“harbor.loongnix.cn”]\n}\neof\nsudo systemctl daemon-reload\nsudo systemctl enable docker\nsudo systemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 参考资料\n\nhttp://doc.loongnix.cn/web/#/50?page_id=146 龙芯docker安装手册 http://ftp.loongnix.cn/ 龙芯开源社区ftp下载站点 http://www.loongnix.cn/index.php/container-registry loongarch架构的软件仓库站点 http://ask.loongnix.cn/?/search/q-bm9kzwpz#all',charsets:{cjk:!0}},{title:"nvidia-device-plugin",frontmatter:{title:"nvidia-device-plugin",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/717c4b/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"nvidia-device-plugin"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/16.nvidia-device-plugin.html"},{property:"og:type",content:"article"},{property:"og:title",content:"nvidia-device-plugin"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/16.nvidia-device-plugin.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"nvidia-device-plugin"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/16.nvidia-device-plugin.html",relativePath:"01.技术杂谈/03.kubernetes/16.nvidia-device-plugin.md",key:"v-3a9f53ca",path:"/pages/717c4b/",headers:[{level:2,title:"安装方法",slug:"安装方法",normalizedTitle:"安装方法",charIndex:40},{level:2,title:"使用方法",slug:"使用方法",normalizedTitle:"使用方法",charIndex:3405},{level:3,title:"docker",slug:"docker",normalizedTitle:"docker",charIndex:1844},{level:3,title:"k8s",slug:"k8s",normalizedTitle:"k8s",charIndex:2}],headersStr:"安装方法 使用方法 docker k8s",content:'# k8s英伟达GPU插件（nvidia-device-plugin）\n\n\n# 安装方法\n\nhttps://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html\n\n 1. 本地节点添加 NVIDIA 驱动程序 要求：NVIDIA drivers ~= 384.81 先确保你的主机上的 NVIDIA 驱动程序正常工作，你应该能够成功运行 nvidia-smi 并查看你的 GPU 名称、驱动程序版本和 CUDA 版本\n\n$ nvidia-smi\nThu Jul 14 11:49:33 2022\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 515.57       Driver Version: 515.57       CUDA Version: 11.7     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:02:00.0 Off |                  N/A |\n|  0%   48C    P8    11W / 200W |      0MiB /  8192MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n需要注意的是，第一次安装显卡驱动的话，是不用重启服务器的\n\n 2. 本地节点安装nvidia-docker或nvidia-container-toolkit\n\nnvidia-docker >= 2.0 || nvidia-container-toolkit >= 1.7.0\n\n运行NVIDIA Container Toolkit的条件：\n\n * 内核版本 > 3.10 的 GNU/Linux x86_64\n * Docker >= 19.03（推荐，但某些发行版可能包含旧版本的 Docker。支持的最低版本为 1.12）\n * 架构 >= Kepler（或计算能力 3.0）的 NVIDIA GPU\n * NVIDIA Linux 驱动程序>= 418.81.07（请注意，不支持较旧的驱动程序版本或分支。）\n\n如：centos, nvidia-container-toolkit\n\n$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo\n$ yum install -y nvidia-container-toolkit\n$ rpm -qa | grep nvidia\nlibnvidia-container-tools-1.10.0-1.x86_64\nlibnvidia-container1-1.10.0-1.x86_64\nnvidia-container-toolkit-1.10.0-1.x86_64\n\n\n1\n2\n3\n4\n5\n6\n\n 3. 每个节点Docker的默认运行时设置为 nvidia-container-runtime\n\n$ cat /etc/docker/daemon.json\n{\n    "default-runtime":"nvidia",\n    "runtimes": {\n        "nvidia": {\n            "path":"/usr/bin/nvidia-container-runtime",\n            "runtimeArgs": []\n        }\n    }\n}\n\n$ systemctl daemon-reload\n$ systemctl restart docker\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n 4. 部署 NVIDIA 设备插件: kubectl create -f nvidia-device-plugin.yml\n\n#1.0.0-beta4\n$ docker pull nvidia/k8s-device-plugin:1.0.0-beta4\n$ kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/1.0.0-beta4/nvidia-device-plugin.yml\n# 或1.12\n$ docker pull nvidia/k8s-device-plugin:1.11\n$ kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v1.12/nvidia-device-plugin.yml\n\n\n1\n2\n3\n4\n5\n6\n\n 5. 检查： Kubernetes将暴露 amd.com/gpu或nvidia.com/gpu为可调度的资源\n\n$ kubectl describe node | grep nvidia.com/gpu\n\n\n1\n\n\n\n# 使用方法\n\n\n# docker\n\n$ docker run --name hfftest --rm -it --gpus all nvidia/cuda:10.0-base nvidia-smi\nThu Jul 14 04:54:04 2022\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 515.57       Driver Version: 515.57       CUDA Version: 11.7     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:02:00.0 Off |                  N/A |\n| 21%   49C    P8    16W / 200W |      0MiB /  8192MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# k8s\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-gpu\nspec:\n  restartPolicy: OnFailure\n  containers:\n    - name: test-gpu\n      image: "k8s.gcr.io/cuda-vector-add:v0.1"\n      resources:\n        limits:\n          nvidia.com/gpu: 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n一些限制的：\n\n * GPUs 只能设置在 limits 部分，这意味着：\n\n> 你可以指定 GPU 的 limits 而不指定其 requests，Kubernetes 将使用限制 值作为默认的请求值； 你可以同时指定 limits 和 requests，不过这两个值必须相等。 你不可以仅指定 requests 而不指定 limits。\n\n * 容器（以及 Pod）之间是不共享 GPU 的。GPU 也不可以过量分配（Overcommitting）。\n * 每个容器可以请求一个或者多个 GPU，但是用小数值来请求部分 GPU 是不允许的。\n\n\n# 参考\n\n * https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html\n * https://kubernetes.io/zh-cn/docs/tasks/manage-gpus/scheduling-gpus/#deploying-nvidia-gpu-device-plugin\n * https://github.com/NVIDIA/k8s-device-plugin\n\n\n# 在k8s中实现共享GPU调度(GPUshare)\n\n阿里云服务团队贡献的 GPU 共享的调度方案，其目的在于解决用户共享 GPU 调度的需求Kubernetes GPU共享实践 gpushare-scheduler-extender gpushare-device-plugin',normalizedContent:'# k8s英伟达gpu插件（nvidia-device-plugin）\n\n\n# 安装方法\n\nhttps://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html\n\n 1. 本地节点添加 nvidia 驱动程序 要求：nvidia drivers ~= 384.81 先确保你的主机上的 nvidia 驱动程序正常工作，你应该能够成功运行 nvidia-smi 并查看你的 gpu 名称、驱动程序版本和 cuda 版本\n\n$ nvidia-smi\nthu jul 14 11:49:33 2022\n+-----------------------------------------------------------------------------+\n| nvidia-smi 515.57       driver version: 515.57       cuda version: 11.7     |\n|-------------------------------+----------------------+----------------------+\n| gpu  name        persistence-m| bus-id        disp.a | volatile uncorr. ecc |\n| fan  temp  perf  pwr:usage/cap|         memory-usage | gpu-util  compute m. |\n|                               |                      |               mig m. |\n|===============================+======================+======================|\n|   0  nvidia geforce ...  off  | 00000000:02:00.0 off |                  n/a |\n|  0%   48c    p8    11w / 200w |      0mib /  8192mib |      0%      default |\n|                               |                      |                  n/a |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| processes:                                                                  |\n|  gpu   gi   ci        pid   type   process name                  gpu memory |\n|        id   id                                                   usage      |\n|=============================================================================|\n|  no running processes found                                                 |\n+-----------------------------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n需要注意的是，第一次安装显卡驱动的话，是不用重启服务器的\n\n 2. 本地节点安装nvidia-docker或nvidia-container-toolkit\n\nnvidia-docker >= 2.0 || nvidia-container-toolkit >= 1.7.0\n\n运行nvidia container toolkit的条件：\n\n * 内核版本 > 3.10 的 gnu/linux x86_64\n * docker >= 19.03（推荐，但某些发行版可能包含旧版本的 docker。支持的最低版本为 1.12）\n * 架构 >= kepler（或计算能力 3.0）的 nvidia gpu\n * nvidia linux 驱动程序>= 418.81.07（请注意，不支持较旧的驱动程序版本或分支。）\n\n如：centos, nvidia-container-toolkit\n\n$ curl -s -l https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo\n$ yum install -y nvidia-container-toolkit\n$ rpm -qa | grep nvidia\nlibnvidia-container-tools-1.10.0-1.x86_64\nlibnvidia-container1-1.10.0-1.x86_64\nnvidia-container-toolkit-1.10.0-1.x86_64\n\n\n1\n2\n3\n4\n5\n6\n\n 3. 每个节点docker的默认运行时设置为 nvidia-container-runtime\n\n$ cat /etc/docker/daemon.json\n{\n    "default-runtime":"nvidia",\n    "runtimes": {\n        "nvidia": {\n            "path":"/usr/bin/nvidia-container-runtime",\n            "runtimeargs": []\n        }\n    }\n}\n\n$ systemctl daemon-reload\n$ systemctl restart docker\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n 4. 部署 nvidia 设备插件: kubectl create -f nvidia-device-plugin.yml\n\n#1.0.0-beta4\n$ docker pull nvidia/k8s-device-plugin:1.0.0-beta4\n$ kubectl create -f https://raw.githubusercontent.com/nvidia/k8s-device-plugin/1.0.0-beta4/nvidia-device-plugin.yml\n# 或1.12\n$ docker pull nvidia/k8s-device-plugin:1.11\n$ kubectl create -f https://raw.githubusercontent.com/nvidia/k8s-device-plugin/v1.12/nvidia-device-plugin.yml\n\n\n1\n2\n3\n4\n5\n6\n\n 5. 检查： kubernetes将暴露 amd.com/gpu或nvidia.com/gpu为可调度的资源\n\n$ kubectl describe node | grep nvidia.com/gpu\n\n\n1\n\n\n\n# 使用方法\n\n\n# docker\n\n$ docker run --name hfftest --rm -it --gpus all nvidia/cuda:10.0-base nvidia-smi\nthu jul 14 04:54:04 2022\n+-----------------------------------------------------------------------------+\n| nvidia-smi 515.57       driver version: 515.57       cuda version: 11.7     |\n|-------------------------------+----------------------+----------------------+\n| gpu  name        persistence-m| bus-id        disp.a | volatile uncorr. ecc |\n| fan  temp  perf  pwr:usage/cap|         memory-usage | gpu-util  compute m. |\n|                               |                      |               mig m. |\n|===============================+======================+======================|\n|   0  nvidia geforce ...  off  | 00000000:02:00.0 off |                  n/a |\n| 21%   49c    p8    16w / 200w |      0mib /  8192mib |      0%      default |\n|                               |                      |                  n/a |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| processes:                                                                  |\n|  gpu   gi   ci        pid   type   process name                  gpu memory |\n|        id   id                                                   usage      |\n|=============================================================================|\n|  no running processes found                                                 |\n+-----------------------------------------------------------------------------+\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# k8s\n\napiversion: v1\nkind: pod\nmetadata:\n  name: test-gpu\nspec:\n  restartpolicy: onfailure\n  containers:\n    - name: test-gpu\n      image: "k8s.gcr.io/cuda-vector-add:v0.1"\n      resources:\n        limits:\n          nvidia.com/gpu: 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n一些限制的：\n\n * gpus 只能设置在 limits 部分，这意味着：\n\n> 你可以指定 gpu 的 limits 而不指定其 requests，kubernetes 将使用限制 值作为默认的请求值； 你可以同时指定 limits 和 requests，不过这两个值必须相等。 你不可以仅指定 requests 而不指定 limits。\n\n * 容器（以及 pod）之间是不共享 gpu 的。gpu 也不可以过量分配（overcommitting）。\n * 每个容器可以请求一个或者多个 gpu，但是用小数值来请求部分 gpu 是不允许的。\n\n\n# 参考\n\n * https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html\n * https://kubernetes.io/zh-cn/docs/tasks/manage-gpus/scheduling-gpus/#deploying-nvidia-gpu-device-plugin\n * https://github.com/nvidia/k8s-device-plugin\n\n\n# 在k8s中实现共享gpu调度(gpushare)\n\n阿里云服务团队贡献的 gpu 共享的调度方案，其目的在于解决用户共享 gpu 调度的需求kubernetes gpu共享实践 gpushare-scheduler-extender gpushare-device-plugin',charsets:{cjk:!0}},{title:"openebs-lvm-localpv",frontmatter:{title:"openebs-lvm-localpv",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/4be786/",categories:["技术杂谈","kubernetes"],tags:[null],titleTag:"原创",readingShow:"top",description:"https://github.com/openebs/lvm-localpv",meta:[{name:"twitter:title",content:"openebs-lvm-localpv"},{name:"twitter:description",content:"https://github.com/openebs/lvm-localpv"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/17.openebs-lvm-localpv.html"},{property:"og:type",content:"article"},{property:"og:title",content:"openebs-lvm-localpv"},{property:"og:description",content:"https://github.com/openebs/lvm-localpv"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/17.openebs-lvm-localpv.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"openebs-lvm-localpv"},{itemprop:"description",content:"https://github.com/openebs/lvm-localpv"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/17.openebs-lvm-localpv.html",relativePath:"01.技术杂谈/03.kubernetes/17.openebs-lvm-localpv.md",key:"v-6e77716d",path:"/pages/4be786/",headers:[{level:2,title:"创建pv",slug:"创建pv",normalizedTitle:"创建pv",charIndex:50},{level:2,title:"创建vg",slug:"创建vg",normalizedTitle:"创建vg",charIndex:141}],headersStr:"创建pv 创建vg",content:'https://github.com/openebs/lvm-localpv\n\n\n# pv\n\n\n# 创建pv\n\npvname=${disk}1\n\nsgdisk -n 1:2048 ${disk} pvcreate ${pvname} pvdisplay ${pvname}\n\n\n# 创建vg\n\nvgcreate ${vgname} ${pvname} vgextend ${vgname} ${pvname} pvdisplay ${pvname} | grep ${vgname}\n\n\n# deploy\n\n$ kubectl apply -f https://openebs.github.io/charts/lvm-operator.yaml\n\n\n# 应用\n\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: openebs-lvmpv\nallowVolumeExpansion: true\nparameters:\n  storage: "lvm"\n  volgroup: "lvmvg"\nprovisioner: local.csi.openebs.io\nallowedTopologies:\n- matchLabelExpressions:\n  - key: kubernetes.io/hostname\n    values:\n      - lvmpv-node1\n      - lvmpv-node2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nvolgroup：选择vg allowedTopologies: 选择节点\n\n\n# disk回收\n\npvname=${disk}1\n\nvgremove ${vgname} 或 vgreduce ${vgname} ${pvname}\n\npvremove ${pvname}\n\npvdisplay ${pvname}\n\nsgdisk --zap-all --clear --mbrtogpt ${disk}',normalizedContent:'https://github.com/openebs/lvm-localpv\n\n\n# pv\n\n\n# 创建pv\n\npvname=${disk}1\n\nsgdisk -n 1:2048 ${disk} pvcreate ${pvname} pvdisplay ${pvname}\n\n\n# 创建vg\n\nvgcreate ${vgname} ${pvname} vgextend ${vgname} ${pvname} pvdisplay ${pvname} | grep ${vgname}\n\n\n# deploy\n\n$ kubectl apply -f https://openebs.github.io/charts/lvm-operator.yaml\n\n\n# 应用\n\napiversion: storage.k8s.io/v1\nkind: storageclass\nmetadata:\n  name: openebs-lvmpv\nallowvolumeexpansion: true\nparameters:\n  storage: "lvm"\n  volgroup: "lvmvg"\nprovisioner: local.csi.openebs.io\nallowedtopologies:\n- matchlabelexpressions:\n  - key: kubernetes.io/hostname\n    values:\n      - lvmpv-node1\n      - lvmpv-node2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nvolgroup：选择vg allowedtopologies: 选择节点\n\n\n# disk回收\n\npvname=${disk}1\n\nvgremove ${vgname} 或 vgreduce ${vgname} ${pvname}\n\npvremove ${pvname}\n\npvdisplay ${pvname}\n\nsgdisk --zap-all --clear --mbrtogpt ${disk}',charsets:{cjk:!0}},{title:"docker基础",frontmatter:{title:"docker基础",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/f23c30/",categories:["技术杂谈","kubernetes","docker"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"docker基础"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/00.docker%E5%9F%BA%E7%A1%80.html"},{property:"og:type",content:"article"},{property:"og:title",content:"docker基础"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/00.docker%E5%9F%BA%E7%A1%80.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"docker基础"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/00.docker%E5%9F%BA%E7%A1%80.html",relativePath:"01.技术杂谈/03.kubernetes/300.docker/00.docker基础.md",key:"v-77ff5797",path:"/pages/f23c30/",headersStr:null,content:'# 虚悬镜像\n\n镜像列表中，可能会看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为\n\n<none>               <none>              00285df0df87        5 days ago          342 MB\n\n\n1\n\n\n原因有可能是官方镜像维护，发布了新版本后，原镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 。除了 docker pull 可能导致这种情况，docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像：\n\ndocker image ls -f dangling=true\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago          342 MB\n\n\n1\n2\n3\n\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\ndocker image prune\n\n\n1\n\n\n??实测无法全部删完\n\n\n# 中间层镜像\n\n默认的 docker image ls 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。\n\ndocker image ls -a\n\n\n1\n\n\n\n# 一些命令技巧\n\n * 只输出镜像ID和仓库名：\n\n$ docker image ls --format "{{.ID}}:{{.Repository}}"\n5f515359c7f8: redis\n05a60462f8ba: nginx\nfe9198c04d62: mongo\n00285df0df87: <none>\n329ed837d508: ubuntu\n329ed837d508: ubuntu\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 只输出id列\n\ndocker image ls -q\n\n\n1\n\n * 删除所有仓库名为 redis 的镜像\n\n$ docker image rm $(docker image ls -q redis)\n\n\n1\n\n\n\n# 重启docker不影响pod\n\n/etc/docker/daemon.json配置文件中设置 { "live-restore": true }',normalizedContent:'# 虚悬镜像\n\n镜像列表中，可能会看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为\n\n<none>               <none>              00285df0df87        5 days ago          342 mb\n\n\n1\n\n\n原因有可能是官方镜像维护，发布了新版本后，原镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 。除了 docker pull 可能导致这种情况，docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像：\n\ndocker image ls -f dangling=true\nrepository          tag                 image id            created             size\n<none>              <none>              00285df0df87        5 days ago          342 mb\n\n\n1\n2\n3\n\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\ndocker image prune\n\n\n1\n\n\n??实测无法全部删完\n\n\n# 中间层镜像\n\n默认的 docker image ls 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。\n\ndocker image ls -a\n\n\n1\n\n\n\n# 一些命令技巧\n\n * 只输出镜像id和仓库名：\n\n$ docker image ls --format "{{.id}}:{{.repository}}"\n5f515359c7f8: redis\n05a60462f8ba: nginx\nfe9198c04d62: mongo\n00285df0df87: <none>\n329ed837d508: ubuntu\n329ed837d508: ubuntu\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 只输出id列\n\ndocker image ls -q\n\n\n1\n\n * 删除所有仓库名为 redis 的镜像\n\n$ docker image rm $(docker image ls -q redis)\n\n\n1\n\n\n\n# 重启docker不影响pod\n\n/etc/docker/daemon.json配置文件中设置 { "live-restore": true }',charsets:{cjk:!0}},{title:"buildx多平台构建",frontmatter:{title:"buildx多平台构建",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/f7bcff/",categories:["技术杂谈","kubernetes","docker"],tags:[null],titleTag:"原创",readingShow:"top",description:"Docker的多架构支持是基于不同cpu的架构而不是不同操作系统的架构",meta:[{name:"twitter:title",content:"buildx多平台构建"},{name:"twitter:description",content:"Docker的多架构支持是基于不同cpu的架构而不是不同操作系统的架构"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/01.buildx%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA.html"},{property:"og:type",content:"article"},{property:"og:title",content:"buildx多平台构建"},{property:"og:description",content:"Docker的多架构支持是基于不同cpu的架构而不是不同操作系统的架构"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/01.buildx%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"buildx多平台构建"},{itemprop:"description",content:"Docker的多架构支持是基于不同cpu的架构而不是不同操作系统的架构"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/01.buildx%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA.html",relativePath:"01.技术杂谈/03.kubernetes/300.docker/01.buildx多平台构建.md",key:"v-256d06ea",path:"/pages/f7bcff/",headers:[{level:2,title:"环境要求",slug:"环境要求",normalizedTitle:"环境要求",charIndex:286},{level:2,title:"构建镜像",slug:"构建镜像",normalizedTitle:"构建镜像",charIndex:827}],headersStr:"环境要求 构建镜像",content:"Docker的多架构支持是基于不同cpu的架构而不是不同操作系统的架构\n\n\n# 跨 CPU 架构编译程序的方法\n\n 1. 直接在目标硬件上编译（常用）\n 2. 模拟目标硬件\n 3. 通过 binfmt_misc 模拟目标硬件的用户空间\n 4. 使用交叉编译器\n\n\n# buildx\n\nDocker 19.03 引入的插件 buildx buildx 会通过 QEMU 和 binfmt_misc 分别为不同的 CPU 架构（arm，arm64 和 amd64等）构建不同的镜像。构建完成后，就会创建一个 manifest list，其中包含了指向这些镜像的指针。\n\n\n# 环境要求\n\n * 要确保 Docker 版本不低于 19.03，同时还要通过设置环境变量 DOCKER_CLI_EXPERIMENTAL 来启用\n\n * 如果你使用的是 Linux，需要手动启用 binfmt_misc 大多数 Linux 发行版都很容易启用，不过还有一个更容易的办法，直接运行一个特权容器，容器里面写好了设置脚本： 🐳 → docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d 建议将 Linux 内核版本升级到 4.x 以上，特别是 CentOS 用户，你可能会遇到错误。 cat /proc/sys/fs/binfmt_misc/qemu-aarch64\n\n * Docker 默认会使用不支持多 CPU 架构的构建器，我们需要手动切换。 先创建一个新的构建器：docker buildx create --use --name mybuilder 启动构建器： docker buildx inspect mybuilder --bootstrap 查看当前使用的构建器及构建器支持的 CPU 架构：docker buildx ls\n\n\n# 构建镜像\n\ndocker buildx build -t yangchuansheng/hello-arch --platform=linux/arm,linux/arm64,linux/amd64 . --push\n\n如果想将构建好的镜像保存在本地，可以将 type 指定为 docker，但必须分别为不同的 CPU 架构构建不同的镜像，不能合并成一个镜像 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm -o type=docker . 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm64 -o type=docker . 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/amd64 -o type=docker .",normalizedContent:"docker的多架构支持是基于不同cpu的架构而不是不同操作系统的架构\n\n\n# 跨 cpu 架构编译程序的方法\n\n 1. 直接在目标硬件上编译（常用）\n 2. 模拟目标硬件\n 3. 通过 binfmt_misc 模拟目标硬件的用户空间\n 4. 使用交叉编译器\n\n\n# buildx\n\ndocker 19.03 引入的插件 buildx buildx 会通过 qemu 和 binfmt_misc 分别为不同的 cpu 架构（arm，arm64 和 amd64等）构建不同的镜像。构建完成后，就会创建一个 manifest list，其中包含了指向这些镜像的指针。\n\n\n# 环境要求\n\n * 要确保 docker 版本不低于 19.03，同时还要通过设置环境变量 docker_cli_experimental 来启用\n\n * 如果你使用的是 linux，需要手动启用 binfmt_misc 大多数 linux 发行版都很容易启用，不过还有一个更容易的办法，直接运行一个特权容器，容器里面写好了设置脚本： 🐳 → docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d 建议将 linux 内核版本升级到 4.x 以上，特别是 centos 用户，你可能会遇到错误。 cat /proc/sys/fs/binfmt_misc/qemu-aarch64\n\n * docker 默认会使用不支持多 cpu 架构的构建器，我们需要手动切换。 先创建一个新的构建器：docker buildx create --use --name mybuilder 启动构建器： docker buildx inspect mybuilder --bootstrap 查看当前使用的构建器及构建器支持的 cpu 架构：docker buildx ls\n\n\n# 构建镜像\n\ndocker buildx build -t yangchuansheng/hello-arch --platform=linux/arm,linux/arm64,linux/amd64 . --push\n\n如果想将构建好的镜像保存在本地，可以将 type 指定为 docker，但必须分别为不同的 cpu 架构构建不同的镜像，不能合并成一个镜像 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm -o type=docker . 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/arm64 -o type=docker . 🐳 → docker buildx build -t yangchuansheng/hello-arch --platform=linux/amd64 -o type=docker .",charsets:{cjk:!0}},{title:"dockerfile改源",frontmatter:{title:"dockerfile改源",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/4b6bd5/",categories:["技术杂谈","kubernetes","docker"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"dockerfile改源"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/02.dockerfile%E6%94%B9%E6%BA%90.html"},{property:"og:type",content:"article"},{property:"og:title",content:"dockerfile改源"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/02.dockerfile%E6%94%B9%E6%BA%90.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"dockerfile改源"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/02.dockerfile%E6%94%B9%E6%BA%90.html",relativePath:"01.技术杂谈/03.kubernetes/300.docker/02.dockerfile改源.md",key:"v-395859ae",path:"/pages/4b6bd5/",headersStr:null,content:'# apk源\n\nFROM alpine:3.14\n\nRUN sed -i \'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\' /etc/apk/repositories\n\nRUN apk update\n\n\n1\n2\n3\n4\n5\n\n\nFROM golang:${GO_VER}-alpine${ALPINE_VER} as golang\nRUN sed -i \'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\' /etc/apk/repositories    #新加的\nRUN apk add --no-cache \\\n\tbash \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# apt源\n\nFROM debian\n\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo "deb http://mirrors.cloud.aliyuncs.com/debian stable main contrib non-free" >/etc/apt/sources.list && \\\n    echo "deb http://mirrors.cloud.aliyuncs.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb http://mirrors.cloud.aliyuncs.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb-src http://mirrors.cloud.aliyuncs.com/debian stable main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb-src http://mirrors.cloud.aliyuncs.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb-src http://mirrors.cloud.aliyuncs.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb http://mirrors.aliyun.com/debian stable main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb http://mirrors.aliyun.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb http://mirrors.aliyun.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb-src http://mirrors.aliyun.com/debian stable main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb-src http://mirrors.aliyun.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb-src http://mirrors.aliyun.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install procps -y --allow-unauthenticated && \\\n    apt-get install telnetd -y --allow-unauthenticated && \\\n    apt-get install telnet -y --allow-unauthenticated && \\\n    apt-get install wget -y --allow-unauthenticated\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',normalizedContent:'# apk源\n\nfrom alpine:3.14\n\nrun sed -i \'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\' /etc/apk/repositories\n\nrun apk update\n\n\n1\n2\n3\n4\n5\n\n\nfrom golang:${go_ver}-alpine${alpine_ver} as golang\nrun sed -i \'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g\' /etc/apk/repositories    #新加的\nrun apk add --no-cache \\\n\tbash \\\n\tgcc \\\n\tgit \\\n\tmake \\\n\tmusl-dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# apt源\n\nfrom debian\n\nrun mv /etc/apt/sources.list /etc/apt/sources.list.bak && \\\n    echo "deb http://mirrors.cloud.aliyuncs.com/debian stable main contrib non-free" >/etc/apt/sources.list && \\\n    echo "deb http://mirrors.cloud.aliyuncs.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb http://mirrors.cloud.aliyuncs.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb-src http://mirrors.cloud.aliyuncs.com/debian stable main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb-src http://mirrors.cloud.aliyuncs.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb-src http://mirrors.cloud.aliyuncs.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb http://mirrors.aliyun.com/debian stable main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb http://mirrors.aliyun.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb http://mirrors.aliyun.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list  && \\\n    echo "deb-src http://mirrors.aliyun.com/debian stable main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb-src http://mirrors.aliyun.com/debian stable-proposed-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    echo "deb-src http://mirrors.aliyun.com/debian stable-updates main contrib non-free" >>/etc/apt/sources.list && \\\n    apt-get update && \\\n    apt-get install procps -y --allow-unauthenticated && \\\n    apt-get install telnetd -y --allow-unauthenticated && \\\n    apt-get install telnet -y --allow-unauthenticated && \\\n    apt-get install wget -y --allow-unauthenticated\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n',charsets:{cjk:!0}},{title:"docker镜像",frontmatter:{title:"docker镜像",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/74eaf6/",categories:["技术杂谈","kubernetes","docker"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"docker镜像"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/03.docker%E9%95%9C%E5%83%8F.html"},{property:"og:type",content:"article"},{property:"og:title",content:"docker镜像"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/03.docker%E9%95%9C%E5%83%8F.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"docker镜像"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/03.docker%E9%95%9C%E5%83%8F.html",relativePath:"01.技术杂谈/03.kubernetes/300.docker/03.docker镜像.md",key:"v-226c4c47",path:"/pages/74eaf6/",headersStr:null,content:"# sysbench\n\nctr -n k8s.io run -t --rm docker.io/ljishen/sysbench:latest sysbench cpu run\n\nctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/dotnetdr/sysbench:0.5 hfftest sh\n\n\n# fio\n\nctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/xridge/fio:latest hfftest sh\n\n\n# iperf3\n\nctr -n k8s.io run -t --rm sirot/netperf-latest netperf sh",normalizedContent:"# sysbench\n\nctr -n k8s.io run -t --rm docker.io/ljishen/sysbench:latest sysbench cpu run\n\nctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/dotnetdr/sysbench:0.5 hfftest sh\n\n\n# fio\n\nctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/xridge/fio:latest hfftest sh\n\n\n# iperf3\n\nctr -n k8s.io run -t --rm sirot/netperf-latest netperf sh",charsets:{}},{title:"docker镜像优化",frontmatter:{title:"docker镜像优化",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/be8ffb/",categories:["技术杂谈","kubernetes","docker"],tags:[null],titleTag:"原创",readingShow:"top",description:"1、  apk –no-cache\n2、  rm –rf /var/lib/apk/*\n3、  pip install –no-cache-dir\n4、  run rm –rf find / -name ‘*.pyc’\n5、  禁止使用docker commit，使用dockerfile\n6、  镜像layer不得超过6层\n7、  &&\\ 可以把run、copy等合成一个\n8、  基础镜像可以处理成scratch,使用2个阶段构建镜像",meta:[{name:"twitter:title",content:"docker镜像优化"},{name:"twitter:description",content:"1、  apk –no-cache\n2、  rm –rf /var/lib/apk/*\n3、  pip install –no-cache-dir\n4、  run rm –rf find / -name ‘*.pyc’\n5、  禁止使用docker commit，使用dockerfile\n6、  镜像layer不得超过6层\n7、  &&\\ 可以把run、copy等合成一个\n8、  基础镜像可以处理成scratch,使用2个阶段构建镜像"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/04.docker%E9%95%9C%E5%83%8F%E4%BC%98%E5%8C%96.html"},{property:"og:type",content:"article"},{property:"og:title",content:"docker镜像优化"},{property:"og:description",content:"1、  apk –no-cache\n2、  rm –rf /var/lib/apk/*\n3、  pip install –no-cache-dir\n4、  run rm –rf find / -name ‘*.pyc’\n5、  禁止使用docker commit，使用dockerfile\n6、  镜像layer不得超过6层\n7、  &&\\ 可以把run、copy等合成一个\n8、  基础镜像可以处理成scratch,使用2个阶段构建镜像"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/04.docker%E9%95%9C%E5%83%8F%E4%BC%98%E5%8C%96.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"docker镜像优化"},{itemprop:"description",content:"1、  apk –no-cache\n2、  rm –rf /var/lib/apk/*\n3、  pip install –no-cache-dir\n4、  run rm –rf find / -name ‘*.pyc’\n5、  禁止使用docker commit，使用dockerfile\n6、  镜像layer不得超过6层\n7、  &&\\ 可以把run、copy等合成一个\n8、  基础镜像可以处理成scratch,使用2个阶段构建镜像"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/04.docker%E9%95%9C%E5%83%8F%E4%BC%98%E5%8C%96.html",relativePath:"01.技术杂谈/03.kubernetes/300.docker/04.docker镜像优化.md",key:"v-2ce4f6b6",path:"/pages/be8ffb/",headersStr:null,content:"1、 apk –no-cache 2、 rm –rf /var/lib/apk/* 3、 pip install –no-cache-dir 4、 run rm –rf find / -name ‘*.pyc’ 5、 禁止使用docker commit，使用dockerfile 6、 镜像layer不得超过6层 7、 &&\\ 可以把run、copy等合成一个 8、 基础镜像可以处理成scratch,使用2个阶段构建镜像",normalizedContent:"1、 apk –no-cache 2、 rm –rf /var/lib/apk/* 3、 pip install –no-cache-dir 4、 run rm –rf find / -name ‘*.pyc’ 5、 禁止使用docker commit，使用dockerfile 6、 镜像layer不得超过6层 7、 &&\\ 可以把run、copy等合成一个 8、 基础镜像可以处理成scratch,使用2个阶段构建镜像",charsets:{cjk:!0}},{title:"在Docker中设置时区",frontmatter:{title:"在Docker中设置时区",date:"2022-07-27T14:56:55.000Z",permalink:"/pages/e29999/",categories:["技术杂谈","kubernetes","docker"],tags:[null],titleTag:"原创",readingShow:"top",description:"由于 Debian 镜像中已经包含了tzdata，因此设置时区的方法比较简单，只需添加环境变量TZ即可。\nFROM debian:stretch",meta:[{name:"twitter:title",content:"在Docker中设置时区"},{name:"twitter:description",content:"由于 Debian 镜像中已经包含了tzdata，因此设置时区的方法比较简单，只需添加环境变量TZ即可。\nFROM debian:stretch"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/05.%E5%9C%A8Docker%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA.html"},{property:"og:type",content:"article"},{property:"og:title",content:"在Docker中设置时区"},{property:"og:description",content:"由于 Debian 镜像中已经包含了tzdata，因此设置时区的方法比较简单，只需添加环境变量TZ即可。\nFROM debian:stretch"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/05.%E5%9C%A8Docker%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:55.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"在Docker中设置时区"},{itemprop:"description",content:"由于 Debian 镜像中已经包含了tzdata，因此设置时区的方法比较简单，只需添加环境变量TZ即可。\nFROM debian:stretch"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/03.kubernetes/300.docker/05.%E5%9C%A8Docker%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA.html",relativePath:"01.技术杂谈/03.kubernetes/300.docker/05.在Docker中设置时区.md",key:"v-67301908",path:"/pages/e29999/",headersStr:null,content:'# 基于 Debian 镜像\n\n由于 Debian 镜像中已经包含了tzdata，因此设置时区的方法比较简单，只需添加环境变量TZ即可。\n\nFROM debian:stretch\n\nENV TZ=Asia/Shanghai\n\n\n1\n2\n3\n\n\n\n# 基于 Alpine 镜像\n\nFROM alpine:3.9\n\nENV TZ=Asia/Shanghai\n\nRUN apk update \\\n    && apk add tzdata \\\n    && echo "${TZ}" > /etc/timezone \\\n    && ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \\\n    && rm /var/cache/apk/*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 基于 Ubuntu 镜像\n\nFROM ubuntu:bionic\n\nENV TZ=Asia/Shanghai\n\nRUN echo "${TZ}" > /etc/timezone \\\n    && ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \\\n    && apt update \\\n    && apt install -y tzdata \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n',normalizedContent:'# 基于 debian 镜像\n\n由于 debian 镜像中已经包含了tzdata，因此设置时区的方法比较简单，只需添加环境变量tz即可。\n\nfrom debian:stretch\n\nenv tz=asia/shanghai\n\n\n1\n2\n3\n\n\n\n# 基于 alpine 镜像\n\nfrom alpine:3.9\n\nenv tz=asia/shanghai\n\nrun apk update \\\n    && apk add tzdata \\\n    && echo "${tz}" > /etc/timezone \\\n    && ln -sf /usr/share/zoneinfo/${tz} /etc/localtime \\\n    && rm /var/cache/apk/*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 基于 ubuntu 镜像\n\nfrom ubuntu:bionic\n\nenv tz=asia/shanghai\n\nrun echo "${tz}" > /etc/timezone \\\n    && ln -sf /usr/share/zoneinfo/${tz} /etc/localtime \\\n    && apt update \\\n    && apt install -y tzdata \\\n    && rm -rf /var/lib/apt/lists/*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n',charsets:{cjk:!0}},{title:"常用计算",frontmatter:{title:"常用计算",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/7a288b/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"常用计算"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/01.%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97.html"},{property:"og:type",content:"article"},{property:"og:title",content:"常用计算"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/01.%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"常用计算"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/01.%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97.html",relativePath:"01.技术杂谈/04.golang/01.常用计算.md",key:"v-fa04c054",path:"/pages/7a288b/",headersStr:null,content:"# 数组去重\n\nfunc RemoveRepeatedElement(arr []string) (newArr []string) {\n\tnewArr = make([]string, 0)\n\tfor i := 0; i < len(arr); i++ {\n\t\trepeat := false\n\t\tfor j := i + 1; j < len(arr); j++ {\n\t\t\tif arr[i] == arr[j] {\n\t\t\t\trepeat = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !repeat {\n\t\t\tnewArr = append(newArr, arr[i])\n\t\t}\n\t}\n\treturn\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",normalizedContent:"# 数组去重\n\nfunc removerepeatedelement(arr []string) (newarr []string) {\n\tnewarr = make([]string, 0)\n\tfor i := 0; i < len(arr); i++ {\n\t\trepeat := false\n\t\tfor j := i + 1; j < len(arr); j++ {\n\t\t\tif arr[i] == arr[j] {\n\t\t\t\trepeat = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !repeat {\n\t\t\tnewarr = append(newarr, arr[i])\n\t\t}\n\t}\n\treturn\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",charsets:{cjk:!0}},{title:"golang面试问题",frontmatter:{title:"golang面试问题",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/b587ce/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"golang面试问题"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/02.golang%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98.html"},{property:"og:type",content:"article"},{property:"og:title",content:"golang面试问题"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/02.golang%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"golang面试问题"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/02.golang%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98.html",relativePath:"01.技术杂谈/04.golang/02.golang面试问题.md",key:"v-6c7b2800",path:"/pages/b587ce/",headers:[{level:3,title:"Golang中有哪些方式安全读写共享变量？",slug:"golang中有哪些方式安全读写共享变量",normalizedTitle:"golang中有哪些方式安全读写共享变量？",charIndex:2},{level:3,title:"Golang 中的并发模型",slug:"golang-中的并发模型",normalizedTitle:"golang 中的并发模型",charIndex:103},{level:3,title:"Go线程实现模型MPG",slug:"go线程实现模型mpg",normalizedTitle:"go线程实现模型mpg",charIndex:623},{level:3,title:"什么是channel，它是线程安全的吗？",slug:"什么是channel-它是线程安全的吗",normalizedTitle:"什么是channel，它是线程安全的吗？",charIndex:927},{level:3,title:"goroutine中的调度原理",slug:"goroutine中的调度原理",normalizedTitle:"goroutine中的调度原理",charIndex:952},{level:3,title:"线程/协程/进程的区别",slug:"线程-协程-进程的区别",normalizedTitle:"线程/协程/进程的区别",charIndex:972},{level:3,title:"golang双链表的实现，怎么定义，初始化，添加，删除节点",slug:"golang双链表的实现-怎么定义-初始化-添加-删除节点",normalizedTitle:"golang双链表的实现，怎么定义，初始化，添加，删除节点",charIndex:1275},{level:3,title:"make和new差别",slug:"make和new差别",normalizedTitle:"make和new差别",charIndex:1309},{level:3,title:"nil切片和空切片的区别",slug:"nil切片和空切片的区别",normalizedTitle:"nil切片和空切片的区别",charIndex:1769},{level:3,title:"对已经关闭的的 chan 进行读写，会怎么样？为什么？",slug:"对已经关闭的的-chan-进行读写-会怎么样-为什么",normalizedTitle:"对已经关闭的的 chan 进行读写，会怎么样？为什么？",charIndex:1873},{level:3,title:"用过 fallthrough 关键字吗？这个关键字的作用是什么？",slug:"用过-fallthrough-关键字吗-这个关键字的作用是什么",normalizedTitle:"用过 fallthrough 关键字吗？这个关键字的作用是什么？",charIndex:2141},{level:3,title:"restful熟悉吗？都有哪些请求方法，分别代表什么意思？",slug:"restful熟悉吗-都有哪些请求方法-分别代表什么意思",normalizedTitle:"restful熟悉吗？都有哪些请求方法，分别代表什么意思？",charIndex:2388},{level:3,title:"Golang导入包时，使用’_’/’.'导入有什么区别",slug:"golang导入包时-使用-导入有什么区别",normalizedTitle:"golang导入包时，使用’_’/’.'导入有什么区别",charIndex:2422},{level:3,title:"Go支持类型继承吗，Go 是面向对象的语言吗",slug:"go支持类型继承吗-go-是面向对象的语言吗",normalizedTitle:"go支持类型继承吗，go 是面向对象的语言吗",charIndex:2454},{level:3,title:"如何判断链表有环",slug:"如何判断链表有环",normalizedTitle:"如何判断链表有环",charIndex:2760}],headersStr:"Golang中有哪些方式安全读写共享变量？ Golang 中的并发模型 Go线程实现模型MPG 什么是channel，它是线程安全的吗？ goroutine中的调度原理 线程/协程/进程的区别 golang双链表的实现，怎么定义，初始化，添加，删除节点 make和new差别 nil切片和空切片的区别 对已经关闭的的 chan 进行读写，会怎么样？为什么？ 用过 fallthrough 关键字吗？这个关键字的作用是什么？ restful熟悉吗？都有哪些请求方法，分别代表什么意思？ Golang导入包时，使用’_’/’.'导入有什么区别 Go支持类型继承吗，Go 是面向对象的语言吗 如何判断链表有环",content:'# Golang中有哪些方式安全读写共享变量？\n\nmutex锁 Golang中Goroutine 可以通过 Channel 进行安全读写共享变量\n\n有缓冲channel和无缓充channel的区别\n\n\n# Golang 中的并发模型\n\n请谈一谈 go 语言的并发机制以及它所使用的CSP并发模型\n\nGo实现了两种并发形式。第一种是大家普遍认知的：多线程共享内存。其实就是Java或者C++等语言中的多线程开发。另外一种是Go语言特有的，也是Go语言推荐的：CSP（communicating sequential processes）并发模型。\n\n通过channel通知实现并发控制 通过sync包中的WaitGroup实现并发控制 当主 goroutine 运行到 <-ch 接受 channel 的值的时候，如果该 channel 中没有数据，就会一直阻塞等待，直到有值。这样就可以简单实现并发控制\n\n在Go 1.7 以后引进的强大的Context上下文，实现并发控制\n\nGo的CSP并发模型，是通过goroutine和channel来实现的。 goroutine 是Go语言中并发的执行单位。有点抽象，其实就是和传统概念上的”线程“类似，可以理解为”线程“。 channel是Go语言中各个并发结构体(goroutine)之前的通信机制。 通俗的讲，就是各个goroutine之间通信的”管道“，有点类似于Linux中的管道。\n\n\n# Go线程实现模型MPG\n\nM指的是Machine，一个M直接关联了一个内核线程。由操作系统管理。 P指的是”processor”，代表了M所需的上下文环境，也是处理用户级代码逻辑的处理器。它负责衔接M和G的调度上下文，将等待执行的G与M对接。 G指的是Goroutine，其实本质上也是一种轻量级的线程。包括了调用栈，重要的调度信息，例如channel等。 P的数量由环境变量中的GOMAXPROCS决定，通常来说它是和核心数对应，例如在4Core的服务器上回启动4个线程。G会有很多个，每个P会将Goroutine从一个就绪的队列中做Pop操作，为了减小锁的竞争，通常情况下每个P会负责一个队列。\n\n\n# 什么是channel，它是线程安全的吗？\n\n\n# goroutine中的调度原理\n\n\n# 线程/协程/进程的区别\n\n线程拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程的切换一般也由操作系统调度。 和线程类似，共享堆，不共享栈，协程的切换一般由程序员在代码中显式控制。它避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂。\n\nGoroutine和其他语言的协程（coroutine）在使用方式上类似，但从字面意义上来看不同（一个是Goroutine，一个是coroutine），再就是协程是一种协作任务控制机制，在最简单的意义上，协程不是并发的，而Goroutine支持并发的。因此Goroutine可以理解为一种Go语言的协程。同时它可以运行在一个或多个线程上。\n\n\n# golang双链表的实现，怎么定义，初始化，添加，删除节点\n\n\n# make和new差别\n\nnew ()是内建函数，函数原型为: func new(Type) *Type 1 make 也是内建函数，它的函数原型 比 new 多了一个（长度）参数，返回值也不同: //第一个参数是一个类型，第二个参数是长度 //返回值是一个指向该类型的一个引用 func make(Type, size IntegerType) Type make和new都是golang用来分配内存的內建函数，且在堆上分配内存，并为该变量执行了初始化操作make 用于为引用类型分配内存空间，其在分配内存的同时，也初始化了一些相关属性(这里初始化这些相关属性时不再是简单的用默认零值来初始化了！！！)。new只是分配默认零值内存并返回指向该零值内存的一个指针也就是执行了一个默认初始化，全部用默认零值来进行初始化）。 make返回的是一个引用类型；而new返回的是一个指向零值内存空间的指针。 make只能用来分配及初始化引用类型：slice，map，channel的数据； new可以分配任意类型的数据。\n\n\n# nil切片和空切片的区别\n\nnil切片和空切片指向的地址不一样。nil空切片引用数组指针地址为0（无指向任何实际地址） 空切片的引用数组指针地址是有的，且固定为一个值 能否通过for循环遍历删除元素\n\n\n# 对已经关闭的的 chan 进行读写，会怎么样？为什么？\n\n读已经关闭的 chan 能一直读到东西，但是读到的内容根据通道内关闭前是否有元素而不同。 如果 chan 关闭前，buffer 内有元素还未读 , 会正确读到 chan 内的值，且返回的第二个 bool 值（是否读成功）为 true。 如果 chan 关闭前，buffer 内有元素已经被读完，chan 内无值，接下来所有接收的值都会非阻塞直接成功，返回 channel 元素的零值，但是第二个 bool 值一直为 false。 写已经关闭的 chan 会 panic\n\n\n# 用过 fallthrough 关键字吗？这个关键字的作用是什么？\n\n其他语言中，switch-case 结构中一般都需要在每个 case 分支结束处显式的调用 break 语句以防止 前一个 case 分支被贯穿后调用下一个 case 分支的逻辑，go 编译器从语法层面上消除了这种重复的工作，让开发者更轻松；但有时候我们的场景就是需要贯穿多个 case，但是编译器默认是不贯穿的，这个时候 fallthrough 就起作用了，让某个 case 分支再次贯穿到下一个 case 分支。\n\n\n# restful熟悉吗？都有哪些请求方法，分别代表什么意思？\n\n\n# Golang导入包时，使用’_’/’.\'导入有什么区别\n\n\n# Go支持类型继承吗，Go 是面向对象的语言吗\n\n没有传统的类，也没有继承。\n\n取而代之的是结构和组合的方式\n\nGo 有类型和方法，并且允许面向对象的编程风格，但没有类型层次。\n\nGo 中的 "接口 "概念提供了一种不同的方法，我们认为这种方法易于使用，而且在某些方面更加通用。还有一些方法可以将类型嵌入到其他类型中，以提供类似的东西，但不等同于子类。\n\nGo 中的方法比 C++ 或 Java 中的方法更通用：它们可以为任何类型的数据定义，甚至是内置类型，如普通的、"未装箱的 "整数。它们并不局限于结构（类）。\n\nGo 由于缺乏类型层次，Go 中的 "对象 "比 C++ 或 Java 等语言更轻巧。\n\n\n# 如何判断链表有环\n\n不允许修改链表结构。 时间复杂度O(n)，空间复杂度O(1)。\n\nhttps://blog.csdn.net/u010983881/article/details/78896293 快慢指针，一个跳1，一个跳2\n\n方法一、穷举遍历 方法一：首先从头节点开始，依次遍历单链表的每一个节点。每遍历到一个新节点，就从头节点重新遍历新节点之前的所有节点，用新节点ID和此节点之前所有节点ID依次作比较。如果发现新节点之前的所有节点当中存在相同节点ID，则说明该节点被遍历过两次，链表有环；如果之前的所有节点当中不存在相同的节点，就继续遍历下一个新节点，继续重复刚才的操作。 算法的时间复杂度是0+1+2+3+…+(D+S-1) = (D+S-1)(D+S)/2 ， 可以简单地理解成 O(NN)。而此算法没有创建额外存储空间，空间复杂度可以简单地理解成为O(1) 方法二、哈希表缓存 首先创建一个以节点ID为键的HashSet集合，用来存储曾经遍历过的节点。然后同样是从头节点开始，依次遍历单链表的每一个节点。每遍历到一个新节点，就用新节点和HashSet集合当中存储的节点作比较，如果发现HashSet当中存在相同节点ID，则说明链表有环，如果HashSet当中不存在相同的节点ID，就把这个新节点ID存入HashSet，之后进入下一节点，继续重复刚才的操作。\n\n方法三、快慢指针 首先创建两个指针1和2（在java里就是两个对象引用），同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针1每次向下移动一个节点，让指针2每次向下移动两个节点，然后比较两个指针指向的节点是否相同。如果相同，则判断出链表有环，如果不同，则继续下一次循环。 方法四、Set集合大小变化 把节点放入set里，每次访问下个节点时，如果set长度不变，则跳出，说明有环。否则set长度+1，继续遍历。 该方法时间复杂度是O（N），空间复杂度上因为需要额外等数量的存储空间，所以空间复杂度是O（n）。 如何判断两个单链表是否相交，以及相交点 方法一、直接法 直接判断第一个链表的每个结点是否在第二个链表中，时间复杂度为O(len1*len2)，耗时很大',normalizedContent:'# golang中有哪些方式安全读写共享变量？\n\nmutex锁 golang中goroutine 可以通过 channel 进行安全读写共享变量\n\n有缓冲channel和无缓充channel的区别\n\n\n# golang 中的并发模型\n\n请谈一谈 go 语言的并发机制以及它所使用的csp并发模型\n\ngo实现了两种并发形式。第一种是大家普遍认知的：多线程共享内存。其实就是java或者c++等语言中的多线程开发。另外一种是go语言特有的，也是go语言推荐的：csp（communicating sequential processes）并发模型。\n\n通过channel通知实现并发控制 通过sync包中的waitgroup实现并发控制 当主 goroutine 运行到 <-ch 接受 channel 的值的时候，如果该 channel 中没有数据，就会一直阻塞等待，直到有值。这样就可以简单实现并发控制\n\n在go 1.7 以后引进的强大的context上下文，实现并发控制\n\ngo的csp并发模型，是通过goroutine和channel来实现的。 goroutine 是go语言中并发的执行单位。有点抽象，其实就是和传统概念上的”线程“类似，可以理解为”线程“。 channel是go语言中各个并发结构体(goroutine)之前的通信机制。 通俗的讲，就是各个goroutine之间通信的”管道“，有点类似于linux中的管道。\n\n\n# go线程实现模型mpg\n\nm指的是machine，一个m直接关联了一个内核线程。由操作系统管理。 p指的是”processor”，代表了m所需的上下文环境，也是处理用户级代码逻辑的处理器。它负责衔接m和g的调度上下文，将等待执行的g与m对接。 g指的是goroutine，其实本质上也是一种轻量级的线程。包括了调用栈，重要的调度信息，例如channel等。 p的数量由环境变量中的gomaxprocs决定，通常来说它是和核心数对应，例如在4core的服务器上回启动4个线程。g会有很多个，每个p会将goroutine从一个就绪的队列中做pop操作，为了减小锁的竞争，通常情况下每个p会负责一个队列。\n\n\n# 什么是channel，它是线程安全的吗？\n\n\n# goroutine中的调度原理\n\n\n# 线程/协程/进程的区别\n\n线程拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程的切换一般也由操作系统调度。 和线程类似，共享堆，不共享栈，协程的切换一般由程序员在代码中显式控制。它避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂。\n\ngoroutine和其他语言的协程（coroutine）在使用方式上类似，但从字面意义上来看不同（一个是goroutine，一个是coroutine），再就是协程是一种协作任务控制机制，在最简单的意义上，协程不是并发的，而goroutine支持并发的。因此goroutine可以理解为一种go语言的协程。同时它可以运行在一个或多个线程上。\n\n\n# golang双链表的实现，怎么定义，初始化，添加，删除节点\n\n\n# make和new差别\n\nnew ()是内建函数，函数原型为: func new(type) *type 1 make 也是内建函数，它的函数原型 比 new 多了一个（长度）参数，返回值也不同: //第一个参数是一个类型，第二个参数是长度 //返回值是一个指向该类型的一个引用 func make(type, size integertype) type make和new都是golang用来分配内存的內建函数，且在堆上分配内存，并为该变量执行了初始化操作make 用于为引用类型分配内存空间，其在分配内存的同时，也初始化了一些相关属性(这里初始化这些相关属性时不再是简单的用默认零值来初始化了！！！)。new只是分配默认零值内存并返回指向该零值内存的一个指针也就是执行了一个默认初始化，全部用默认零值来进行初始化）。 make返回的是一个引用类型；而new返回的是一个指向零值内存空间的指针。 make只能用来分配及初始化引用类型：slice，map，channel的数据； new可以分配任意类型的数据。\n\n\n# nil切片和空切片的区别\n\nnil切片和空切片指向的地址不一样。nil空切片引用数组指针地址为0（无指向任何实际地址） 空切片的引用数组指针地址是有的，且固定为一个值 能否通过for循环遍历删除元素\n\n\n# 对已经关闭的的 chan 进行读写，会怎么样？为什么？\n\n读已经关闭的 chan 能一直读到东西，但是读到的内容根据通道内关闭前是否有元素而不同。 如果 chan 关闭前，buffer 内有元素还未读 , 会正确读到 chan 内的值，且返回的第二个 bool 值（是否读成功）为 true。 如果 chan 关闭前，buffer 内有元素已经被读完，chan 内无值，接下来所有接收的值都会非阻塞直接成功，返回 channel 元素的零值，但是第二个 bool 值一直为 false。 写已经关闭的 chan 会 panic\n\n\n# 用过 fallthrough 关键字吗？这个关键字的作用是什么？\n\n其他语言中，switch-case 结构中一般都需要在每个 case 分支结束处显式的调用 break 语句以防止 前一个 case 分支被贯穿后调用下一个 case 分支的逻辑，go 编译器从语法层面上消除了这种重复的工作，让开发者更轻松；但有时候我们的场景就是需要贯穿多个 case，但是编译器默认是不贯穿的，这个时候 fallthrough 就起作用了，让某个 case 分支再次贯穿到下一个 case 分支。\n\n\n# restful熟悉吗？都有哪些请求方法，分别代表什么意思？\n\n\n# golang导入包时，使用’_’/’.\'导入有什么区别\n\n\n# go支持类型继承吗，go 是面向对象的语言吗\n\n没有传统的类，也没有继承。\n\n取而代之的是结构和组合的方式\n\ngo 有类型和方法，并且允许面向对象的编程风格，但没有类型层次。\n\ngo 中的 "接口 "概念提供了一种不同的方法，我们认为这种方法易于使用，而且在某些方面更加通用。还有一些方法可以将类型嵌入到其他类型中，以提供类似的东西，但不等同于子类。\n\ngo 中的方法比 c++ 或 java 中的方法更通用：它们可以为任何类型的数据定义，甚至是内置类型，如普通的、"未装箱的 "整数。它们并不局限于结构（类）。\n\ngo 由于缺乏类型层次，go 中的 "对象 "比 c++ 或 java 等语言更轻巧。\n\n\n# 如何判断链表有环\n\n不允许修改链表结构。 时间复杂度o(n)，空间复杂度o(1)。\n\nhttps://blog.csdn.net/u010983881/article/details/78896293 快慢指针，一个跳1，一个跳2\n\n方法一、穷举遍历 方法一：首先从头节点开始，依次遍历单链表的每一个节点。每遍历到一个新节点，就从头节点重新遍历新节点之前的所有节点，用新节点id和此节点之前所有节点id依次作比较。如果发现新节点之前的所有节点当中存在相同节点id，则说明该节点被遍历过两次，链表有环；如果之前的所有节点当中不存在相同的节点，就继续遍历下一个新节点，继续重复刚才的操作。 算法的时间复杂度是0+1+2+3+…+(d+s-1) = (d+s-1)(d+s)/2 ， 可以简单地理解成 o(nn)。而此算法没有创建额外存储空间，空间复杂度可以简单地理解成为o(1) 方法二、哈希表缓存 首先创建一个以节点id为键的hashset集合，用来存储曾经遍历过的节点。然后同样是从头节点开始，依次遍历单链表的每一个节点。每遍历到一个新节点，就用新节点和hashset集合当中存储的节点作比较，如果发现hashset当中存在相同节点id，则说明链表有环，如果hashset当中不存在相同的节点id，就把这个新节点id存入hashset，之后进入下一节点，继续重复刚才的操作。\n\n方法三、快慢指针 首先创建两个指针1和2（在java里就是两个对象引用），同时指向这个链表的头节点。然后开始一个大循环，在循环体中，让指针1每次向下移动一个节点，让指针2每次向下移动两个节点，然后比较两个指针指向的节点是否相同。如果相同，则判断出链表有环，如果不同，则继续下一次循环。 方法四、set集合大小变化 把节点放入set里，每次访问下个节点时，如果set长度不变，则跳出，说明有环。否则set长度+1，继续遍历。 该方法时间复杂度是o（n），空间复杂度上因为需要额外等数量的存储空间，所以空间复杂度是o（n）。 如何判断两个单链表是否相交，以及相交点 方法一、直接法 直接判断第一个链表的每个结点是否在第二个链表中，时间复杂度为o(len1*len2)，耗时很大',charsets:{cjk:!0}},{title:"go-指针",frontmatter:{title:"go-指针",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/88c22b/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"Go 是一门静态语言,所有的变量都必须为标量类型.不同的类型不能够进行赋值,计算等跨类型的操作\n指针也对应着相对的类型,也在 Compile 的静态类型检查的范围内\n同时静态语言,也称为强类型.也就是一旦定义了,就不能再改变它",meta:[{name:"twitter:title",content:"go-指针"},{name:"twitter:description",content:"Go 是一门静态语言,所有的变量都必须为标量类型.不同的类型不能够进行赋值,计算等跨类型的操作\n指针也对应着相对的类型,也在 Compile 的静态类型检查的范围内\n同时静态语言,也称为强类型.也就是一旦定义了,就不能再改变它"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/03.go-%E6%8C%87%E9%92%88.html"},{property:"og:type",content:"article"},{property:"og:title",content:"go-指针"},{property:"og:description",content:"Go 是一门静态语言,所有的变量都必须为标量类型.不同的类型不能够进行赋值,计算等跨类型的操作\n指针也对应着相对的类型,也在 Compile 的静态类型检查的范围内\n同时静态语言,也称为强类型.也就是一旦定义了,就不能再改变它"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/03.go-%E6%8C%87%E9%92%88.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"go-指针"},{itemprop:"description",content:"Go 是一门静态语言,所有的变量都必须为标量类型.不同的类型不能够进行赋值,计算等跨类型的操作\n指针也对应着相对的类型,也在 Compile 的静态类型检查的范围内\n同时静态语言,也称为强类型.也就是一旦定义了,就不能再改变它"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/03.go-%E6%8C%87%E9%92%88.html",relativePath:"01.技术杂谈/04.golang/03.go-指针.md",key:"v-783e73dc",path:"/pages/88c22b/",headersStr:null,content:"# Go 的指针是不支持指针运算和转换\n\nGo 是一门静态语言,所有的变量都必须为标量类型.不同的类型不能够进行赋值,计算等跨类型的操作 指针也对应着相对的类型,也在 Compile 的静态类型检查的范围内 同时静态语言,也称为强类型.也就是一旦定义了,就不能再改变它\n\n\n# unsafe.Pointer不安全指针\n\n它表示任意类型且可寻址的指针值,可以在不同的指针类型之间进行转换（类似 C 语言的 void * 的用途） 其包含四种核心操作：\n\n * 任何类型的指针值都可以转换为 Pointer\n * Pointer 可以转换为任何类型的指针值\n * uintptr 可以转换为 Pointer\n * Pointer 可以转换为 uintptr\n\nunsafe.Pointer 可以让您的变量在不同的指针类型转来转去,也就是表示为任意可寻址的指针类型 uintptr 常用于与 unsafe.Pointer 打配合,用于做指针运算",normalizedContent:"# go 的指针是不支持指针运算和转换\n\ngo 是一门静态语言,所有的变量都必须为标量类型.不同的类型不能够进行赋值,计算等跨类型的操作 指针也对应着相对的类型,也在 compile 的静态类型检查的范围内 同时静态语言,也称为强类型.也就是一旦定义了,就不能再改变它\n\n\n# unsafe.pointer不安全指针\n\n它表示任意类型且可寻址的指针值,可以在不同的指针类型之间进行转换（类似 c 语言的 void * 的用途） 其包含四种核心操作：\n\n * 任何类型的指针值都可以转换为 pointer\n * pointer 可以转换为任何类型的指针值\n * uintptr 可以转换为 pointer\n * pointer 可以转换为 uintptr\n\nunsafe.pointer 可以让您的变量在不同的指针类型转来转去,也就是表示为任意可寻址的指针类型 uintptr 常用于与 unsafe.pointer 打配合,用于做指针运算",charsets:{cjk:!0}},{title:"go embed",frontmatter:{title:"go embed",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/ebb478/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"go embed"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/04.go%20embed.html"},{property:"og:type",content:"article"},{property:"og:title",content:"go embed"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/04.go%20embed.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"go embed"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/04.go%20embed.html",relativePath:"01.技术杂谈/04.golang/04.go embed.md",key:"v-51cd8504",path:"/pages/ebb478/",headersStr:null,content:"embed是在Go 1.16中新加包。它通过//go:embed指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。\n\n\n# embed的基本语法\n\n基本语法非常简单，首先导入embed包，然后使用指令//go:embed 文件名 将对应的文件或目录结构导入到对应的变量上。",normalizedContent:"embed是在go 1.16中新加包。它通过//go:embed指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。\n\n\n# embed的基本语法\n\n基本语法非常简单，首先导入embed包，然后使用指令//go:embed 文件名 将对应的文件或目录结构导入到对应的变量上。",charsets:{cjk:!0}},{title:"go-封装继承和多态",frontmatter:{title:"go-封装继承和多态",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/5848e9/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"go 中没有面向对象的说法，也没有对应的封装、继承和多态",meta:[{name:"twitter:title",content:"go-封装继承和多态"},{name:"twitter:description",content:"go 中没有面向对象的说法，也没有对应的封装、继承和多态"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/05.go-%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81.html"},{property:"og:type",content:"article"},{property:"og:title",content:"go-封装继承和多态"},{property:"og:description",content:"go 中没有面向对象的说法，也没有对应的封装、继承和多态"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/05.go-%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"go-封装继承和多态"},{itemprop:"description",content:"go 中没有面向对象的说法，也没有对应的封装、继承和多态"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/05.go-%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81.html",relativePath:"01.技术杂谈/04.golang/05.go-封装继承和多态.md",key:"v-0169ea0d",path:"/pages/5848e9/",headersStr:null,content:"go 中没有面向对象的说法，也没有对应的封装、继承和多态\n\n封装，通过结构体中的匿名字段来实现 继承可以使用接口和嵌套结构体 go 中，尽管没有多态，但是能实现多态相同的用法\n\n\n# 继承\n\ntype BaseNum struct {\n     num1 int\n     num2 int\n} // BaseNum 即为父类型名称\n\ntype Add struct {\n    BaseNum\n} //加法子类, 定义加法子类的主要目的, 是为了定义对应子类的方法\n\ntype Sub struct {\n    BaseNum\n} //减法子类\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n//Add 和Sub 就是BaseNum的子类\n\n\n# 封装\n\nfunc (a *Add)Opt()(value int) {\n    return a.num1 + a.num2\n}//加法的方法实现\n\nfunc (s *Sub)Opt()(value int) {\n    return s.num1 + s.num2\n}//减法的方法实现\ntype Opter interface { //接口定义\n    Opt()int      //封装, 归纳子类方法, 注意此处需要加上返回值, 不然没有办法输出返回值(因为方法中使用了返回值)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 多态\n\nfunc MultiState(o *Opter)(value int) { //多态定义, 可以简单理解为以接口作为形参的函数, 方便学习\n    value = o.Opt()\n    return\n}\n\n// 继承\ndata:= BaseNum{2,3}\nvar a Add = Add{data}\nvar b Sub= Sub{data}\n   \n//使用接口\nvar i Opter\ni = &a\nvalue := i.Opt()\ni = &b\nvalue := i.Opt()\n\n//使用多态\nvalue := MultiState(&a)\nvalue := MultiState(&b)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",normalizedContent:"go 中没有面向对象的说法，也没有对应的封装、继承和多态\n\n封装，通过结构体中的匿名字段来实现 继承可以使用接口和嵌套结构体 go 中，尽管没有多态，但是能实现多态相同的用法\n\n\n# 继承\n\ntype basenum struct {\n     num1 int\n     num2 int\n} // basenum 即为父类型名称\n\ntype add struct {\n    basenum\n} //加法子类, 定义加法子类的主要目的, 是为了定义对应子类的方法\n\ntype sub struct {\n    basenum\n} //减法子类\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n//add 和sub 就是basenum的子类\n\n\n# 封装\n\nfunc (a *add)opt()(value int) {\n    return a.num1 + a.num2\n}//加法的方法实现\n\nfunc (s *sub)opt()(value int) {\n    return s.num1 + s.num2\n}//减法的方法实现\ntype opter interface { //接口定义\n    opt()int      //封装, 归纳子类方法, 注意此处需要加上返回值, 不然没有办法输出返回值(因为方法中使用了返回值)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 多态\n\nfunc multistate(o *opter)(value int) { //多态定义, 可以简单理解为以接口作为形参的函数, 方便学习\n    value = o.opt()\n    return\n}\n\n// 继承\ndata:= basenum{2,3}\nvar a add = add{data}\nvar b sub= sub{data}\n   \n//使用接口\nvar i opter\ni = &a\nvalue := i.opt()\ni = &b\nvalue := i.opt()\n\n//使用多态\nvalue := multistate(&a)\nvalue := multistate(&b)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",charsets:{cjk:!0}},{title:"go-文件操作",frontmatter:{title:"go-文件操作",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/b270a4/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:'emptyFile, err := os.Create("empty.txt")\ndefer emptyFile.Close()\n_, err := os.Stat("test")',meta:[{name:"twitter:title",content:"go-文件操作"},{name:"twitter:description",content:'emptyFile, err := os.Create("empty.txt")\ndefer emptyFile.Close()\n_, err := os.Stat("test")'},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/06.go-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html"},{property:"og:type",content:"article"},{property:"og:title",content:"go-文件操作"},{property:"og:description",content:'emptyFile, err := os.Create("empty.txt")\ndefer emptyFile.Close()\n_, err := os.Stat("test")'},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/06.go-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"go-文件操作"},{itemprop:"description",content:'emptyFile, err := os.Create("empty.txt")\ndefer emptyFile.Close()\n_, err := os.Stat("test")'}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/06.go-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",relativePath:"01.技术杂谈/04.golang/06.go-文件操作.md",key:"v-5b58f46b",path:"/pages/b270a4/",headersStr:null,content:'# 判断文件是否存在/创建空文件\n\nemptyFile, err := os.Create("empty.txt")\ndefer emptyFile.Close()\n\n\n1\n2\n\n\n_, err := os.Stat("test")\n \nif os.IsNotExist(err) {\n    errDir := os.MkdirAll("test", 0755)\n    if errDir != nil {\n        log.Fatal(err)\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 重命名文件: os.Rename\n\noldName := "test.txt"\nnewName := "testing.txt"\nerr := os.Rename(oldName, newName)\n\n\n1\n2\n3\n\n\n\n# 移动文件: os.Rename\n\noldLocation := "/var/www/html/test.txt"\nnewLocation := "/var/www/html/src/test.txt"\nerr := os.Rename(oldLocation, newLocation)\n\n\n1\n2\n3\n\n\n\n# 复制文件: io.Copy\n\nsourceFile, err := os.Open("/var/www/html/src/test.txt")\ndefer sourceFile.Close()\nnewFile, err := os.Create("/var/www/html/test.txt")\ndefer newFile.Close()\nbytesCopied, err := io.Copy(newFile, sourceFile)\n\n\n1\n2\n3\n4\n5\n\n\n\n# 获取文件的metadata信息: os.Stat()\n\nfileStat, err := os.Stat("test.txt")\nfmt.Println("File Name:", fileStat.Name())        // Base name of the file\nfmt.Println("Size:", fileStat.Size())             // Length in bytes for regular files\nfmt.Println("Permissions:", fileStat.Mode())      // File mode bits\nfmt.Println("Last Modified:", fileStat.ModTime()) // Last modification time\nfmt.Println("Is Directory: ", fileStat.IsDir())   // Abbreviation for Mode().IsDir()\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 删除文件: os.Remove()\n\n\n# 读取文件字符: bufio.NewScanner()\n\nfilebuffer, err := ioutil.ReadFile(filename)\ninputdata := string(filebuffer)\ndata := bufio.NewScanner(strings.NewReader(inputdata))\ndata.Split(bufio.ScanRunes)\nfor data.Scan() {\n    fmt.Print(data.Text())\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 清除文件: os.Truncate()\n\n裁剪一个文件到100个字节. 如果文件本来就少于100个字节,则文件中原始内容得以保留,剩余的字节以null字节填充. 如果文件本来超过100个字节,则超过的字节会被抛弃. 这样我们总是得到精确的100个字节的文件. 传入0则会清空文件.\n\n\n# 向文件添加内容\n\nf, err := os.OpenFile(filename, os.O_RDWR|os.O_APPEND|os.O_CREATE, 0660)\nfmt.Fprintf(f, "%s\\n", message)\n\n\n1\n2\n\n\n\n# 修改文件权限,时间戳\n\nerr = os.Chmod("test.txt", 0777)\nerr = os.Chown("test.txt", os.Getuid(), os.Getgid())\nerr = os.Chtimes("test.txt", lastAccessTime, lastModifyTime)\n\n\n1\n2\n3\n\n\n\n# zip操作 "archive/zip"\n\n * 压缩文件到ZIP格式\n * 读取ZIP文件里面的文件\n * 解压ZIP文件',normalizedContent:'# 判断文件是否存在/创建空文件\n\nemptyfile, err := os.create("empty.txt")\ndefer emptyfile.close()\n\n\n1\n2\n\n\n_, err := os.stat("test")\n \nif os.isnotexist(err) {\n    errdir := os.mkdirall("test", 0755)\n    if errdir != nil {\n        log.fatal(err)\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 重命名文件: os.rename\n\noldname := "test.txt"\nnewname := "testing.txt"\nerr := os.rename(oldname, newname)\n\n\n1\n2\n3\n\n\n\n# 移动文件: os.rename\n\noldlocation := "/var/www/html/test.txt"\nnewlocation := "/var/www/html/src/test.txt"\nerr := os.rename(oldlocation, newlocation)\n\n\n1\n2\n3\n\n\n\n# 复制文件: io.copy\n\nsourcefile, err := os.open("/var/www/html/src/test.txt")\ndefer sourcefile.close()\nnewfile, err := os.create("/var/www/html/test.txt")\ndefer newfile.close()\nbytescopied, err := io.copy(newfile, sourcefile)\n\n\n1\n2\n3\n4\n5\n\n\n\n# 获取文件的metadata信息: os.stat()\n\nfilestat, err := os.stat("test.txt")\nfmt.println("file name:", filestat.name())        // base name of the file\nfmt.println("size:", filestat.size())             // length in bytes for regular files\nfmt.println("permissions:", filestat.mode())      // file mode bits\nfmt.println("last modified:", filestat.modtime()) // last modification time\nfmt.println("is directory: ", filestat.isdir())   // abbreviation for mode().isdir()\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 删除文件: os.remove()\n\n\n# 读取文件字符: bufio.newscanner()\n\nfilebuffer, err := ioutil.readfile(filename)\ninputdata := string(filebuffer)\ndata := bufio.newscanner(strings.newreader(inputdata))\ndata.split(bufio.scanrunes)\nfor data.scan() {\n    fmt.print(data.text())\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 清除文件: os.truncate()\n\n裁剪一个文件到100个字节. 如果文件本来就少于100个字节,则文件中原始内容得以保留,剩余的字节以null字节填充. 如果文件本来超过100个字节,则超过的字节会被抛弃. 这样我们总是得到精确的100个字节的文件. 传入0则会清空文件.\n\n\n# 向文件添加内容\n\nf, err := os.openfile(filename, os.o_rdwr|os.o_append|os.o_create, 0660)\nfmt.fprintf(f, "%s\\n", message)\n\n\n1\n2\n\n\n\n# 修改文件权限,时间戳\n\nerr = os.chmod("test.txt", 0777)\nerr = os.chown("test.txt", os.getuid(), os.getgid())\nerr = os.chtimes("test.txt", lastaccesstime, lastmodifytime)\n\n\n1\n2\n3\n\n\n\n# zip操作 "archive/zip"\n\n * 压缩文件到zip格式\n * 读取zip文件里面的文件\n * 解压zip文件',charsets:{cjk:!0}},{title:"go-json",frontmatter:{title:"go-json",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/417389/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"go-json"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/07.go-json.html"},{property:"og:type",content:"article"},{property:"og:title",content:"go-json"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/07.go-json.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"go-json"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/07.go-json.html",relativePath:"01.技术杂谈/04.golang/07.go-json.md",key:"v-92ed690a",path:"/pages/417389/",headers:[{level:2,title:"临时忽略struct空字段： omitempty",slug:"临时忽略struct空字段-omitempty",normalizedTitle:"临时忽略struct空字段： omitempty",charIndex:366},{level:2,title:"忽略一些字段: -",slug:"忽略一些字段",normalizedTitle:"忽略一些字段: -",charIndex:532},{level:2,title:"临时添加额外的字段:",slug:"临时添加额外的字段",normalizedTitle:"临时添加额外的字段:",charIndex:645},{level:2,title:"临时粘合两个struct",slug:"临时粘合两个struct",normalizedTitle:"临时粘合两个struct",charIndex:858},{level:2,title:"一个json切分成两个struct: todo",slug:"一个json切分成两个struct-todo",normalizedTitle:"一个json切分成两个struct: todo",charIndex:1163},{level:2,title:'用字符串传递数字: json:",string"',slug:"用字符串传递数字-json-string",normalizedTitle:"用字符串传递数字: json:&quot;,string&quot;",charIndex:null}],headersStr:'临时忽略struct空字段： omitempty 忽略一些字段: - 临时添加额外的字段: 临时粘合两个struct 一个json切分成两个struct: todo 用字符串传递数字: json:",string"',content:'Json(Javascript Object Nanotation)是一种数据交换格式，常用于前后端数据传输。 go语言本身为我们提供了json的工具包”encoding/json”\n\n\n# 定制JSON序列化\n\nJson Marshal：将数据编码成json字符串\n\n    jsonStu, err := json.Marshal(stu)\n\n\n1\n\n\njson.Unmarshal: 反序列的函数，将json字符串解码到相应的数据结构；\n\n    jsonstr := `{"a":"aaa","b":"bbb"}`\n    map1 := make(map[string]interface{})\n    err := json.Unmarshal([]byte(jsonstr), &map1)\n\n\n1\n2\n3\n\n\n\n# 临时忽略struct空字段： omitempty\n\njson.Marshal(struct {\n    *User\n    Password bool `json:"password,omitempty"`  //忽略该字段\n    }{\n        User: user,\n    })\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 忽略一些字段: -\n\njson.Marshal(struct {\n    *User\n    Password bool `json:"-"`\n}{\n    User: user,\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 临时添加额外的字段:\n\njson.Marshal(struct {\n    *User\n    Token    string `json:"token"`  //添加该字段\n    Password bool `json:"password,omitempty"`\n    }{\n        User: user,\n        Token: token,\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 临时粘合两个struct\n\ntype BlogPost struct {\n    URL   string `json:"url"`\n    Title string `json:"title"`\n}\ntype Analytics struct {\n    Visitors  int `json:"visitors"`\n    PageViews int `json:"page_views"`\n}\njson.Marshal(struct{\n    *BlogPost\n    *Analytics\n}{post, analytics})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 一个json切分成两个struct: todo\n\n\n# 用字符串传递数字: json:",string"\n\ntype TestObject struct {\n    Field1 int    `json:",string"`\n}\n\n\n1\n2\n3\n',normalizedContent:'json(javascript object nanotation)是一种数据交换格式，常用于前后端数据传输。 go语言本身为我们提供了json的工具包”encoding/json”\n\n\n# 定制json序列化\n\njson marshal：将数据编码成json字符串\n\n    jsonstu, err := json.marshal(stu)\n\n\n1\n\n\njson.unmarshal: 反序列的函数，将json字符串解码到相应的数据结构；\n\n    jsonstr := `{"a":"aaa","b":"bbb"}`\n    map1 := make(map[string]interface{})\n    err := json.unmarshal([]byte(jsonstr), &map1)\n\n\n1\n2\n3\n\n\n\n# 临时忽略struct空字段： omitempty\n\njson.marshal(struct {\n    *user\n    password bool `json:"password,omitempty"`  //忽略该字段\n    }{\n        user: user,\n    })\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 忽略一些字段: -\n\njson.marshal(struct {\n    *user\n    password bool `json:"-"`\n}{\n    user: user,\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 临时添加额外的字段:\n\njson.marshal(struct {\n    *user\n    token    string `json:"token"`  //添加该字段\n    password bool `json:"password,omitempty"`\n    }{\n        user: user,\n        token: token,\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 临时粘合两个struct\n\ntype blogpost struct {\n    url   string `json:"url"`\n    title string `json:"title"`\n}\ntype analytics struct {\n    visitors  int `json:"visitors"`\n    pageviews int `json:"page_views"`\n}\njson.marshal(struct{\n    *blogpost\n    *analytics\n}{post, analytics})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 一个json切分成两个struct: todo\n\n\n# 用字符串传递数字: json:",string"\n\ntype testobject struct {\n    field1 int    `json:",string"`\n}\n\n\n1\n2\n3\n',charsets:{cjk:!0}},{title:"go-slice切片",frontmatter:{title:"go-slice切片",date:"2022-07-27T14:56:54.000Z",permalink:"/pages/1d629a/",categories:["技术杂谈","golang"],tags:[null],titleTag:"原创",readingShow:"top",description:"在 Go 中,Slice（切片）是抽象在 Array（数组）之上的特殊类型",meta:[{name:"twitter:title",content:"go-slice切片"},{name:"twitter:description",content:"在 Go 中,Slice（切片）是抽象在 Array（数组）之上的特殊类型"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/08.go-slice%E5%88%87%E7%89%87.html"},{property:"og:type",content:"article"},{property:"og:title",content:"go-slice切片"},{property:"og:description",content:"在 Go 中,Slice（切片）是抽象在 Array（数组）之上的特殊类型"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/08.go-slice%E5%88%87%E7%89%87.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:54.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"go-slice切片"},{itemprop:"description",content:"在 Go 中,Slice（切片）是抽象在 Array（数组）之上的特殊类型"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/04.golang/08.go-slice%E5%88%87%E7%89%87.html",relativePath:"01.技术杂谈/04.golang/08.go-slice切片.md",key:"v-d695f1cc",path:"/pages/1d629a/",headers:[{level:2,title:"Slice 的创建方式：",slug:"slice-的创建方式",normalizedTitle:"slice 的创建方式：",charIndex:522}],headersStr:"Slice 的创建方式：",content:"在 Go 中,Slice（切片）是抽象在 Array（数组）之上的特殊类型\n\n\n# Array数组\n\n[3]int{} 表示 3 个整数的数组\n\n\n# Slice切片\n\ntype slice struct {\n\tarray unsafe.Pointer\n\tlen   int\n\tcap   int\n}\n\n\n1\n2\n3\n4\n5\n\n\nSlice 的底层数据结构共分为三部分,如下：\n\n * array：指向所引用的数组指针（unsafe.Pointer 可以表示任何可寻址的值的指针）\n * len：长度,当前引用切片的元素个数\n * cap：容量,当前引用切片的容量（底层数组的元素总数） 在实际使用中,cap 一定是大于或等于 len 的.否则会导致 panic\n\nnums := [3]int{}\nnums[0] = 1\ndnums := nums[0:2]\n# nums: [1 0 0] \n# dnums: [1 0], len: 2, cap: 3\n\n\n1\n2\n3\n4\n5\n\n\nSlice 是对 Array 的抽象,类型为 []T dnums 变量通过 nums[:] 进行赋值 dnums 变量通过 nums[:] 进行赋值\n\n\n# Slice 的创建方式：\n\n * test := []int{2,3}\n * test := make([]int, 5, 5) // 创建一个类型为 int，长度为 5，容量为 5 的切片\n * test1 := make([]int, 3) //如果不指定容量，默认容量等于初始时的长度\n * test := make([]int,0) // 创建一个长度为0，容量为0 的数组 test = append(test, 1) //当数组的容量不够时，会重新申请一个两倍于当前长度的 slice，所以在使用过程中，尤其是频繁去往一个 slice 中 append 数据，需要尽可能给一个相对准确的容量， 减少分配过程的损耗。",normalizedContent:"在 go 中,slice（切片）是抽象在 array（数组）之上的特殊类型\n\n\n# array数组\n\n[3]int{} 表示 3 个整数的数组\n\n\n# slice切片\n\ntype slice struct {\n\tarray unsafe.pointer\n\tlen   int\n\tcap   int\n}\n\n\n1\n2\n3\n4\n5\n\n\nslice 的底层数据结构共分为三部分,如下：\n\n * array：指向所引用的数组指针（unsafe.pointer 可以表示任何可寻址的值的指针）\n * len：长度,当前引用切片的元素个数\n * cap：容量,当前引用切片的容量（底层数组的元素总数） 在实际使用中,cap 一定是大于或等于 len 的.否则会导致 panic\n\nnums := [3]int{}\nnums[0] = 1\ndnums := nums[0:2]\n# nums: [1 0 0] \n# dnums: [1 0], len: 2, cap: 3\n\n\n1\n2\n3\n4\n5\n\n\nslice 是对 array 的抽象,类型为 []t dnums 变量通过 nums[:] 进行赋值 dnums 变量通过 nums[:] 进行赋值\n\n\n# slice 的创建方式：\n\n * test := []int{2,3}\n * test := make([]int, 5, 5) // 创建一个类型为 int，长度为 5，容量为 5 的切片\n * test1 := make([]int, 3) //如果不指定容量，默认容量等于初始时的长度\n * test := make([]int,0) // 创建一个长度为0，容量为0 的数组 test = append(test, 1) //当数组的容量不够时，会重新申请一个两倍于当前长度的 slice，所以在使用过程中，尤其是频繁去往一个 slice 中 append 数据，需要尽可能给一个相对准确的容量， 减少分配过程的损耗。",charsets:{cjk:!0}},{title:"kata基本原理与架构",frontmatter:{title:"kata基本原理与架构",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/276ee1/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"​\t\tKata Containers项目来自于2017年12月合并的两个项目“IntelClear Containers”和“Hyper runV”，其目标是构建极其轻量级的VM，它们像容器一样执行，但提供工作负载隔离和添加虚拟机层的安全优势。",meta:[{name:"image",content:"https://fangfenghuang.github.io/../images/20220330151918.png"},{name:"twitter:title",content:"kata基本原理与架构"},{name:"twitter:description",content:"​\t\tKata Containers项目来自于2017年12月合并的两个项目“IntelClear Containers”和“Hyper runV”，其目标是构建极其轻量级的VM，它们像容器一样执行，但提供工作负载隔离和添加虚拟机层的安全优势。"},{name:"twitter:card",content:"summary_large_image"},{name:"twitter:image",content:"https://fangfenghuang.github.io/../images/20220330151918.png"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/01.kata%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9E%B6%E6%9E%84.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata基本原理与架构"},{property:"og:description",content:"​\t\tKata Containers项目来自于2017年12月合并的两个项目“IntelClear Containers”和“Hyper runV”，其目标是构建极其轻量级的VM，它们像容器一样执行，但提供工作负载隔离和添加虚拟机层的安全优势。"},{property:"og:image",content:"https://fangfenghuang.github.io/../images/20220330151918.png"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/01.kata%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9E%B6%E6%9E%84.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata基本原理与架构"},{itemprop:"description",content:"​\t\tKata Containers项目来自于2017年12月合并的两个项目“IntelClear Containers”和“Hyper runV”，其目标是构建极其轻量级的VM，它们像容器一样执行，但提供工作负载隔离和添加虚拟机层的安全优势。"},{itemprop:"image",content:"https://fangfenghuang.github.io/../images/20220330151918.png"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/01.kata%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9E%B6%E6%9E%84.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/01.kata基本原理与架构.md",key:"v-54d78b23",path:"/pages/276ee1/",headers:[{level:2,title:"The speed of containers, the security of VMs",slug:"the-speed-of-containers-the-security-of-vms",normalizedTitle:"the speed of containers, the security of vms",charIndex:498},{level:2,title:"项目思路：",slug:"项目思路",normalizedTitle:"项目思路：",charIndex:766},{level:2,title:"安全隔离",slug:"安全隔离",normalizedTitle:"安全隔离",charIndex:1046},{level:2,title:"kata隔离效益",slug:"kata隔离效益",normalizedTitle:"kata隔离效益",charIndex:1151},{level:2,title:"减少虚拟化开销",slug:"减少虚拟化开销",normalizedTitle:"减少虚拟化开销",charIndex:1543},{level:2,title:"怎样接上容器的生态",slug:"怎样接上容器的生态",normalizedTitle:"怎样接上容器的生态",charIndex:1716},{level:2,title:"和传统的runC的区别",slug:"和传统的runc的区别",normalizedTitle:"和传统的runc的区别",charIndex:1896},{level:2,title:"使用场景",slug:"使用场景",normalizedTitle:"使用场景",charIndex:2036},{level:2,title:"Kata Containers 2.x vs 1.x",slug:"kata-containers-2-x-vs-1-x",normalizedTitle:"kata containers 2.x vs 1.x",charIndex:2686},{level:2,title:"kata Runtime (shimv2)",slug:"kata-runtime-shimv2",normalizedTitle:"kata runtime (shimv2)",charIndex:3249},{level:2,title:"kata-agent",slug:"kata-agent",normalizedTitle:"kata-agent",charIndex:3767},{level:2,title:"虚拟化技术",slug:"虚拟化技术",normalizedTitle:"虚拟化技术",charIndex:3974},{level:3,title:"hypervisor",slug:"hypervisor",normalizedTitle:"hypervisor",charIndex:4182},{level:4,title:"qemu-system-x86_64",slug:"qemu-system-x86-64",normalizedTitle:"qemu-system-x86_64",charIndex:4502},{level:3,title:"cgroup",slug:"cgroup",normalizedTitle:"cgroup",charIndex:4555},{level:3,title:"客户机内核和镜像",slug:"客户机内核和镜像",normalizedTitle:"客户机内核和镜像",charIndex:4583},{level:3,title:"网络和存储",slug:"网络和存储",normalizedTitle:"网络和存储",charIndex:4622},{level:3,title:"CPU和内存",slug:"cpu和内存",normalizedTitle:"cpu和内存",charIndex:4653},{level:3,title:"VSOCK",slug:"vsock",normalizedTitle:"vsock",charIndex:2013},{level:3,title:"kata monitor",slug:"kata-monitor",normalizedTitle:"kata monitor",charIndex:4698},{level:2,title:"技术要点总结",slug:"技术要点总结",normalizedTitle:"技术要点总结",charIndex:4737},{level:2,title:"部署组件：",slug:"部署组件",normalizedTitle:"部署组件：",charIndex:5153},{level:2,title:"容器创建流程",slug:"容器创建流程",normalizedTitle:"容器创建流程",charIndex:5443},{level:2,title:"环境要求：",slug:"环境要求",normalizedTitle:"环境要求：",charIndex:5823},{level:2,title:"对资源管理的一些影响",slug:"对资源管理的一些影响",normalizedTitle:"对资源管理的一些影响",charIndex:5908},{level:2,title:"存储限制：",slug:"存储限制",normalizedTitle:"存储限制：",charIndex:6115},{level:2,title:"主机资源共享问题",slug:"主机资源共享问题",normalizedTitle:"主机资源共享问题",charIndex:6316},{level:3,title:"Privileged containers",slug:"privileged-containers",normalizedTitle:"privileged containers",charIndex:6455},{level:2,title:"docker切换成containerd的使用影响",slug:"docker切换成containerd的使用影响",normalizedTitle:"docker切换成containerd的使用影响",charIndex:6947},{level:2,title:"镜像：",slug:"镜像",normalizedTitle:"镜像：",charIndex:6976},{level:2,title:"网络限制",slug:"网络限制",normalizedTitle:"网络限制",charIndex:7334},{level:2,title:"资源约束管理",slug:"资源约束管理",normalizedTitle:"资源约束管理",charIndex:7688},{level:2,title:"内存相关问题：",slug:"内存相关问题",normalizedTitle:"内存相关问题：",charIndex:7820},{level:2,title:"runc、runtime、docker、containerd、cri-o一些名词解释",slug:"runc、runtime、docker、containerd、cri-o一些名词解释",normalizedTitle:"runc、runtime、docker、containerd、cri-o一些名词解释",charIndex:7891},{level:2,title:"Sandbox与Container",slug:"sandbox与container",normalizedTitle:"sandbox与container",charIndex:8296},{level:2,title:"k8s和docker分道扬镳的故事(v1.23之后)",slug:"k8s和docker分道扬镳的故事-v1-23之后",normalizedTitle:"k8s和docker分道扬镳的故事(v1.23之后)",charIndex:8471},{level:2,title:"docker vs containerd",slug:"docker-vs-containerd",normalizedTitle:"docker vs containerd",charIndex:8948},{level:2,title:"Kata Containers 与 gVisor",slug:"kata-containers-与-gvisor",normalizedTitle:"kata containers 与 gvisor",charIndex:9332},{level:2,title:"runc容器的安全性（隔离）问题",slug:"runc容器的安全性-隔离-问题",normalizedTitle:"runc容器的安全性（隔离）问题",charIndex:9839},{level:2,title:"理想的多租户状态",slug:"理想的多租户状态",normalizedTitle:"理想的多租户状态",charIndex:10085},{level:2,title:"k8s的原生多租户解决方案",slug:"k8s的原生多租户解决方案",normalizedTitle:"k8s的原生多租户解决方案",charIndex:10328},{level:2,title:"kata vs container",slug:"kata-vs-container",normalizedTitle:"kata vs container",charIndex:10503},{level:2,title:"kata vs VM（openstack）",slug:"kata-vs-vm-openstack",normalizedTitle:"kata vs vm（openstack）",charIndex:10527},{level:2,title:"kata vs kubevirt",slug:"kata-vs-kubevirt",normalizedTitle:"kata vs kubevirt",charIndex:10555}],headersStr:"The speed of containers, the security of VMs 项目思路： 安全隔离 kata隔离效益 减少虚拟化开销 怎样接上容器的生态 和传统的runC的区别 使用场景 Kata Containers 2.x vs 1.x kata Runtime (shimv2) kata-agent 虚拟化技术 hypervisor qemu-system-x86_64 cgroup 客户机内核和镜像 网络和存储 CPU和内存 VSOCK kata monitor 技术要点总结 部署组件： 容器创建流程 环境要求： 对资源管理的一些影响 存储限制： 主机资源共享问题 Privileged containers docker切换成containerd的使用影响 镜像： 网络限制 资源约束管理 内存相关问题： runc、runtime、docker、containerd、cri-o一些名词解释 Sandbox与Container k8s和docker分道扬镳的故事(v1.23之后) docker vs containerd Kata Containers 与 gVisor runc容器的安全性（隔离）问题 理想的多租户状态 k8s的原生多租户解决方案 kata vs container kata vs VM（openstack） kata vs kubevirt",content:'# 安全容器-Kata containers\n\n安全容器4类方案：\n\n * 传统OS容器配合安全机制（runc + SELinux, AppArmor, … + rootless mode）\n * 用户态内核的容器（Google的gVisor）\n * Library OS（UniKernel、Nabla Containers）\n * 轻量虚拟化的容器（Kata Containers、Firecracker）。\n\nKata Containers项目来自于2017年12月合并的两个项目“IntelClear Containers”和“Hyper runV”，其目标是构建极其轻量级的VM，它们像容器一样执行，但提供工作负载隔离和添加虚拟机层的安全优势。\n\nKataContainers社区于2018年5月发布了第一版1.0。由于Kata容器运行时兼容OCI，它可以无缝地插入Docker引擎和任何其他容器管理平台，如Kubernetes和Open-Stack，只需简单地将RUNC替换为Kata-runtime。\n\nKata Containers 的本质就是一个精简后的轻量级虚拟机。\n\n\n# The speed of containers, the security of VMs\n\n安全体现在:\n\n在专用内核中运行，提供网络、I/O 和内存的隔离，并且可以利用硬件强制隔离和虚拟化 VT 扩展。\n\n容器体现在：\n\n兼容性上：支持OCI以及CRI接口，和容器一样操作。 性能上：启动速度达到百毫秒级，接近容器。 开销上：内存开销小，类似容器。 与Kubernetes和Docker无缝衔接，并且是runc的替代品 开源基础设施基金会下的开源治理项目 多架构支持：x86、ARM、IBM Power、IBM s/390x\n\n\n# 项目思路：\n\n 1. 操作系统本身的容器机制没办法解决安全性问题，需要一个隔离层；\n 2. 虚拟机是一个现成的隔离层，AWS这样的云服务已经让全世界相信，对户来说，"secure of VM" 是可以满足需求的；\n 3. 虚机里面只要有个内核，就可以支持 OCI 规范的语义，在内核上跑个 Linux 应用这并不太难实现；\n 4. 虚机可能不够快，阻碍了它在容器环境的应用，那么可不可以拥有 "speed of container" 呢？ 现在，如果最后一个问题可以解决，那么它就是我们要的“安全的容器”了——这就是 Kata Containers。\n\n\n# 安全隔离\n\n安全性问题90%以上可以归结为隔离性问题\n\n * Docker安全隔离问题\n\n * 在Kata Containers中，每个容器都有自己的轻量级虚拟机和小内核，通过硬件虚拟化提供容器隔离。\n\n\n# kata隔离效益\n\nkata 实际上是通过创建轻量级虚拟机实现容器之间的资源隔离，再在虚拟机中运行容器运行时，这样就使容器在专用内核中运行，提供网络，I / O和内存的隔离，并可以通过虚拟化VT扩展利用硬件强制隔离。\n\n传统的操作系统容器技术是内核进程管理的一个延伸，容器进程本身是一组关联的进程，对于宿主机的调度器来说是完全可见的，一个 Pod 里的所有容器或进程，同时也都被宿主机调度和管理。这就意味着，在有大量容器的环境下，宿主机内核的负担很重。而采纳安全容器之后，从宿主机上是看不到这些完整的信息的，隔离层同时也降低了宿主机的调度开销，减少了维护负担，避免了容器之间、容器和宿主机之间的服务质量干扰。\n\n安全容器作为一道屏障，可以让宿主机的运维管理操作不能直接访问到应用的数据，这样，把用户的应用数据直接保护在沙箱里就可以降低对用户的授权要求，保障用户的数据私密性。\n\n\n# 减少虚拟化开销\n\n * 通过“少用不必要的内存”和“共享能共享的内存”来降低内存的开销，更小的内存不仅开销更小，启动也更轻快\n\n * 最关键的性能优化来自Intel Clear Containers。\n\n * 最关键的优化其实就是VM的启动时间进行裁剪，优化。\n\n * 使用特定的Linux内核，使用简化的initrd以及rootfs。\n\n\n# 怎样接上容器的生态\n\nkata-containers它本质上就一个容器的runtime。只要实现了OCI的接口就可以接上那些容器管理工具，只要实现了CRI接口，就可以接上k8s。\n\n所以kata-containers与OCI运行时规范兼容，可以通过CRI-O和Containerd实现与 Kubernetes CRI进行无缝协作。（Shim API）\n\n\n# 和传统的runC的区别\n\n最大的区别就在于container是放在虚拟机里面运行的，中间多了一层kernel后，外面的容器管理软件就无法管理，监控里面的进程、容器，也无法和里面通信。 解决方案就是在VM里面放了一个agent，内外通过VSOCK通信，这样子内外就打通了。\n\n\n# 使用场景\n\n * 主要使用场景是在公有云模式\n\n * 裸金属基础设施\n\n * 混合工作负载生产环境\n\n * 监管和敏感的生产环境\n\n * 多租户容器集群\n\n * 具有内核相关功能的遗留的依赖内核的工作负载\n\n\n# 架构（Kata2.0）\n\narchitecture\n\n\n\n\n\n整个kata生态系统分为 3 部分：\n\n * 容器调度系统（如 K8s）\n * 上层 runtime，这一层主要是实现了 CRI 接口，然后使用下层 runtime 对容器进行管理。上层 runtime 典型代表有 containerd 和 CRI-O。\n * 下层 runtime，这一层才会直接负责容器的管理，典型代表为 runc 和 Kata Containers。\n\n对 Kata Containers 来说，Kata Containers 会接收来自上层 runtime 的请求，实现容器的创建、删除等管理工作。\n\n同时，上图中也有 3 个通信协议存在：\n\n * CRI： 容器运行时接口，这是 k8s（实际上是 kubelet）和 上层 runtime 之间的通信接口\n * shim v2：上层 runtime （如 containerd ）和 下层 runtime（如 Kata Containers ） 之间的通信接口\n * agent 协议：这是 Kata Containers 内部的协议，用于 Kata Containers 的 shim 进程和 guest 内的 agent 之间的通信。\n\n\n# Kata Containers 2.x vs 1.x\n\n2.x 在开发上主要有以下几个重大的变更点：\n\n * agent 使用 Rust 重写\n\n * 只支持 shimv2，因此少了 proxy 和 shim 组件, shimv2 提供了 Containerd Runtime V2 (Shim API) 的 Kata 实现，从而使得 Kubernetes 场景下能够实现每个 Pod 一个 shim 进程 – shimv2。\n\n * 在 Kata Containers 2.x 中，核心组件只剩下两个：runtime 和agent ，且都在 kata-containers 这个 repo 下。\n\n在kata1.x， kata-container可以当做docker的一个插件，启动kata-container可以通过docker命令，但是kata2.x之后，kata去掉了docker的cli，不能通过docker启动kata runtime容器。\n\n在 Kata 1.x 中，面向用户的主要组件是运行时（kata-runtime）。对于 Kata 2.0，主要组件是 Kata containerd shim v2。 对“ Kata 运行时”的任何提及均应指代 Kata containerd shim v2。\n\n\n# kata Runtime (shimv2)\n\nruntime 为运行在宿主机上的、支持 shim v2 协议的进程。在这系列文章中，多数情况下可以将 runtime 、shimv2 视为同一内容。\n\n整个 Runtime ，其可执行程序为 containerd-shim-kata-v2，也即 shim 进程，这也是 Kata Containers 的入口点。Runtime 对上接受 containerd 的请求（通过 shimv2 “协议”），对 guest 来说，通过 guest 内的 agent 来控制 guest 内容器的创建、删除等管理。\n\nRuntime 和 agent 之间的采用了 ttrpc 协议通信，这是一个使用了 protocol buffer 编解码方式的类似 gRPC 的通信方式。该协议由 containerd 创建，用于 containered 和底层 runtime 之间的通信。在 Kata Containers 中， runtime 和 agent 也通过 ttrpc 通信。\n\nhttp://liubin.org/kata-dev-book/src/runtime-arch.html\n\n\n# kata-agent\n\nagent 可以作为 guest init 进程启动，也可以使用 systemd 等作为 init ，agent 作为普通进程启动。 http://liubin.org/kata-dev-book/src/agent-arch.html\n\nhttps://github.com/kata-containers/kata-containers/tree/main/src/agent\n\n\n# 虚拟化技术\n\nkata sanbox/vm的接口 在虚拟机中，我们需要提供以下virtio设备：(qemu)\n\n * 存储(virtio-fs)\n * 网络(tap): 基于性能考虑，qemu默认为vhost-net作为virtio-net 后端，默认配置还在评估中。\n * 控制（virtio-vsock）\n * 设备驱动（vfio）:设备直通\n * 动态资源管理(acpi): CPU、内存和设备热插拔\n\n\n# hypervisor\n\nKata Containers 支持多个ypervisor\n\n * QEMU 是一个成熟而复杂的管理程序。\n\n * Firecracker 是AWS 为无服务器场景开发的轻量级hypervisor。它只支持有限的虚拟设备。\n\n * Cloud-Hypervisor 是英特尔针对云原生场景设计的另一款轻量级hypervisor。\n\n * ACRN 是针对边缘场景开发的hypervisor。\n\n[root@localhost ~]#  kata-runtime kata-env | awk -v RS= \'/\\[Hypervisor\\]/\' | grep Path\n  Path = "/opt/kata/bin/qemu-system-x86_64"\n\n\n1\n2\n\n\n# qemu-system-x86_64\n\n\n# cgroup\n\n[[kata cgroup]]\n\n\n# 客户机内核和镜像\n\n[[guest kernel和guestos]]\n\n\n# 网络和存储\n\n[[kata网络和存储文件系统分析]]\n\n\n# CPU和内存\n\n[[kata CPU和内存]]\n\n\n# VSOCK\n\nVsock\n\n\n# kata monitor\n\n[[kata-monitor监控指标]]\n\n\n# 技术要点总结\n\n * VM作为安全沙箱\n\n * 支持多种虚拟化方案，qemu、firecracker、cloud-hypervisor等\n\n * vm中agent负责直接创建、更新、销毁容器\n\n * 使用vsock作为shim v2进程与agent的通信信道\n\n * 使用tc规则/macvtap连接veth和tap，来打通CNI和VM网络\n\n * 通过virtio-9p、virtio-fs将host上镜像挂载到vm中\n\n * 通过块设备透传，将host上块设备作为容器rootfs\n\n主要解决的问题：现有容器网络模型与现有虚拟机网络模型不匹配的问题，将CNI网络和虚机网络对接weth和tap连通方案：\n\n 1. tcfilter：使用tc rules将veth的ingress和egress队列分别对接tap的egress和ingress队列实现veth和tap的直连\n\n 2. macvtap：现有虚拟网卡连通技术\n\n\n# 部署组件：\n\n部署在主机上的：\n\n * cloud-hypervisor, firecracker, qemu, 和支持的二进制文件\n\n * containerd-shim-kata-v2\n\n * kata-collect-data.sh\n\n * kata-runtime\n\n镜像:\n\n * kata-containers.img和kata-containers-initrd.img：从 Kata GitHub 发布页面中提取\n\n * vmlinuz.container和vmlinuz-virtiofs.container：从 Kata GitHub 发布页面中提取\n\n\n# 容器创建流程\n\n * 用户创建容器\n\n * 容器管理器（containerd）创建kata runtime\n\n * kata-runtime加载配置文件，调用shimv2 API\n\n * kata-runtime运行hypervisor\n\n * hypervisor创建和开启虚拟机VM（创建容器根环境rootfs）\n\n * proxy作为 VM 引导的一部分启动\n\n * 运行时调用proxy的CreateSandboxAPI 请求proxy创建容器\n\n * 容器管理器将容器的控制权返回给运行ctr命令的用户\n\n[[一个kata容器的创建示例]]\n\n\n# 限制与约束:\n\n参考资料：\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md\n\n\n# 环境要求：\n\n * Kata Containers 需要嵌套虚拟化或裸机\n\n * 不支持k8s使用docker运行时，需要切换成containerd或cri-o\n\n\n# 对资源管理的一些影响\n\n * 无法进行container级别的控制 首先虚拟机本身就是host上的一个进程，仍然受host上的cgroup控制。所以仍然可以监控整个pod的资源使用数据，并控制pod的资源使用。 但是我们无法拿到container级别的数据，也无法直接通过host的cgroup来控制pod里面container的资源使用。\n\n * 虚拟化技术的一些影响\n\n * 虚拟化的overhead\n\n\n# 存储限制：\n\nKata 不支持 k8s subPath (emptydir?)\n\nhttps://github.com/kata-containers/runtime/issues/2812\n\nhttps://github.com/kata-containers/kata-containers/issues/1728\n\n实测configmap没有问题，可能只对于emptydir使用有问题?\n\n\n# 主机资源共享问题\n\nRUNC可以启动一个容器以特权模式访问主机设备，而Kata-runtime也支持此选项，但在这种情况下，获得对客户VM设备的完全访问。尽管这个选项被视为一种限制，但从安全性的角度来看，它确实是一种优势，因为在容器的根升级的情况下，不会毒害主机内核。\n\n\n# Privileged containers\n\nhttps://github.com/kata-containers/documentation/blob/master/Limitations.md#docker-run---privileged\n\nhttps://github.com/kata-containers/runtime/issues/1568\n\nhttps://github.com/kata-containers/documentation/blob/master/how-to/privileged.md\n\nrunc Kata 中的特权支持与容器有本质的不同。容器在来宾中以提升的功能运行，并被授予访问用户设备而不是主机设备的权限。securityContext privileged=true与 Kubernetes一起使用也是如此。\n\n在 runc 中，“--privileged”会将主机 dev 的功能转换为容器。\n\n在 Kata 中，“--privileged”意味着 Kata VM 中的容器可以访问 Kata guest VM 中的所有设备。\n\n\n# docker切换成containerd的使用影响\n\n\n# 镜像：\n\n * 镜像不复用：\n\ncontainerd采用自己的方式管理容器镜像，不能公用docker已有镜像，并且containerd镜像使用了命名空间进行了隔离，cri默认命名空间是k8s.io，containerd默认存储命名空间是default。\n\n * 镜像构建\n\n切换到 containerd 之后，需要注意 docker.sock 不再可用，也就意味着不能再在容器里面执行 docker 命令来构建镜像了，docker build 构建镜像的应用需要切换到无需 Dockerd 就可以构建镜像的工具，如 docker buildx、buildah、kaniko\n\n * 日志配置\n\ndocker 和 containerd 除了在常用命令上有些区别外，在容器日志及相关参数配置方面也存在一些差异。\n\n\n# 网络限制\n\n * kata不支持host网络\n\n一些使用主机网络的k8s组件和应用无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。\n\n * Kata Containers 不支持网络命名空间共享\n\nDocker 支持容器使用docker run --net=containers语法加入另一个容器命名空间的能力。这允许多个容器共享一个公共网络命名空间和放置在网络命名空间中的网络接口。Kata Containers 不支持网络命名空间共享。如果将 Kata 容器设置为共享runc容器的网络命名空间，则运行时会有效地接管分配给命名空间的所有网络接口并将它们绑定到 VM。因此，runc容器失去其网络连接。\n\n\n# 资源约束管理\n\nRUNC只使用控制组(cgroups)来限制、优先化、控制和计算资源，而对于kat-runtime，由于双安全层，为了得到相同的结果，可能有必要将约束应用到多个级别。因此，资源约束管理在RUNC中是粗粒度的，而在kata运行时是细粒度的。\n\n\n# 内存相关问题：\n\n虚拟机也应用了一些内存管理技术：KSM，balloon，这些可能也会对内存管理有一些影响。\n\n\n# 一些知识扩展：\n\n\n# runc、runtime、docker、containerd、cri-o一些名词解释\n\nrunC是一个根据OCI标准创建并运行容器的命令行工具（CLI tool）(low-level runtime)。\n\nDocker就是基于runC创建的，简单地说，runC就是docker中最为核心的部分\n\ncontainerd是容器技术标准化之后的产物，为了能够兼容OCI标准，将容器运行时及其管理功能从Docker Daemon剥离。理论上，即使不运行dockerd，也能够直接通过containerd来管理容器。（当然，containerd本身也只是一个守护进程，容器的实际运行时由后面介绍的runC控制。）\n\nKubelet 是一个CRI客户端，并期望CRI实现来处理接口的服务端。CRI-O和Containerd是依赖OCI兼容运行时来管理容器实例的CRI实现（high level runtime）。\n\n\n# Sandbox与Container\n\nSandbox是一个统一、基本的隔离空间，一个虚拟机中只有一个Sandbox，但是该Sandbox内可以有多个容器，这就对应了Kubernetes Pod的模型；对于Docker来说，一般一个Sandbox内只运行一个Container。无论是哪种情况，Sandbox的ID与内部第一个容器的ID相同。\n\n\n# k8s和docker分道扬镳的故事(v1.23之后)\n\nhttps://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#dockershim-deprecation\n\nhttps://kubernetes.io/zh/blog/2020/12/02/dont-panic-kubernetes-and-docker/\n\ndocker是一个完整的技术堆栈，是一个用户友好的抽象层，但是，对于k8s来说，并不是设计用来嵌入到 Kubernetes的（非CRI容器运行时接口），实际上k8s需要的是containerd（docker中的一个高级运行时功能），由于Docker 不兼容 CRI，Kubernetes 集群不得不引入一个叫做 Dockershim 的工具来访问它真正需要的 containerd。（增加运维成本，容易出错）。\n\n于是k8s决定不再支持Dockershim，用户应该将容器运行时从 Docker 切换到其他受支持的容器运行时。\n\n\n# docker vs containerd\n\ndocker由 docker-client ,dockerd,containerd,docker-shim,runc组成，所以containerd是docker的基础组件之一\n\n从k8s的角度看，可以选择 containerd 或 docker 作为运行时组件：Containerd 调用链更短，组件更少，更稳定，占用节点资源更少\n\n调用链\n\nDocker 作为 k8s 容器运行时，调用关系如下：\n\nkubelet --\x3e docker shim （在 kubelet 进程中） --\x3e dockerd --\x3e containerd\n\nContainerd 作为 k8s 容器运行时，调用关系如下：\n\nkubelet --\x3e cri plugin（在 containerd 进程中） --\x3e containerd\n\n\n# Kata Containers 与 gVisor\n\n在2018年，Google 公司则发布了一个名叫 gVisor 的项目。gVisor 项目给容器进程配置一个用 Go 语言实现的、运行在用户态的、极小的“独立内核”。这个内核对容器进程暴露 Linux 内核 ABI，扮演着“Guest Kernel”的角色，从而达到了将容器和宿主机隔离开的目的。\n\nkata和gvisor的本质，都是给进程分配了一个独立的操作系统内核，从而避免了让容器共享宿主机的内核。这样，容器进程能够看到的攻击面，就从整个宿主机内核变成了一个极小的、独立的、以容器为单位的内核，从而有效解决了容器进程发生“逃逸”或者夺取整个宿主机的控制权的问题。\n\n而它们的区别在于，Kata Containers 使用的是传统的虚拟化技术，通过虚拟硬件模拟出了一台“小虚拟机”，然后在这个小虚拟机里安装了一个裁剪后的 Linux 内核来实现强隔离。\n\n而 gVisor 的做法则更加激进，Google 的工程师直接用 Go 语言“模拟”出了一个运行在用户态的操作系统内核，然后通过这个模拟的内核来代替容器进程向宿主机发起有限的、可控的系统调用。\n\n\n# runc容器的安全性（隔离）问题\n\nDocker的安全问题本质上就是容器技术的安全性问题：基于软件隔离，这包括共用内核问题以及Namespace还不够完善的限制：\n\n 1. /proc、/sys等未完全隔离\n 2. Top, free, iostat等命令展示的信息未隔离\n 3. Root用户未隔离\n 4. /dev设备未隔离\n 5. 内核模块未隔离\n 6. SELinux、time、syslog等所有现有Namespace之外的信息都未隔离 镜像本身不安全也会导致安全性问题。\n\n\n# 理想的多租户状态\n\n理想来说，平台的各个租户（tenant）之间应该无法感受到彼此的存在，表现得就像每个租户独占整个平台一样。具体来说就是，我不能看到其它租户的资源，我的资源跑满了，也不能影响其它租户的资源使用。我无法从网络或内核上其它租户。\n\nKubernetes 当然做不到，其中最大的两个原因是：\n\n * kube-apiserver 是整个集群中的单例，并且没有多租户概念；\n\n * 默认的 oci-runtime 是 runc，而 runc 启动的容器是共享内核的。\n\n\n# k8s的原生多租户解决方案\n\n * 命名空间隔离√\n * RBAC权限管理√\n * 资源配额ResourceQuota√\n * Pod Security Policy\n * pod调度：绑定节点、污点容忍√\n * 网络策略限制√\n * 服务网格：Istio√\n * StorageClass存储资源隔离（感觉意义不大）\n * 多集群隔离管理\n\n\n# kata vs container\n\n\n\n\n# kata vs VM（openstack）\n\n\n\n\n# kata vs kubevirt\n\n * (kata)：在虚拟机内使用容器：可以创建一个包含多个容器的应用，并且都在虚拟机内运行；可以同时在多个虚拟机上创建/销毁容器，而虚拟机则可在使用现有虚拟机基础设施在物理服务器之间迁移。\n * (kubevirt)：在容器内使用虚拟机：利用资源管理技术；利用构建和部署工具\n * Kubevirt是借用Kubernetes的扩展性来管理VM（通过CRD管理虚拟机），你用到的是一个真正的VM；\n * KubeVirt旨在提供尽可能多的虚拟机功能\n * Kata-container是一个容器运行时，有着VM的安全性和隔离性，以容器的方式运行，有着容器的速度和特点，但不是一个真正的VM；Kata容器则试图为虚拟机提供类似容器的体验\n * Virtlet是把VM当成一个CRI来跑了，是按Pod API来定义一个VM，所以VM的很多功能比如热迁移等，Virtlet是没法满足VM的全部特性的，算是一个70%功能的VM\n\n\n# 参考资料\n\nhttps://github.com/kata-containers',normalizedContent:'# 安全容器-kata containers\n\n安全容器4类方案：\n\n * 传统os容器配合安全机制（runc + selinux, apparmor, … + rootless mode）\n * 用户态内核的容器（google的gvisor）\n * library os（unikernel、nabla containers）\n * 轻量虚拟化的容器（kata containers、firecracker）。\n\nkata containers项目来自于2017年12月合并的两个项目“intelclear containers”和“hyper runv”，其目标是构建极其轻量级的vm，它们像容器一样执行，但提供工作负载隔离和添加虚拟机层的安全优势。\n\nkatacontainers社区于2018年5月发布了第一版1.0。由于kata容器运行时兼容oci，它可以无缝地插入docker引擎和任何其他容器管理平台，如kubernetes和open-stack，只需简单地将runc替换为kata-runtime。\n\nkata containers 的本质就是一个精简后的轻量级虚拟机。\n\n\n# the speed of containers, the security of vms\n\n安全体现在:\n\n在专用内核中运行，提供网络、i/o 和内存的隔离，并且可以利用硬件强制隔离和虚拟化 vt 扩展。\n\n容器体现在：\n\n兼容性上：支持oci以及cri接口，和容器一样操作。 性能上：启动速度达到百毫秒级，接近容器。 开销上：内存开销小，类似容器。 与kubernetes和docker无缝衔接，并且是runc的替代品 开源基础设施基金会下的开源治理项目 多架构支持：x86、arm、ibm power、ibm s/390x\n\n\n# 项目思路：\n\n 1. 操作系统本身的容器机制没办法解决安全性问题，需要一个隔离层；\n 2. 虚拟机是一个现成的隔离层，aws这样的云服务已经让全世界相信，对户来说，"secure of vm" 是可以满足需求的；\n 3. 虚机里面只要有个内核，就可以支持 oci 规范的语义，在内核上跑个 linux 应用这并不太难实现；\n 4. 虚机可能不够快，阻碍了它在容器环境的应用，那么可不可以拥有 "speed of container" 呢？ 现在，如果最后一个问题可以解决，那么它就是我们要的“安全的容器”了——这就是 kata containers。\n\n\n# 安全隔离\n\n安全性问题90%以上可以归结为隔离性问题\n\n * docker安全隔离问题\n\n * 在kata containers中，每个容器都有自己的轻量级虚拟机和小内核，通过硬件虚拟化提供容器隔离。\n\n\n# kata隔离效益\n\nkata 实际上是通过创建轻量级虚拟机实现容器之间的资源隔离，再在虚拟机中运行容器运行时，这样就使容器在专用内核中运行，提供网络，i / o和内存的隔离，并可以通过虚拟化vt扩展利用硬件强制隔离。\n\n传统的操作系统容器技术是内核进程管理的一个延伸，容器进程本身是一组关联的进程，对于宿主机的调度器来说是完全可见的，一个 pod 里的所有容器或进程，同时也都被宿主机调度和管理。这就意味着，在有大量容器的环境下，宿主机内核的负担很重。而采纳安全容器之后，从宿主机上是看不到这些完整的信息的，隔离层同时也降低了宿主机的调度开销，减少了维护负担，避免了容器之间、容器和宿主机之间的服务质量干扰。\n\n安全容器作为一道屏障，可以让宿主机的运维管理操作不能直接访问到应用的数据，这样，把用户的应用数据直接保护在沙箱里就可以降低对用户的授权要求，保障用户的数据私密性。\n\n\n# 减少虚拟化开销\n\n * 通过“少用不必要的内存”和“共享能共享的内存”来降低内存的开销，更小的内存不仅开销更小，启动也更轻快\n\n * 最关键的性能优化来自intel clear containers。\n\n * 最关键的优化其实就是vm的启动时间进行裁剪，优化。\n\n * 使用特定的linux内核，使用简化的initrd以及rootfs。\n\n\n# 怎样接上容器的生态\n\nkata-containers它本质上就一个容器的runtime。只要实现了oci的接口就可以接上那些容器管理工具，只要实现了cri接口，就可以接上k8s。\n\n所以kata-containers与oci运行时规范兼容，可以通过cri-o和containerd实现与 kubernetes cri进行无缝协作。（shim api）\n\n\n# 和传统的runc的区别\n\n最大的区别就在于container是放在虚拟机里面运行的，中间多了一层kernel后，外面的容器管理软件就无法管理，监控里面的进程、容器，也无法和里面通信。 解决方案就是在vm里面放了一个agent，内外通过vsock通信，这样子内外就打通了。\n\n\n# 使用场景\n\n * 主要使用场景是在公有云模式\n\n * 裸金属基础设施\n\n * 混合工作负载生产环境\n\n * 监管和敏感的生产环境\n\n * 多租户容器集群\n\n * 具有内核相关功能的遗留的依赖内核的工作负载\n\n\n# 架构（kata2.0）\n\narchitecture\n\n\n\n\n\n整个kata生态系统分为 3 部分：\n\n * 容器调度系统（如 k8s）\n * 上层 runtime，这一层主要是实现了 cri 接口，然后使用下层 runtime 对容器进行管理。上层 runtime 典型代表有 containerd 和 cri-o。\n * 下层 runtime，这一层才会直接负责容器的管理，典型代表为 runc 和 kata containers。\n\n对 kata containers 来说，kata containers 会接收来自上层 runtime 的请求，实现容器的创建、删除等管理工作。\n\n同时，上图中也有 3 个通信协议存在：\n\n * cri： 容器运行时接口，这是 k8s（实际上是 kubelet）和 上层 runtime 之间的通信接口\n * shim v2：上层 runtime （如 containerd ）和 下层 runtime（如 kata containers ） 之间的通信接口\n * agent 协议：这是 kata containers 内部的协议，用于 kata containers 的 shim 进程和 guest 内的 agent 之间的通信。\n\n\n# kata containers 2.x vs 1.x\n\n2.x 在开发上主要有以下几个重大的变更点：\n\n * agent 使用 rust 重写\n\n * 只支持 shimv2，因此少了 proxy 和 shim 组件, shimv2 提供了 containerd runtime v2 (shim api) 的 kata 实现，从而使得 kubernetes 场景下能够实现每个 pod 一个 shim 进程 – shimv2。\n\n * 在 kata containers 2.x 中，核心组件只剩下两个：runtime 和agent ，且都在 kata-containers 这个 repo 下。\n\n在kata1.x， kata-container可以当做docker的一个插件，启动kata-container可以通过docker命令，但是kata2.x之后，kata去掉了docker的cli，不能通过docker启动kata runtime容器。\n\n在 kata 1.x 中，面向用户的主要组件是运行时（kata-runtime）。对于 kata 2.0，主要组件是 kata containerd shim v2。 对“ kata 运行时”的任何提及均应指代 kata containerd shim v2。\n\n\n# kata runtime (shimv2)\n\nruntime 为运行在宿主机上的、支持 shim v2 协议的进程。在这系列文章中，多数情况下可以将 runtime 、shimv2 视为同一内容。\n\n整个 runtime ，其可执行程序为 containerd-shim-kata-v2，也即 shim 进程，这也是 kata containers 的入口点。runtime 对上接受 containerd 的请求（通过 shimv2 “协议”），对 guest 来说，通过 guest 内的 agent 来控制 guest 内容器的创建、删除等管理。\n\nruntime 和 agent 之间的采用了 ttrpc 协议通信，这是一个使用了 protocol buffer 编解码方式的类似 grpc 的通信方式。该协议由 containerd 创建，用于 containered 和底层 runtime 之间的通信。在 kata containers 中， runtime 和 agent 也通过 ttrpc 通信。\n\nhttp://liubin.org/kata-dev-book/src/runtime-arch.html\n\n\n# kata-agent\n\nagent 可以作为 guest init 进程启动，也可以使用 systemd 等作为 init ，agent 作为普通进程启动。 http://liubin.org/kata-dev-book/src/agent-arch.html\n\nhttps://github.com/kata-containers/kata-containers/tree/main/src/agent\n\n\n# 虚拟化技术\n\nkata sanbox/vm的接口 在虚拟机中，我们需要提供以下virtio设备：(qemu)\n\n * 存储(virtio-fs)\n * 网络(tap): 基于性能考虑，qemu默认为vhost-net作为virtio-net 后端，默认配置还在评估中。\n * 控制（virtio-vsock）\n * 设备驱动（vfio）:设备直通\n * 动态资源管理(acpi): cpu、内存和设备热插拔\n\n\n# hypervisor\n\nkata containers 支持多个ypervisor\n\n * qemu 是一个成熟而复杂的管理程序。\n\n * firecracker 是aws 为无服务器场景开发的轻量级hypervisor。它只支持有限的虚拟设备。\n\n * cloud-hypervisor 是英特尔针对云原生场景设计的另一款轻量级hypervisor。\n\n * acrn 是针对边缘场景开发的hypervisor。\n\n[root@localhost ~]#  kata-runtime kata-env | awk -v rs= \'/\\[hypervisor\\]/\' | grep path\n  path = "/opt/kata/bin/qemu-system-x86_64"\n\n\n1\n2\n\n\n# qemu-system-x86_64\n\n\n# cgroup\n\n[[kata cgroup]]\n\n\n# 客户机内核和镜像\n\n[[guest kernel和guestos]]\n\n\n# 网络和存储\n\n[[kata网络和存储文件系统分析]]\n\n\n# cpu和内存\n\n[[kata cpu和内存]]\n\n\n# vsock\n\nvsock\n\n\n# kata monitor\n\n[[kata-monitor监控指标]]\n\n\n# 技术要点总结\n\n * vm作为安全沙箱\n\n * 支持多种虚拟化方案，qemu、firecracker、cloud-hypervisor等\n\n * vm中agent负责直接创建、更新、销毁容器\n\n * 使用vsock作为shim v2进程与agent的通信信道\n\n * 使用tc规则/macvtap连接veth和tap，来打通cni和vm网络\n\n * 通过virtio-9p、virtio-fs将host上镜像挂载到vm中\n\n * 通过块设备透传，将host上块设备作为容器rootfs\n\n主要解决的问题：现有容器网络模型与现有虚拟机网络模型不匹配的问题，将cni网络和虚机网络对接weth和tap连通方案：\n\n 1. tcfilter：使用tc rules将veth的ingress和egress队列分别对接tap的egress和ingress队列实现veth和tap的直连\n\n 2. macvtap：现有虚拟网卡连通技术\n\n\n# 部署组件：\n\n部署在主机上的：\n\n * cloud-hypervisor, firecracker, qemu, 和支持的二进制文件\n\n * containerd-shim-kata-v2\n\n * kata-collect-data.sh\n\n * kata-runtime\n\n镜像:\n\n * kata-containers.img和kata-containers-initrd.img：从 kata github 发布页面中提取\n\n * vmlinuz.container和vmlinuz-virtiofs.container：从 kata github 发布页面中提取\n\n\n# 容器创建流程\n\n * 用户创建容器\n\n * 容器管理器（containerd）创建kata runtime\n\n * kata-runtime加载配置文件，调用shimv2 api\n\n * kata-runtime运行hypervisor\n\n * hypervisor创建和开启虚拟机vm（创建容器根环境rootfs）\n\n * proxy作为 vm 引导的一部分启动\n\n * 运行时调用proxy的createsandboxapi 请求proxy创建容器\n\n * 容器管理器将容器的控制权返回给运行ctr命令的用户\n\n[[一个kata容器的创建示例]]\n\n\n# 限制与约束:\n\n参考资料：\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/limitations.md\n\n\n# 环境要求：\n\n * kata containers 需要嵌套虚拟化或裸机\n\n * 不支持k8s使用docker运行时，需要切换成containerd或cri-o\n\n\n# 对资源管理的一些影响\n\n * 无法进行container级别的控制 首先虚拟机本身就是host上的一个进程，仍然受host上的cgroup控制。所以仍然可以监控整个pod的资源使用数据，并控制pod的资源使用。 但是我们无法拿到container级别的数据，也无法直接通过host的cgroup来控制pod里面container的资源使用。\n\n * 虚拟化技术的一些影响\n\n * 虚拟化的overhead\n\n\n# 存储限制：\n\nkata 不支持 k8s subpath (emptydir?)\n\nhttps://github.com/kata-containers/runtime/issues/2812\n\nhttps://github.com/kata-containers/kata-containers/issues/1728\n\n实测configmap没有问题，可能只对于emptydir使用有问题?\n\n\n# 主机资源共享问题\n\nrunc可以启动一个容器以特权模式访问主机设备，而kata-runtime也支持此选项，但在这种情况下，获得对客户vm设备的完全访问。尽管这个选项被视为一种限制，但从安全性的角度来看，它确实是一种优势，因为在容器的根升级的情况下，不会毒害主机内核。\n\n\n# privileged containers\n\nhttps://github.com/kata-containers/documentation/blob/master/limitations.md#docker-run---privileged\n\nhttps://github.com/kata-containers/runtime/issues/1568\n\nhttps://github.com/kata-containers/documentation/blob/master/how-to/privileged.md\n\nrunc kata 中的特权支持与容器有本质的不同。容器在来宾中以提升的功能运行，并被授予访问用户设备而不是主机设备的权限。securitycontext privileged=true与 kubernetes一起使用也是如此。\n\n在 runc 中，“--privileged”会将主机 dev 的功能转换为容器。\n\n在 kata 中，“--privileged”意味着 kata vm 中的容器可以访问 kata guest vm 中的所有设备。\n\n\n# docker切换成containerd的使用影响\n\n\n# 镜像：\n\n * 镜像不复用：\n\ncontainerd采用自己的方式管理容器镜像，不能公用docker已有镜像，并且containerd镜像使用了命名空间进行了隔离，cri默认命名空间是k8s.io，containerd默认存储命名空间是default。\n\n * 镜像构建\n\n切换到 containerd 之后，需要注意 docker.sock 不再可用，也就意味着不能再在容器里面执行 docker 命令来构建镜像了，docker build 构建镜像的应用需要切换到无需 dockerd 就可以构建镜像的工具，如 docker buildx、buildah、kaniko\n\n * 日志配置\n\ndocker 和 containerd 除了在常用命令上有些区别外，在容器日志及相关参数配置方面也存在一些差异。\n\n\n# 网络限制\n\n * kata不支持host网络\n\n一些使用主机网络的k8s组件和应用无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。\n\n * kata containers 不支持网络命名空间共享\n\ndocker 支持容器使用docker run --net=containers语法加入另一个容器命名空间的能力。这允许多个容器共享一个公共网络命名空间和放置在网络命名空间中的网络接口。kata containers 不支持网络命名空间共享。如果将 kata 容器设置为共享runc容器的网络命名空间，则运行时会有效地接管分配给命名空间的所有网络接口并将它们绑定到 vm。因此，runc容器失去其网络连接。\n\n\n# 资源约束管理\n\nrunc只使用控制组(cgroups)来限制、优先化、控制和计算资源，而对于kat-runtime，由于双安全层，为了得到相同的结果，可能有必要将约束应用到多个级别。因此，资源约束管理在runc中是粗粒度的，而在kata运行时是细粒度的。\n\n\n# 内存相关问题：\n\n虚拟机也应用了一些内存管理技术：ksm，balloon，这些可能也会对内存管理有一些影响。\n\n\n# 一些知识扩展：\n\n\n# runc、runtime、docker、containerd、cri-o一些名词解释\n\nrunc是一个根据oci标准创建并运行容器的命令行工具（cli tool）(low-level runtime)。\n\ndocker就是基于runc创建的，简单地说，runc就是docker中最为核心的部分\n\ncontainerd是容器技术标准化之后的产物，为了能够兼容oci标准，将容器运行时及其管理功能从docker daemon剥离。理论上，即使不运行dockerd，也能够直接通过containerd来管理容器。（当然，containerd本身也只是一个守护进程，容器的实际运行时由后面介绍的runc控制。）\n\nkubelet 是一个cri客户端，并期望cri实现来处理接口的服务端。cri-o和containerd是依赖oci兼容运行时来管理容器实例的cri实现（high level runtime）。\n\n\n# sandbox与container\n\nsandbox是一个统一、基本的隔离空间，一个虚拟机中只有一个sandbox，但是该sandbox内可以有多个容器，这就对应了kubernetes pod的模型；对于docker来说，一般一个sandbox内只运行一个container。无论是哪种情况，sandbox的id与内部第一个容器的id相同。\n\n\n# k8s和docker分道扬镳的故事(v1.23之后)\n\nhttps://github.com/kubernetes/kubernetes/blob/master/changelog/changelog-1.20.md#dockershim-deprecation\n\nhttps://kubernetes.io/zh/blog/2020/12/02/dont-panic-kubernetes-and-docker/\n\ndocker是一个完整的技术堆栈，是一个用户友好的抽象层，但是，对于k8s来说，并不是设计用来嵌入到 kubernetes的（非cri容器运行时接口），实际上k8s需要的是containerd（docker中的一个高级运行时功能），由于docker 不兼容 cri，kubernetes 集群不得不引入一个叫做 dockershim 的工具来访问它真正需要的 containerd。（增加运维成本，容易出错）。\n\n于是k8s决定不再支持dockershim，用户应该将容器运行时从 docker 切换到其他受支持的容器运行时。\n\n\n# docker vs containerd\n\ndocker由 docker-client ,dockerd,containerd,docker-shim,runc组成，所以containerd是docker的基础组件之一\n\n从k8s的角度看，可以选择 containerd 或 docker 作为运行时组件：containerd 调用链更短，组件更少，更稳定，占用节点资源更少\n\n调用链\n\ndocker 作为 k8s 容器运行时，调用关系如下：\n\nkubelet --\x3e docker shim （在 kubelet 进程中） --\x3e dockerd --\x3e containerd\n\ncontainerd 作为 k8s 容器运行时，调用关系如下：\n\nkubelet --\x3e cri plugin（在 containerd 进程中） --\x3e containerd\n\n\n# kata containers 与 gvisor\n\n在2018年，google 公司则发布了一个名叫 gvisor 的项目。gvisor 项目给容器进程配置一个用 go 语言实现的、运行在用户态的、极小的“独立内核”。这个内核对容器进程暴露 linux 内核 abi，扮演着“guest kernel”的角色，从而达到了将容器和宿主机隔离开的目的。\n\nkata和gvisor的本质，都是给进程分配了一个独立的操作系统内核，从而避免了让容器共享宿主机的内核。这样，容器进程能够看到的攻击面，就从整个宿主机内核变成了一个极小的、独立的、以容器为单位的内核，从而有效解决了容器进程发生“逃逸”或者夺取整个宿主机的控制权的问题。\n\n而它们的区别在于，kata containers 使用的是传统的虚拟化技术，通过虚拟硬件模拟出了一台“小虚拟机”，然后在这个小虚拟机里安装了一个裁剪后的 linux 内核来实现强隔离。\n\n而 gvisor 的做法则更加激进，google 的工程师直接用 go 语言“模拟”出了一个运行在用户态的操作系统内核，然后通过这个模拟的内核来代替容器进程向宿主机发起有限的、可控的系统调用。\n\n\n# runc容器的安全性（隔离）问题\n\ndocker的安全问题本质上就是容器技术的安全性问题：基于软件隔离，这包括共用内核问题以及namespace还不够完善的限制：\n\n 1. /proc、/sys等未完全隔离\n 2. top, free, iostat等命令展示的信息未隔离\n 3. root用户未隔离\n 4. /dev设备未隔离\n 5. 内核模块未隔离\n 6. selinux、time、syslog等所有现有namespace之外的信息都未隔离 镜像本身不安全也会导致安全性问题。\n\n\n# 理想的多租户状态\n\n理想来说，平台的各个租户（tenant）之间应该无法感受到彼此的存在，表现得就像每个租户独占整个平台一样。具体来说就是，我不能看到其它租户的资源，我的资源跑满了，也不能影响其它租户的资源使用。我无法从网络或内核上其它租户。\n\nkubernetes 当然做不到，其中最大的两个原因是：\n\n * kube-apiserver 是整个集群中的单例，并且没有多租户概念；\n\n * 默认的 oci-runtime 是 runc，而 runc 启动的容器是共享内核的。\n\n\n# k8s的原生多租户解决方案\n\n * 命名空间隔离√\n * rbac权限管理√\n * 资源配额resourcequota√\n * pod security policy\n * pod调度：绑定节点、污点容忍√\n * 网络策略限制√\n * 服务网格：istio√\n * storageclass存储资源隔离（感觉意义不大）\n * 多集群隔离管理\n\n\n# kata vs container\n\n\n\n\n# kata vs vm（openstack）\n\n\n\n\n# kata vs kubevirt\n\n * (kata)：在虚拟机内使用容器：可以创建一个包含多个容器的应用，并且都在虚拟机内运行；可以同时在多个虚拟机上创建/销毁容器，而虚拟机则可在使用现有虚拟机基础设施在物理服务器之间迁移。\n * (kubevirt)：在容器内使用虚拟机：利用资源管理技术；利用构建和部署工具\n * kubevirt是借用kubernetes的扩展性来管理vm（通过crd管理虚拟机），你用到的是一个真正的vm；\n * kubevirt旨在提供尽可能多的虚拟机功能\n * kata-container是一个容器运行时，有着vm的安全性和隔离性，以容器的方式运行，有着容器的速度和特点，但不是一个真正的vm；kata容器则试图为虚拟机提供类似容器的体验\n * virtlet是把vm当成一个cri来跑了，是按pod api来定义一个vm，所以vm的很多功能比如热迁移等，virtlet是没法满足vm的全部特性的，算是一个70%功能的vm\n\n\n# 参考资料\n\nhttps://github.com/kata-containers',charsets:{cjk:!0}},{title:"kata网络和存储文件系统分析",frontmatter:{title:"kata网络和存储文件系统分析",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/25c61d/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:'internetworking_model="tcfilter"\nTC-filter 是默认设置，因为它允许更简单的配置、更好的 CNI 插件兼容性以及与 MACVTAP 相当的性能。',meta:[{name:"twitter:title",content:"kata网络和存储文件系统分析"},{name:"twitter:description",content:'internetworking_model="tcfilter"\nTC-filter 是默认设置，因为它允许更简单的配置、更好的 CNI 插件兼容性以及与 MACVTAP 相当的性能。'},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/02.kata%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata网络和存储文件系统分析"},{property:"og:description",content:'internetworking_model="tcfilter"\nTC-filter 是默认设置，因为它允许更简单的配置、更好的 CNI 插件兼容性以及与 MACVTAP 相当的性能。'},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/02.kata%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata网络和存储文件系统分析"},{itemprop:"description",content:'internetworking_model="tcfilter"\nTC-filter 是默认设置，因为它允许更简单的配置、更好的 CNI 插件兼容性以及与 MACVTAP 相当的性能。'}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/02.kata%E7%BD%91%E7%BB%9C%E5%92%8C%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/02.kata网络和存储文件系统分析.md",key:"v-5167d661",path:"/pages/25c61d/",headers:[{level:2,title:"网络流量走向：",slug:"网络流量走向",normalizedTitle:"网络流量走向：",charIndex:1115},{level:2,title:"virtio-9p 和 virtio-fs 文件系统对比",slug:"virtio-9p-和-virtio-fs-文件系统对比",normalizedTitle:"virtio-9p 和 virtio-fs 文件系统对比",charIndex:4393},{level:2,title:"virtiofs",slug:"virtiofs",normalizedTitle:"virtiofs",charIndex:4373},{level:2,title:"存储路径：",slug:"存储路径",normalizedTitle:"存储路径：",charIndex:8420},{level:3,title:"virtiofsd cache",slug:"virtiofsd-cache",normalizedTitle:"virtiofsd cache",charIndex:9206},{level:3,title:"DAX(直接访问)",slug:"dax-直接访问",normalizedTitle:"dax(直接访问)",charIndex:9369},{level:3,title:"virtiofsd已知问题汇总",slug:"virtiofsd已知问题汇总",normalizedTitle:"virtiofsd已知问题汇总",charIndex:9728},{level:2,title:"containerd的Snapshotter",slug:"containerd的snapshotter",normalizedTitle:"containerd的snapshotter",charIndex:9804}],headersStr:"网络流量走向： virtio-9p 和 virtio-fs 文件系统对比 virtiofs 存储路径： virtiofsd cache DAX(直接访问) virtiofsd已知问题汇总 containerd的Snapshotter",content:'# 网络\n\n虚拟机连接容器网络接口的方式：\n\n * macvtap（早期默认）：创建了一个 MACVTAP 设备以直接连接到eth0设备\n * none(使用自定义网络，只创建一个 tap 设备，不创建 veth pair)\n * tcfilter(通过 tc filter 规则将插件提供的网络接口流量重定向到连接到 VM 的 tap 接口) （现在默认）\n * bridge：（已弃用）\n\n# Internetworking model\n# Determines how the VM should be connected to the\n# the container network interface\n# Options:\n#\n#   - macvtap\n#     Used when the Container network interface can be bridged using\n#     macvtap.\n#\n#   - none\n#     Used when customize network. Only creates a tap device. No veth pair.\n#\n#   - tcfilter\n#     Uses tc filter rules to redirect traffic from the network interface\n#     provided by plugin to a tap interface connected to the VM.\n#\ninternetworking_model="tcfilter"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nTC-filter 是默认设置，因为它允许更简单的配置、更好的 CNI 插件兼容性以及与 MACVTAP 相当的性能。\n\n * eth0属于veth-pair类型接口，一端接入cni创建的网络命名空间，一端接入宿主机\n * tap0_kata属于tap类型接口，一端接入cni创建的网络命名空间，一端接入qemu创建的hypervisor\n * 使用tc策略打通eth0网络接口和tap0_kata网络接口\n\nSandbox环境中只有eth0网络接口，这个接口是qemu和tap模拟出的接口，mac、ip、掩码都和宿主机中cni创建的网络命名空间中eth0的配置一样\n\nContainer运行在Sandbox环境中，Container采用共享宿主机网络命名空间方式创建容器，所以在container中看到的网络配置和Sandbox一样\n\n\n# 网络流量走向：\n\n流量进入宿主机后首先由物理网络通过veth pair接入到net namespace，net namespace中在使用TC filter 规则流量到tap网络接口，然后再通过tap网络接口把流量送入虚拟化环境中，最后虚拟化环境中的容器共享宿主机网络命名空间后就可以在容器中拿到网络流量\n\n[root@rqy-k8s-1 hff]# ip netns exec cni-c1dea1e8-5df7-f16e-4810-e51d8895ca20 ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n valid_lft forever preferred_lft forever\n inet6 ::1/128 scope host\n valid_lft forever preferred_lft forever\n2: tunl0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000\n link/ipip 0.0.0.0 brd 0.0.0.0\n4: eth0@if113: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc noqueue state UP group default qlen 1000\n link/ether de:95:a9:f2:89:db brd ff:ff:ff:ff:ff:ff link-netnsid 0\n inet 10.192.181.55/32 scope global eth0\n valid_lft forever preferred_lft forever\n inet6 fe80::dc95:a9ff:fef2:89db/64 scope link\n valid_lft forever preferred_lft forever\n5: tap0_kata: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc mq state UNKNOWN group default qlen 1000\n link/ether ee:32:c5:ac:30:06 brd ff:ff:ff:ff:ff:ff\n inet6 fe80::ec32:c5ff:feac:3006/64 scope link\n valid_lft forever preferred_lft forever\n[root@rqy-k8s-1 hff]# ip netns exec cni-c1dea1e8-5df7-f16e-4810-e51d8895ca20 tc -s qdisc\nqdisc noqueue 0: dev lo root refcnt 2\n Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc noqueue 0: dev eth0 root refcnt 2\n Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev eth0 parent ffff:fff1 ----------------\n Sent 468 bytes 7 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc mq 0: dev tap0_kata root\n Sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc pfifo_fast 0: dev tap0_kata parent :1 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1\n Sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev tap0_kata parent ffff:fff1 ----------------\n Sent 936 bytes 15 pkt (dropped 0, overlimits 0 requeues 0\n backlog 0b 0p requeues 0\n[root@rqy-k8s-1 kbuser]# kubectl exec -it hostpath-kata-57477fb8f7-ls6mq sh\n/ # ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n valid_lft forever preferred_lft forever\n inet6 ::1/128 scope host\n valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc fq qlen 1000\n link/ether de:95:a9:f2:89:db brd ff:ff:ff:ff:ff:ff\n inet 10.192.181.55/32 brd 10.192.181.55 scope global eth0\n valid_lft forever preferred_lft forever\n inet6 fe80::dc95:a9ff:fef2:89db/64 scope link\n valid_lft forever preferred_lft forever\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n> calico网络模型网络流向： -容器流量通过veth pair到达宿主机的网络命名空间上。 -根据容器要访问的IP所在的子网CIDR和主机上的路由规则，找到下一跳要到达的宿主机IP。 -流量到达下一跳的宿主机后，根据当前宿主机上的路由规则，直接到达对端容器的veth pair插在宿主机的一端，最终进入容器。\n\n\n# 存储\n\nstorage\n\n * virtio SCSI（在基于块的图形驱动程序下使用）\n * virtio FS（默认）\n * Devicemapper（块设备）\n\n从 Kata Containers 的 2.0 版本开始，virtio-fs是默认的文件系统共享机制（后端是virtiofsd守护进程）。\n\n\n# virtio-9p 和 virtio-fs 文件系统对比\n\n 1. virtio-9p 没有针对虚拟化场景提供优化\n 2. virtio-fs 利用了 hypervisor 和虚拟机处于相同节点的优势\n 3. DAX 特性，文件内容映射到宿主机的内存窗口，客户机直接访问宿主机的 page cache\n    * 减少内存占用，因为客户机 cache 已经被绕过了\n 4. 相比 virtio-9p，virtio-fs 具有更好的 POSIX 合规性\n\n\n# virtiofs\n\n * 所有数据都要经过virtiofs，不管是镜像数据还是⽹络存储卷。虚拟机要和宿主机数据 交互，就必须要穿过qemu，virtiofs就是穿过qemu的桥梁，提供共享⽂件机制。\n * guest和host数据传输都是通过virtio-fs，包括容器镜像和容器卷，读写权限取决于virtiofsd进程的权限。\n * 数据相关的操作最终还是在宿主机上，⽐如镜像层的合并，仍然是containerd的存储层插件snapshotter完成，底层仍然是调⽤了overlayfs⽂件系统\n\n[root@localhost hff]# ps -ef | grep 55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774\nroot     28330     1  0 10:49 ?        00:00:00 /opt/kata/bin/containerd-shim-kata-v2 -namespace k8s.io -address /run/containerd/containerd.sock -publish-binary /usr/bin/containerd -id 55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774\nroot     28342 28330  0 10:49 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\nroot     28348     1  0 10:49 ?        00:00:00 /opt/kata/bin/qemu-system-x86_64 -name sandbox-55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774 -uuid 27f404fa-1887-4529-bbbb-df1525845c98 -machine q35,accel=kvm,kernel_irqchip=on,nvdimm=on -cpu host,pmu=off -qmp unix:/run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/qmp.sock,server=on,wait=off -m 2048M,slots=10,maxmem=8773M -device pci-bridge,bus=pcie.0,id=pci-bridge-0,chassis_nr=1,shpc=off,addr=2,io-reserve=4k,mem-reserve=1m,pref64-reserve=1m -device virtio-serial-pci,disable-modern=false,id=serial0 -device virtconsole,chardev=charconsole0,id=console0 -chardev socket,id=charconsole0,path=/run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/console.sock,server=on,wait=off -device nvdimm,id=nv0,memdev=mem0,unarmed=on -object memory-backend-file,id=mem0,mem-path=/opt/kata/share/kata-containers/kata-clearlinux-latest.image,size=134217728,readonly=on -device virtio-scsi-pci,id=scsi0,disable-modern=false -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 -device vhost-vsock-pci,disable-modern=false,vhostfd=3,id=vsock-3099871275,guest-cid=3099871275 -chardev socket,id=char-3352582b4396a8ee,path=/run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/vhost-fs.sock -device vhost-user-fs-pci,chardev=char-3352582b4396a8ee,tag=kataShared -netdev tap,id=network-0,vhost=on,vhostfds=4,fds=5 -device driver=virtio-net-pci,netdev=network-0,mac=7e:c7:e5:c6:8c:d7,disable-modern=false,mq=on,vectors=4 -rtc base=utc,driftfix=slew,clock=host -global kvm-pit.lost_tick_policy=discard -vga none -no-user-config -nodefaults -nographic --no-reboot -daemonize -object memory-backend-file,id=dimm1,size=2048M,mem-path=/dev/shm,share=on -numa node,memdev=dimm1 -kernel /opt/kata/share/kata-containers/vmlinux-5.15.26-90 -append tsc=reliable no_timer_check rcupdate.rcu_expedited=1 i8042.direct=1 i8042.dumbkbd=1 i8042.nopnp=1 i8042.noaux=1 noreplace-smp reboot=k console=hvc0 console=hvc1 cryptomgr.notests net.ifnames=0 pci=lastbus=0 root=/dev/pmem0p1 rootflags=dax,data=ordered,errors=remount-ro ro rootfstype=ext4 quiet systemd.show_status=false panic=1 nr_cpus=8 systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none -pidfile /run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/pid -smp 1,cores=1,threads=1,sockets=8,maxcpus=8\nroot     28355 28342  0 10:49 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\n\n\n1\n2\n3\n4\n5\n\n\n每⼀个 virtiofsd进程的fd参数都等于3，因为⽂件描述符是进程独⽴的，STDIO占 据了0，1和2，那么virtiofsd第⼀个可⽤的fd num就是3了\n\n\n# 存储配置\n\n\n# 存储路径：\n\n/run/kata-containers/shared/sandboxes/ /run/vc/vm/ /run/vc/sbs/\n\n[root@localhost ~]# find / -name hfftest0413-etc\n/run/kata-containers/shared/sandboxes/3b54b3b02fc7f6905d01aedfc4eb209cfb11fd9136006ed6e11e1e26c0f48562/mounts/c7c33d3c7666933c6f1c182bb49bf850c5ca99f08b4595b0f37e6f817bb52768/rootfs/etc/hfftest0413-etc\n/run/kata-containers/shared/sandboxes/3b54b3b02fc7f6905d01aedfc4eb209cfb11fd9136006ed6e11e1e26c0f48562/shared/c7c33d3c7666933c6f1c182bb49bf850c5ca99f08b4595b0f37e6f817bb52768/rootfs/etc/hfftest0413-etc\n/run/containerd/io.containerd.runtime.v2.task/k8s.io/c7c33d3c7666933c6f1c182bb49bf850c5ca99f08b4595b0f37e6f817bb52768/rootfs/etc/hfftest0413-etc\n/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/199015/fs/etc/hfftest0413-etc\n\n\n1\n2\n3\n4\n5\n\n\n\n# virtiofsd cache\n\nguest 生成时会指定内存大小，virtiofsd 会共享使用 guest 的内存。默认使用memory-backend-file 内存对象。\n\nguest 和 host 数据传输都是通过 virtio-fs，包括容器镜像和容器卷，读写权限取决于 virtiofsd 进程的权限。\n\n\n# DAX(直接访问)\n\nDAX windows 是一块虚拟内存区域，通过 PCI Bar 把文件映射到 guest 里面，并不真正的占用主机那么多内存，即使有 100 个虚拟机，设置的 DAX cache 是 1G，也不会真的使用 100G 内存。\n\n如果没有 DAX，内存使⽤量可能会⾮常⼤，因为每个 guest都有⾃⼰的⽂件缓冲区。\n\nKata Containers 官方下载的版本默认没有支持，需要编译安装 gitlab 托管的 virtio-fs qemu 项目 qemu5.0-virtiofs-dax 分支，需要单独编译qemu?qemu5.0-virtiofs-dax????\n\n * configuration.toml 设置virtio_fs_cache_size dax window ⼤⼩\n\n\n# virtiofsd已知问题汇总\n\nhttps://github.com/kata-containers/runtime/issues/2797\n\n\n# containerd的Snapshotter\n\nSnapshot为containerd实现了Snapshotter用于管理文件系统上容器镜像的快照和容器的rootfs挂载和卸载等操作功能。 snapshotter对标Docker中的graphdriver存储驱动的设计。\n\nhttps://blog.mobyproject.org/where-are-containerds-graph-drivers-145fc9b7255\n\n\n# 参考资料\n\nhttps://blog.csdn.net/u010827484/article/details/117488338 https://github.com/kata-containers/kata-containers/blob/main/docs/design/architecture/networking.md http://miaoyq.com/kata-containers-share/',normalizedContent:'# 网络\n\n虚拟机连接容器网络接口的方式：\n\n * macvtap（早期默认）：创建了一个 macvtap 设备以直接连接到eth0设备\n * none(使用自定义网络，只创建一个 tap 设备，不创建 veth pair)\n * tcfilter(通过 tc filter 规则将插件提供的网络接口流量重定向到连接到 vm 的 tap 接口) （现在默认）\n * bridge：（已弃用）\n\n# internetworking model\n# determines how the vm should be connected to the\n# the container network interface\n# options:\n#\n#   - macvtap\n#     used when the container network interface can be bridged using\n#     macvtap.\n#\n#   - none\n#     used when customize network. only creates a tap device. no veth pair.\n#\n#   - tcfilter\n#     uses tc filter rules to redirect traffic from the network interface\n#     provided by plugin to a tap interface connected to the vm.\n#\ninternetworking_model="tcfilter"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ntc-filter 是默认设置，因为它允许更简单的配置、更好的 cni 插件兼容性以及与 macvtap 相当的性能。\n\n * eth0属于veth-pair类型接口，一端接入cni创建的网络命名空间，一端接入宿主机\n * tap0_kata属于tap类型接口，一端接入cni创建的网络命名空间，一端接入qemu创建的hypervisor\n * 使用tc策略打通eth0网络接口和tap0_kata网络接口\n\nsandbox环境中只有eth0网络接口，这个接口是qemu和tap模拟出的接口，mac、ip、掩码都和宿主机中cni创建的网络命名空间中eth0的配置一样\n\ncontainer运行在sandbox环境中，container采用共享宿主机网络命名空间方式创建容器，所以在container中看到的网络配置和sandbox一样\n\n\n# 网络流量走向：\n\n流量进入宿主机后首先由物理网络通过veth pair接入到net namespace，net namespace中在使用tc filter 规则流量到tap网络接口，然后再通过tap网络接口把流量送入虚拟化环境中，最后虚拟化环境中的容器共享宿主机网络命名空间后就可以在容器中拿到网络流量\n\n[root@rqy-k8s-1 hff]# ip netns exec cni-c1dea1e8-5df7-f16e-4810-e51d8895ca20 ip a\n1: lo: <loopback,up,lower_up> mtu 65536 qdisc noqueue state unknown group default qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n valid_lft forever preferred_lft forever\n inet6 ::1/128 scope host\n valid_lft forever preferred_lft forever\n2: tunl0@none: <noarp> mtu 1480 qdisc noop state down group default qlen 1000\n link/ipip 0.0.0.0 brd 0.0.0.0\n4: eth0@if113: <broadcast,multicast,up,lower_up> mtu 1440 qdisc noqueue state up group default qlen 1000\n link/ether de:95:a9:f2:89:db brd ff:ff:ff:ff:ff:ff link-netnsid 0\n inet 10.192.181.55/32 scope global eth0\n valid_lft forever preferred_lft forever\n inet6 fe80::dc95:a9ff:fef2:89db/64 scope link\n valid_lft forever preferred_lft forever\n5: tap0_kata: <broadcast,multicast,up,lower_up> mtu 1440 qdisc mq state unknown group default qlen 1000\n link/ether ee:32:c5:ac:30:06 brd ff:ff:ff:ff:ff:ff\n inet6 fe80::ec32:c5ff:feac:3006/64 scope link\n valid_lft forever preferred_lft forever\n[root@rqy-k8s-1 hff]# ip netns exec cni-c1dea1e8-5df7-f16e-4810-e51d8895ca20 tc -s qdisc\nqdisc noqueue 0: dev lo root refcnt 2\n sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc noqueue 0: dev eth0 root refcnt 2\n sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev eth0 parent ffff:fff1 ----------------\n sent 468 bytes 7 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc mq 0: dev tap0_kata root\n sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc pfifo_fast 0: dev tap0_kata parent :1 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1\n sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev tap0_kata parent ffff:fff1 ----------------\n sent 936 bytes 15 pkt (dropped 0, overlimits 0 requeues 0\n backlog 0b 0p requeues 0\n[root@rqy-k8s-1 kbuser]# kubectl exec -it hostpath-kata-57477fb8f7-ls6mq sh\n/ # ip addr\n1: lo: <loopback,up,lower_up> mtu 65536 qdisc noqueue qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n valid_lft forever preferred_lft forever\n inet6 ::1/128 scope host\n valid_lft forever preferred_lft forever\n2: eth0: <broadcast,multicast,up,lower_up> mtu 1440 qdisc fq qlen 1000\n link/ether de:95:a9:f2:89:db brd ff:ff:ff:ff:ff:ff\n inet 10.192.181.55/32 brd 10.192.181.55 scope global eth0\n valid_lft forever preferred_lft forever\n inet6 fe80::dc95:a9ff:fef2:89db/64 scope link\n valid_lft forever preferred_lft forever\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n> calico网络模型网络流向： -容器流量通过veth pair到达宿主机的网络命名空间上。 -根据容器要访问的ip所在的子网cidr和主机上的路由规则，找到下一跳要到达的宿主机ip。 -流量到达下一跳的宿主机后，根据当前宿主机上的路由规则，直接到达对端容器的veth pair插在宿主机的一端，最终进入容器。\n\n\n# 存储\n\nstorage\n\n * virtio scsi（在基于块的图形驱动程序下使用）\n * virtio fs（默认）\n * devicemapper（块设备）\n\n从 kata containers 的 2.0 版本开始，virtio-fs是默认的文件系统共享机制（后端是virtiofsd守护进程）。\n\n\n# virtio-9p 和 virtio-fs 文件系统对比\n\n 1. virtio-9p 没有针对虚拟化场景提供优化\n 2. virtio-fs 利用了 hypervisor 和虚拟机处于相同节点的优势\n 3. dax 特性，文件内容映射到宿主机的内存窗口，客户机直接访问宿主机的 page cache\n    * 减少内存占用，因为客户机 cache 已经被绕过了\n 4. 相比 virtio-9p，virtio-fs 具有更好的 posix 合规性\n\n\n# virtiofs\n\n * 所有数据都要经过virtiofs，不管是镜像数据还是⽹络存储卷。虚拟机要和宿主机数据 交互，就必须要穿过qemu，virtiofs就是穿过qemu的桥梁，提供共享⽂件机制。\n * guest和host数据传输都是通过virtio-fs，包括容器镜像和容器卷，读写权限取决于virtiofsd进程的权限。\n * 数据相关的操作最终还是在宿主机上，⽐如镜像层的合并，仍然是containerd的存储层插件snapshotter完成，底层仍然是调⽤了overlayfs⽂件系统\n\n[root@localhost hff]# ps -ef | grep 55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774\nroot     28330     1  0 10:49 ?        00:00:00 /opt/kata/bin/containerd-shim-kata-v2 -namespace k8s.io -address /run/containerd/containerd.sock -publish-binary /usr/bin/containerd -id 55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774\nroot     28342 28330  0 10:49 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\nroot     28348     1  0 10:49 ?        00:00:00 /opt/kata/bin/qemu-system-x86_64 -name sandbox-55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774 -uuid 27f404fa-1887-4529-bbbb-df1525845c98 -machine q35,accel=kvm,kernel_irqchip=on,nvdimm=on -cpu host,pmu=off -qmp unix:/run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/qmp.sock,server=on,wait=off -m 2048m,slots=10,maxmem=8773m -device pci-bridge,bus=pcie.0,id=pci-bridge-0,chassis_nr=1,shpc=off,addr=2,io-reserve=4k,mem-reserve=1m,pref64-reserve=1m -device virtio-serial-pci,disable-modern=false,id=serial0 -device virtconsole,chardev=charconsole0,id=console0 -chardev socket,id=charconsole0,path=/run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/console.sock,server=on,wait=off -device nvdimm,id=nv0,memdev=mem0,unarmed=on -object memory-backend-file,id=mem0,mem-path=/opt/kata/share/kata-containers/kata-clearlinux-latest.image,size=134217728,readonly=on -device virtio-scsi-pci,id=scsi0,disable-modern=false -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 -device vhost-vsock-pci,disable-modern=false,vhostfd=3,id=vsock-3099871275,guest-cid=3099871275 -chardev socket,id=char-3352582b4396a8ee,path=/run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/vhost-fs.sock -device vhost-user-fs-pci,chardev=char-3352582b4396a8ee,tag=katashared -netdev tap,id=network-0,vhost=on,vhostfds=4,fds=5 -device driver=virtio-net-pci,netdev=network-0,mac=7e:c7:e5:c6:8c:d7,disable-modern=false,mq=on,vectors=4 -rtc base=utc,driftfix=slew,clock=host -global kvm-pit.lost_tick_policy=discard -vga none -no-user-config -nodefaults -nographic --no-reboot -daemonize -object memory-backend-file,id=dimm1,size=2048m,mem-path=/dev/shm,share=on -numa node,memdev=dimm1 -kernel /opt/kata/share/kata-containers/vmlinux-5.15.26-90 -append tsc=reliable no_timer_check rcupdate.rcu_expedited=1 i8042.direct=1 i8042.dumbkbd=1 i8042.nopnp=1 i8042.noaux=1 noreplace-smp reboot=k console=hvc0 console=hvc1 cryptomgr.notests net.ifnames=0 pci=lastbus=0 root=/dev/pmem0p1 rootflags=dax,data=ordered,errors=remount-ro ro rootfstype=ext4 quiet systemd.show_status=false panic=1 nr_cpus=8 systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none -pidfile /run/vc/vm/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/pid -smp 1,cores=1,threads=1,sockets=8,maxcpus=8\nroot     28355 28342  0 10:49 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/55e043c4c5eacba28c8d97a2aa96f76f153c5f9e49a1ad51f1031237002cf774/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\n\n\n1\n2\n3\n4\n5\n\n\n每⼀个 virtiofsd进程的fd参数都等于3，因为⽂件描述符是进程独⽴的，stdio占 据了0，1和2，那么virtiofsd第⼀个可⽤的fd num就是3了\n\n\n# 存储配置\n\n\n# 存储路径：\n\n/run/kata-containers/shared/sandboxes/ /run/vc/vm/ /run/vc/sbs/\n\n[root@localhost ~]# find / -name hfftest0413-etc\n/run/kata-containers/shared/sandboxes/3b54b3b02fc7f6905d01aedfc4eb209cfb11fd9136006ed6e11e1e26c0f48562/mounts/c7c33d3c7666933c6f1c182bb49bf850c5ca99f08b4595b0f37e6f817bb52768/rootfs/etc/hfftest0413-etc\n/run/kata-containers/shared/sandboxes/3b54b3b02fc7f6905d01aedfc4eb209cfb11fd9136006ed6e11e1e26c0f48562/shared/c7c33d3c7666933c6f1c182bb49bf850c5ca99f08b4595b0f37e6f817bb52768/rootfs/etc/hfftest0413-etc\n/run/containerd/io.containerd.runtime.v2.task/k8s.io/c7c33d3c7666933c6f1c182bb49bf850c5ca99f08b4595b0f37e6f817bb52768/rootfs/etc/hfftest0413-etc\n/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/199015/fs/etc/hfftest0413-etc\n\n\n1\n2\n3\n4\n5\n\n\n\n# virtiofsd cache\n\nguest 生成时会指定内存大小，virtiofsd 会共享使用 guest 的内存。默认使用memory-backend-file 内存对象。\n\nguest 和 host 数据传输都是通过 virtio-fs，包括容器镜像和容器卷，读写权限取决于 virtiofsd 进程的权限。\n\n\n# dax(直接访问)\n\ndax windows 是一块虚拟内存区域，通过 pci bar 把文件映射到 guest 里面，并不真正的占用主机那么多内存，即使有 100 个虚拟机，设置的 dax cache 是 1g，也不会真的使用 100g 内存。\n\n如果没有 dax，内存使⽤量可能会⾮常⼤，因为每个 guest都有⾃⼰的⽂件缓冲区。\n\nkata containers 官方下载的版本默认没有支持，需要编译安装 gitlab 托管的 virtio-fs qemu 项目 qemu5.0-virtiofs-dax 分支，需要单独编译qemu?qemu5.0-virtiofs-dax????\n\n * configuration.toml 设置virtio_fs_cache_size dax window ⼤⼩\n\n\n# virtiofsd已知问题汇总\n\nhttps://github.com/kata-containers/runtime/issues/2797\n\n\n# containerd的snapshotter\n\nsnapshot为containerd实现了snapshotter用于管理文件系统上容器镜像的快照和容器的rootfs挂载和卸载等操作功能。 snapshotter对标docker中的graphdriver存储驱动的设计。\n\nhttps://blog.mobyproject.org/where-are-containerds-graph-drivers-145fc9b7255\n\n\n# 参考资料\n\nhttps://blog.csdn.net/u010827484/article/details/117488338 https://github.com/kata-containers/kata-containers/blob/main/docs/design/architecture/networking.md http://miaoyq.com/kata-containers-share/',charsets:{cjk:!0}},{title:"kata cgroup及资源限制",frontmatter:{title:"kata cgroup及资源限制",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/d4921b/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"kata cgroup及资源限制"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/03.kata%20cgroup%E5%8F%8A%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata cgroup及资源限制"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/03.kata%20cgroup%E5%8F%8A%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata cgroup及资源限制"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/03.kata%20cgroup%E5%8F%8A%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/03.kata cgroup及资源限制.md",key:"v-240a9dec",path:"/pages/d4921b/",headers:[{level:2,title:"验证1： 查看cgroup大小",slug:"验证1-查看cgroup大小",normalizedTitle:"验证1： 查看cgroup大小",charIndex:1106},{level:3,title:"sandboxcgrouponly=true",slug:"sandbox-cgroup-only-true",normalizedTitle:"sandboxcgrouponly=true",charIndex:null},{level:3,title:"sandboxcgrouponly=false（结果同=true）",slug:"sandbox-cgroup-only-false-结果同-true",normalizedTitle:"sandboxcgrouponly=false（结果同=true）",charIndex:null},{level:3,title:"查看命令：",slug:"查看命令",normalizedTitle:"查看命令：",charIndex:3331},{level:2,title:"验证2：如果不设置request limit，kubepod cgroup的限制是怎样的",slug:"验证2-如果不设置request-limit-kubepod-cgroup的限制是怎样的",normalizedTitle:"验证2：如果不设置request limit，kubepod cgroup的限制是怎样的",charIndex:5356},{level:2,title:"验证3： 验证overhead是否影响业务负载",slug:"验证3-验证overhead是否影响业务负载",normalizedTitle:"验证3： 验证overhead是否影响业务负载",charIndex:6185},{level:2,title:"验证4：验证如果不设置request limit，cpu mem的使用上线",slug:"验证4-验证如果不设置request-limit-cpu-mem的使用上线",normalizedTitle:"验证4：验证如果不设置request limit，cpu mem的使用上线",charIndex:6814},{level:2,title:"验证5： 验证cpu mem小于1C 256Mi的情况（no overhead）",slug:"验证5-验证cpu-mem小于1c-256mi的情况-no-overhead",normalizedTitle:"验证5： 验证cpu mem小于1c 256mi的情况（no overhead）",charIndex:7526},{level:2,title:"验证6： 极小资源占用测试",slug:"验证6-极小资源占用测试",normalizedTitle:"验证6： 极小资源占用测试",charIndex:8677},{level:2,title:"验证7： 查看kata vm中的cgroup",slug:"验证7-查看kata-vm中的cgroup",normalizedTitle:"验证7： 查看kata vm中的cgroup",charIndex:10477},{level:2,title:"两种cgrouppath:",slug:"两种cgrouppath",normalizedTitle:"两种cgrouppath:",charIndex:14110},{level:2,title:"pod overhead",slug:"pod-overhead",normalizedTitle:"pod overhead",charIndex:489},{level:2,title:"sandboxcgrouponly",slug:"sandbox-cgroup-only",normalizedTitle:"sandboxcgrouponly",charIndex:null},{level:2,title:"default_vcpus/memory",slug:"default-vcpus-memory",normalizedTitle:"default_vcpus/memory",charIndex:716},{level:2,title:"kata资源开销",slug:"kata资源开销",normalizedTitle:"kata资源开销",charIndex:15028},{level:2,title:"kata组件进程：",slug:"kata组件进程",normalizedTitle:"kata组件进程：",charIndex:15107},{level:2,title:"不支持Cgroups V2",slug:"不支持cgroups-v2",normalizedTitle:"不支持cgroups v2",charIndex:15676},{level:2,title:"通过注释修改配置：",slug:"通过注释修改配置",normalizedTitle:"通过注释修改配置：",charIndex:17610},{level:2,title:"打开--feature-gates PodOverhead",slug:"打开-feature-gates-podoverhead",normalizedTitle:"打开--feature-gates podoverhead",charIndex:17918},{level:3,title:"启用RuntimeClass准入控制",slug:"启用runtimeclass准入控制",normalizedTitle:"启用runtimeclass准入控制",charIndex:18239},{level:3,title:"设置podOverHead",slug:"设置podoverhead",normalizedTitle:"设置podoverhead",charIndex:18437},{level:2,title:"virtio-mem内存热插拔（仅支持QEMU）",slug:"virtio-mem内存热插拔-仅支持qemu",normalizedTitle:"virtio-mem内存热插拔（仅支持qemu）",charIndex:18630}],headersStr:"验证1： 查看cgroup大小 sandboxcgrouponly=true sandboxcgrouponly=false（结果同=true） 查看命令： 验证2：如果不设置request limit，kubepod cgroup的限制是怎样的 验证3： 验证overhead是否影响业务负载 验证4：验证如果不设置request limit，cpu mem的使用上线 验证5： 验证cpu mem小于1C 256Mi的情况（no overhead） 验证6： 极小资源占用测试 验证7： 查看kata vm中的cgroup 两种cgrouppath: pod overhead sandboxcgrouponly default_vcpus/memory kata资源开销 kata组件进程： 不支持Cgroups V2 通过注释修改配置： 打开--feature-gates PodOverhead 启用RuntimeClass准入控制 设置podOverHead virtio-mem内存热插拔（仅支持QEMU）",content:'# 参考：\n\n * host-cgroups.md\n * vcpu-handling.md\n\n\n# 结论\n\n * cgroupsPath的路径根据Qos类别不同\n * kata_overhead的cpu和mem没有限制，能用到宿主机所有资源，如果不开启sandbox_cgroup_only会导致主机资源被抢占\n * kubepod cgroup限制=limit+overhead，容器业务负载就是在这个限制之内使用，然后区分sandbox_cgroup_only是否开启决定kata vm(sandbox)开销是否统计到kubepod中，如果是则业务申请cpu mem资源就必须考虑kata sandbox开销\n * 虚拟机大小=kata vm中或者说pod中看到的cpu mem（lscpu lsmem）=default+limit（见验证1）\n * kubectl describe node | grep test-kata看到的资源申请=limit+overhead（同runc）（见验证1）\n * kubectl top pod看到的是业务真正的负载开销？？\n * pod overhead会影响调度，overhead只作用于sandbox开销，不能作用于业务负载（见验证3）\n * 为了限制资源抢占问题，建议开启sandbox_cgroup_only=true,overhead建议不设置（待定），以下说明均在sandbox_cgroup_only=true前提下进行说明\n * 业务负载+sandbox开销最大能使用的资源限制=limit+overhead（overhead部分只能是额外开销用）（见验证3）\n * default_vcpus/memory，影响虚拟机的大小/启动时间，这个值官方不建议修改\n * 如果container未设置limit，则kubepod cgroup无限制（但是业务负载只能使用default设置的1G2G???暂未找到在哪做的限制）（见验证7）；如果设置了limit，则这个default则只影响虚拟机大小，但不影响kubepod cgroup限制（见验证1）\n * ~一个Pod的最小规格是1C 256M，当低于 256M 时，会重置为 2G。，支持的最大内存规格是256GB。如果用户分配的内存规格超过256GB，可能会出现未定义的错误，安全容器暂不支持超过256GB的大内存场景。~（未找到官方出处，应该只是openEuler内部做的限制）（见验证5）\n * 如果不设置request，则request的值和limit默认相等\n\n\n# 一些验证\n\n\n# 验证1： 查看cgroup大小\n\ncpu.cfs_period_us是CFS算法的一个调度周期，一般它的值是100000us，即100ms。 cpu.cfs_quota_us表示在CFS算法中，在一个调度周期里该控制组被允许的运行时间，比如这个值为50000时，就是50ms。用这个值去除以调度周期cpu.cfs_period_us，即50ms/100ms=0.5，得到的值表示该控制组被允许使用的CPU最大配额是0.5个CPU。在我的系统里，这个值是-1，为默认值，表示不限制。\n\ndefault_vcpu=1 default_memory=2Gi overhead: "podFixed":{"cpu":"250m","memory":"160Mi"} pod Qos: resources: requests: memory: "500Mi" cpu: "0.5" limits: memory: "3000Mi" cpu: "4"\n\n\n# sandbox_cgroup_only=true\n\n"cgroupsPath": "/kubepods/burstable/pod287707dd-0fda-4fab-874d-e1b00e87390a/c2bfeccb7580707e7559c00f7ee9d46e98745cc2a0d267fbb41c68da41df784f",\n\nkata_overhead-mem: ~8G（不限） kata_overhead-cpu: -1（不限） kubepods_mem: 3313500160 (~3.08G) (limit+overhead) kubepods_cpu cfs_period_us: 100000 cpu.cfs_quota_us 425000 (4.25核) （limit+overhead）\n\nlscpu: 5 (default+limit) lsmem： Memory block size: 128M Memory block size: 128M Total online memory: 5G (default+limit)\n\nkubectl describe node | grep test-kata： 750m (9%) 4250m (54%)(limit+overhead) 660Mi (10%) 3160Mi (48%)(limit+overhead) 4m54s kubectl top pod： 1002m 1Mi kubectl top node： 1306m 16% 5513Mi 84%\n\n[root@localhost ~]# systemd-cgtop | grep kata /kata_overhead - - 4.9M - - /system.slice/kata-monitor.service 1 - 27.4M - - [root@localhost ~]# systemd-cgtop | grep pod287707dd-0fda-4fab-874d-e1b00e87390a /kubepods/burstable/pod287707dd-0fda-4fab-874d-e1b00e87390a - - 193.4M - -\n\n\n# sandbox_cgroup_only=false（结果同=true）\n\n"cgroupsPath": "/kubepods/burstable/pod3a449bdd-90d5-41fd-a57a-9cfd102f9e44/87b5990ce61e4ff193124fc60e4a68c7061cf9299688c6c521cae29103bc3ef5",\n\nkata_overhead-mem: ~8G（不限） kata_overhead-cpu: -1（不限）\n\nkubepods_mem: 3313500160 (~3.08G) (limit+overhead) kubepods_cpu cfs_period_us: 100000 cpu.cfs_quota_us 425000 (4.25核) （limit+overhead）\n\n[root@localhost ~]# systemd-cgtop | grep kata /kata_overhead - - 4.9M - - /system.slice/kata-monitor.service 1 - 24.6M - - [root@localhost ~]# systemd-cgtop | grep pod3a449bdd-90d5-41fd-a57a-9cfd102f9e44 /kubepods/burstable/pod3a449bdd-90d5-41fd-a57a-9cfd102f9e44 - - 151.7M - -\n\nkubectl describe node | grep test-kata： 750m (9%) 4250m (54%)(limit+overhead) 660Mi (10%) 3160Mi (48%)(limit+overhead) 4m54s kubectl top pod： 1002m 1Mi kubectl top node： 1330m 17% 5507Mi 84%\n\n\n# 查看命令：\n\n[root@localhost ~]# systemd-cgtop | grep kata\n/kata_overhead                                                                                                                -      -     4.9M        -        -\n/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/kata_842463ada9994438f6c663b082bbf5735c64309f77a0b57838b8a16f347433a6       7      -   132.9M        -        -\n/system.slice/kata-monitor.service                                                                                            1      -    23.2M        -        -\n\n[root@localhost ~]# cat /sys/fs/cgroup/memory/kata_overhead/memory.limit_in_bytes\n9223372036854771712\n[root@localhost ~]#  cat /sys/fs/cgroup/cpu/kata_overhead/cpu.cfs_period_us\n100000\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/kata_overhead/cpu.cfs_quota_us\n-1\n\n[root@localhost ~]# cat /sys/fs/cgroup/memory/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/memory.limit_in_bytes\n1241513984\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/cpu.cfs_period_us\n100000\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/cpu.cfs_quota_us\n125000\n\n[root@localhost ~]#  cat /sys/fs/cgroup/memory/system.slice/kata-monitor.service/memory.limit_in_bytes\n9223372036854771712\n\n[root@localhost ~]# kubectl top pod test-kata\nNAME        CPU(cores)   MEMORY(bytes)\ntest-kata   0m           2Mi\n[root@localhost ~]# kubectl top node\nNAME                    CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%\nlocalhost.localdomain   355m         4%     5469Mi          83%\n\n[root@localhost ~]# kubectl describe node | grep kata\n  default                     test-kata                                                1250m (16%)   1250m (16%)  1184Mi (18%)     1184Mi (18%)   16d\n  kube-system                 kata-deploy-q2cnv                                        0 (0%)        0 (0%)       0 (0%)           0 (0%)         21d\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 验证2：如果不设置request limit，kubepod cgroup的限制是怎样的\n\n"cgroupsPath": "/kubepods/besteffort/pod09a392bc-1080-4044-8015-39f392e3862f/367368f8f5c44bc69b277febfa5d533063f096c65cd9b6729bbc7847a582f51f",\n\nkata_overhead-mem: ~8G（不限） kata_overhead-cpu: -1（不限）\n\nkubepods_mem: 9223372036854771712 ~8G（不限） kubepods_cpu cfs_period_us cfs_quota_us: 100000 -1 不限 kubectl top pod： 1000m 0Mi kubectl top node： 1316m 16% 5517Mi 84%\n\n[root@localhost hff]# systemd-cgtop | grep kata /kata_overhead - - 4.9M - - /system.slice/kata-monitor.service 1 - 25.1M - -\n\n[root@localhost hff]# systemd-cgtop | grep pod09a392bc-1080-4044-8015-39f392e3862f /kubepods/besteffort/pod09a392bc-1080-4044-8015-39f392e3862f - - 95.8M - -\n\nkubectl describe node | grep test-kata： 250m (3%)（overhead） 0 (0%) 160Mi (2%)（overhead） 0 (0%) 6m30s\n\nkubepod不限制，但是pod确实只能用到limit的值\n\n\n# 验证3： 验证overhead是否影响业务负载\n\n设置overhead 2C 2G后，limit 3C3G, 打满cpu=6,mem=3Gi\n\n[root@localhost hff]# kubectl get pod\nNAME                              READY   STATUS        RESTARTS   AGE\ntest-kata-5687cdcb66-28lgn        0/1     OutOfmemory   0          17s\ntest-kata-5687cdcb66-2lmd5        0/1     OutOfmemory   0          11s\ntest-kata-5687cdcb66-2pbhm        0/1     OutOfmemory   0          23s\ntest-kata-5687cdcb66-575sb        0/1     OutOfmemory   0          19s\ntest-kata-5687cdcb66-5gvt2        0/1     OutOfmemory   0          5s\ntest-kata-5687cdcb66-62fbd        0/1     OutOfmemory   0          33s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 验证4：验证如果不设置request limit，cpu mem的使用上线\n\n设置overhead 2C 2G后，limit不设置， 打满cpu=6,mem=1Gi\n\n[root@localhost hff]# kubectl get pod  -w\nNAME                              READY   STATUS        RESTARTS   AGE\ntest-kata-55867ffb58-26ndp        0/1     OutOfmemory   0          4s\ntest-kata-55867ffb58-2blnx        0/1     OutOfmemory   0          2s\ntest-kata-55867ffb58-2d858        0/1     OutOfmemory   0          1s\ntest-kata-55867ffb58-2qwzf        0/1     Pending       0          0s\ntest-kata-55867ffb58-4j4hl        0/1     OutOfmemory   0          1s\ntest-kata-55867ffb58-8zzbc        0/1     OutOfmemory   0          2s\ntest-kata-55867ffb58-crflb        0/1     OutOfmemory   0          4s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 验证5： 验证cpu mem小于1C 256Mi的情况（no overhead）\n\n    resources:\n      requests:\n        memory: "1Mi"\n        cpu: "0.1"\n      limits:\n        memory: "100Mi"\n        cpu: "550m"\n    args:\n    - -cpus\n    - "2"\n    - -mem-total\n    - 100Mi\n    - -mem-alloc-size\n    - 10Mi\n    - -mem-alloc-sleep\n    - 1s\n\n\n没有OOM，但是pod不断重启，所有并没有被重置成2G\n\n[root@localhost hff]# kubectl get pod -w\nNAME                              READY   STATUS    RESTARTS   AGE\nkubefilebrowser-896974bcc-z6scd   1/1     Running   3          31d\ntest-kata-6878f4fd9f-76c5k        1/1     Running   2          61s\ntest-runc-79d8bdc4cb-v6j28        1/1     Running   0          75m\ntest-kata-6878f4fd9f-76c5k        0/1     Error     2          72s\ntest-kata-6878f4fd9f-76c5k        0/1     CrashLoopBackOff   2          75s\n\n[root@localhost hff]# kubectl logs test-kata-6878f4fd9f-76c5k\nI0527 07:16:06.932758       1 main.go:26] Allocating "200Mi" memory, in "10Mi" chunks, with a 1s sleep between allocations\nI0527 07:16:06.933058       1 main.go:39] Spawning a thread to consume CPU\nI0527 07:16:06.933082       1 main.go:39] Spawning a thread to consume CPU\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 验证6： 极小资源占用测试\n\nlimit550m/200Mi，压2C100Mi，pod会不断重启，但是不是OOMKilled\n\n        resources:\n          requests:\n            memory: "1Mi"\n            cpu: "0.1"\n          limits:\n            memory: "200Mi"\n            cpu: "550m"\n        args:\n        - -cpus\n        - "2"\n        - -mem-total\n        - 100Mi\n        - -mem-alloc-size\n        - 10Mi\n        - -mem-alloc-sleep\n        - 1s\nEvents:\n  Type     Reason          Age                   From                            Message\n  ----     ------          ----                  ----                            -------\n  Normal   Scheduled       <unknown>             default-scheduler               Successfully assigned default/test-kata-68b77bc9f8-zlj5p to localhost.localdomain\n  Normal   Created         36m (x4 over 38m)     kubelet, localhost.localdomain  Created container cpu-stress-kata\n  Normal   Started         36m (x4 over 38m)     kubelet, localhost.localdomain  Started container cpu-stress-kata\n  Normal   SandboxChanged  35m (x4 over 37m)     kubelet, localhost.localdomain  Pod sandbox changed, it will be killed and re-created.\n  Normal   Pulled          7m53s (x11 over 38m)  kubelet, localhost.localdomain  Container image "vish/stress" already present on machine\n  Warning  BackOff         3m5s (x159 over 37m)  kubelet, localhost.localdomain  Back-off restarting failed container\n[root@localhost hff]#\n[root@localhost hff]# kubectl logs test-kata-68b77bc9f8-zlj5p\nI0527 08:13:52.926368       1 main.go:26] Allocating "100Mi" memory, in "10Mi" chunks, with a 1s sleep between allocations\nI0527 08:13:52.926544       1 main.go:39] Spawning a thread to consume CPU\nI0527 08:13:52.926570       1 main.go:39] Spawning a thread to consume CPU\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 验证7： 查看kata vm中的cgroup\n\n不设置limit，overhead\n\nbash-5.1# more /sys/fs/cgroup/memory/\ncgroup.clone_children               memory.max_usage_in_bytes\ncgroup.event_control                memory.memsw.failcnt\ncgroup.procs                        memory.memsw.limit_in_bytes\ncgroup.sane_behavior                memory.memsw.max_usage_in_bytes\nkubepods/                           memory.memsw.usage_in_bytes\nmemory.failcnt                      memory.move_charge_at_immigrate\nmemory.force_empty                  memory.oom_control\nmemory.kmem.failcnt                 memory.pressure_level\nmemory.kmem.limit_in_bytes          memory.soft_limit_in_bytes\nmemory.kmem.max_usage_in_bytes      memory.stat\nmemory.kmem.slabinfo                memory.swappiness\nmemory.kmem.tcp.failcnt             memory.usage_in_bytes\nmemory.kmem.tcp.limit_in_bytes      memory.use_hierarchy\nmemory.kmem.tcp.max_usage_in_bytes  notify_on_release\nmemory.kmem.tcp.usage_in_bytes      release_agent\nmemory.kmem.usage_in_bytes          system.slice/\nmemory.limit_in_bytes               tasks\nbash-5.1# more /sys/fs/cgroup/memory/kubepods/\nbesteffort/                         memory.max_usage_in_bytes\ncgroup.clone_children               memory.memsw.failcnt\ncgroup.event_control                memory.memsw.limit_in_bytes\ncgroup.procs                        memory.memsw.max_usage_in_bytes\nmemory.failcnt                      memory.memsw.usage_in_bytes\nmemory.force_empty                  memory.move_charge_at_immigrate\nmemory.kmem.failcnt                 memory.oom_control\nmemory.kmem.limit_in_bytes          memory.pressure_level\nmemory.kmem.max_usage_in_bytes      memory.soft_limit_in_bytes\nmemory.kmem.slabinfo                memory.stat\nmemory.kmem.tcp.failcnt             memory.swappiness\nmemory.kmem.tcp.limit_in_bytes      memory.usage_in_bytes\nmemory.kmem.tcp.max_usage_in_bytes  memory.use_hierarchy\nmemory.kmem.tcp.usage_in_bytes      notify_on_release\nmemory.kmem.usage_in_bytes          tasks\nmemory.limit_in_bytes\nbash-5.1# more /sys/fs/cgroup/cpu/cpu.cfs_quota_us\n-1\nbash-5.1# more /sys/fs/cgroup/cpu/kubepods/besteffort/cpu.cfs_quota_us\n-1\nbash-5.1# more /sys/fs/cgroup/cpu/kubepods/besteffort/pode0eb5953-c643-4429-8812-b8e36d75e3d9/f3cffcf893000b0c5f6105f1adb94e3be7fa62ebecd801a29b9a77a472d62c86/cfs_quota_us\n-1\nbash-5.1# more /sys/fs/cgroup/memory/memory.limit_in_bytes\n9223372036854771712\nbash-5.1#  more /sys/fs/cgroup/memory/kubepods/memory.limit_in_bytes\n9223372036854771712\nbash-5.1#  more /sys/fs/cgroup/memory/kubepods/besteffort/memory.limit_in_bytes\n9223372036854771712\nbash-5.1#  more /sys/fs/cgroup/memory/kubepods/besteffort/pode0eb5953-c643-4429-8812-b8e36d75e3d9/.limit_in_bytes\n9223372036854771712\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n未找到default_vcpu/memory是在哪里做的限制\n\n\n# kata cgroup说明\n\nKata Containers 在两层 cgroup 上运行。\n\n * workload guest\n * VMM host （Kata Containers 在两层 cgroup 上运行。第一层在虚拟机中放置工作负载，而第二层在主机上运行 VMM和 关联线程。）\n\n从 Kubernetes 角度来讲，Cgroup 指的是 Pod Cgroup，由 Kubelet 创建，限制的是 Pod 的资源; 从 Container 角度来讲，Cgroup 指的是 Container Cgroup，由对应的 runtime 创建，限制的是 container 的资源。但是为了可以获取到更准确的容器资源，Kubelet 会根据 Container Cgroup 去调整 Pod Cgroup。 在传统的 runtime 中，两者没有太大的区别。\n\n而 Kata Containers 引入 VM 的概念，所以针对这种情况有两种处理方式：\n\n * 启用 SandboxCgroupOnly（默认），Kubelet 在调整 Pod Cgroup 的大小时，会将 sandbox 的开销统计进去 （就是说，用户申请的资源limit+overhead是业务负载和kata虚拟机开销的最大使用限制，如果不设置limit，默认是default_vcpus/mem??）\n * 禁用 SandboxCgroupOnly，sandbox 的开销和 Pod Cgroup 分开计算，独立存在 （就是说，用户申请的资源limit+overhead是业务负载自己的最大使用限制，kata虚拟机开销单独一个cgroup而且没有限制，如果不设置limit，业务使用默认是default_vcpus/mem）\n\n\n# 两种cgrouppath:\n\n * /kubepods/burstable/pod287707dd-0fda-4fab-874d-e1b00e87390a/c2bfeccb7580707e7559c00f7ee9d46e98745cc2a0d267fbb41c68da41df784f ()\n * /kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/kata_842463ada9994438f6c663b082bbf5735c64309f77a0b57838b8a16f347433a6 ()\n\n\n# pod overhead\n\n\n# sandbox_cgroup_only\n\n * 如果启用，运行时将在一个专用cgroup中添加所有kata进程。每个沙盒只创建一个cgroup，主机中的container cgroup将不会创建\n * kata runtime调用者可以自由地限制或收集整个Kata沙盒的cgroup统计信息。\n * sandbox cgroup路径是具有PodSandbox annotation(???)的容器的父cgroup。\n * 如果没有container type annotation(??)，则sandbox cgroup将受到限制\n * 意味着 pod cgroup 的大小适当，并考虑了 pod 开销（设置podoverhead考虑调度）\n * Kata shim 将在sandbox_cgroup_onlypod 的专用 cgroup 下为每个 pod 创建一个子 cgroup\n * kata shim、qemu 线程将与沙箱在同一个 cgroup 中。在这种情况下，它们将与 vcpu 线程共享同一组 cpu 内核\n\n=true好处：\n\n * 便于Pod资源统计\n * 更好的主机资源隔离\n\n=fasle优点及缺点：\n\n * 不限制会消耗大量主机资源\n * 在专用开销cgroup下运行所有非vcpu线程可以提供有关实际的开销准确值，可以设置开销cgroup大小（手动修改，无接口）\n\n\n# default_vcpus/memory\n\n\n# kata资源开销\n\n * 半虚拟化 I/O 后端\n * VMM 实例\n * Kata shim 进程\n * kata monitor开销（如果开启）\n\n\n# kata组件进程：\n\n * sandbox qemu-system-x86_64进程cgroup\n * containerd-shim-kata-v2进程\n * 两个virtiofsd进程\n\nkata pod起来后，其中，kata shim进程和qemu进程占用了大量的内存开销，其中，沙箱里的内核和 agent 是直接分享了应用内存但并不是应用的一部分，也就是说，这一部分是用户可见的开销。而 VMM 本身在宿主机上的开销以及 shim-v2 占用的内存，虽然用户应用不可见，但同样是 Kata 带来的开销，影响基础设施的资源效率。\n\n这些内存开销里，还包括了可共享开销和不可共享开销。所有宿主这边的代码段内存（只读内存），可以共享 page cache，所以是共享的，而在沙箱里的代码（只读）内存，在使用 DAX 或模版的情况下，也可以共享同一份。所以，可以共享的内存开销在节点全局范围内是唯一一份，所以在有多个Pod的情况下，这部分的常数开销相对而言是不太重要的，相反的，不可共享开销，尤其是堆内存开销，会随着 Pod 的增长而增长，的换句话说，堆内存（匿名页）是最需要被重视的开销。\n\n综上，第一位需要被遏制的开销是沙箱内的用户可见的不可共享开销，尤其是 Agent 的开销，而 VMM 和 shim 的匿名页开销次之。\n\n\n# 不支持Cgroups V2\n\n\n# 一些需要知道的配置\n\n# Default number of vCPUs per SB/VM:\n# unspecified or 0                --\x3e will be set to 1（不设置或0则默认是1）\n# < 0                             --\x3e will be set to the actual number of physical cores(小于0则设为实际物理核)\n# > 0 <= number of physical cores --\x3e will be set to the specified number\n# > number of physical cores      --\x3e will be set to the actual number of physical cores（大于物理核默认为物理核）\ndefault_vcpus = 1\n\n# Default memory size in MiB for SB/VM.\n# If unspecified then it will be set 2048 MiB.（不设置默认是2Gi）\ndefault_memory = 2048\n\n# Default maximum number of vCPUs per SB/VM:\n# unspecified or == 0             --\x3e will be set to the actual number of physical cores or to the maximum number（不设置或0默认为最大物理核数）\n#                                     of vCPUs supported by KVM if that number is exceeded\n# > 0 <= number of physical cores --\x3e will be set to the specified number\n# > number of physical cores      --\x3e will be set to the actual number of physical cores or to the maximum number\n#                                     of vCPUs supported by KVM if that number is exceeded\n# WARNING: Depending of the architecture, the maximum number of vCPUs supported by KVM is used when\n# the actual number of physical cores is greater than it.\n# WARNING: Be aware that this value impacts the virtual machine\'s memory footprint and CPU\n# the hotplug functionality. For example, `default_maxvcpus = 240` specifies that until 240 vCPUs\n# can be added to a SB/VM, but the memory footprint will be big. Another example, with\n# `default_maxvcpus = 8` the memory footprint will be small, but 8 will be the maximum number of\n# vCPUs supported by the SB/VM. In general, we recommend that you do not edit this variable,\n# unless you know what are you doing.\n# NOTICE: on arm platform with gicv2 interrupt controller, set it to 8.\ndefault_maxvcpus = 0\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 通过注释修改配置：\n\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n runtime_type = "io.containerd.kata.v2"\n privileged_without_host_devices = false\n shim_debug = true\n pod_annotations = ["io.katacontainers.*"] #  <-- look here\n\n\n1\n2\n3\n4\n5\n\n\n> io.katacontainers.config.hypervisor.default_vcpus = 5\n\n\n# 打开--feature-gates PodOverhead\n\n> /etc/kubernetes/manifests/kube-apiserver.yaml\n\n1.17默认关闭，1.18默认打开\n\n> Environment="KUBELET_FEATURE=--feature-gates=RotateKubeletServerCertificate=true,VolumeSnapshotDataSource=true,ExpandCSIVolumes=true,VolumePVCDataSource=true,ServiceTopology=true,EndpointSlice=true,PodOverhead=true"\n\n\n# 启用RuntimeClass准入控制\n\n> --feature-gates=VolumeSnapshotDataSource=true,ExpandCSIVolumes=true,VolumePVCDataSource=true,TTLAfterFinished=true,ServiceTopology=true,EndpointSlice=true,PodOverhead=true\n\n\n# 设置podOverHead\n\nkind: RuntimeClass\napiVersion: node.k8s.io/v1beta1\nmetadata:\n  name: kata-containers\nhandler: kata\noverhead:\n  podFixed:\n  memory: "100Mi"\n  cpu: "100m"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# virtio-mem内存热插拔（仅支持QEMU）\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-use-virtio-mem-with-kata.md\n\n$ sudo sed -i -e \'s/^#enable_virtio_mem.*$/enable_virtio_mem = true/g\' /etc/kata-containers/configuration.toml\n\n\n1\n\n\n\n# 附件\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-kata\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: test-kata\n  template:\n    metadata:\n      labels:\n        app: test-kata\n    spec:\n      runtimeClassName: kata-containers\n      containers:\n      - image: vish/stress\n        imagePullPolicy: IfNotPresent\n        name: cpu-stress-kata\n        resources:\n          requests:\n            memory: "1Mi"\n            cpu: "0.1"\n          limits:\n            memory: "161Mi"\n            cpu: "350m"\n        args:\n        - -cpus\n        - "2"\n        - -mem-total\n        - 100Mi\n        - -mem-alloc-size\n        - 10Mi\n        - -mem-alloc-sleep\n        - 1s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n',normalizedContent:'# 参考：\n\n * host-cgroups.md\n * vcpu-handling.md\n\n\n# 结论\n\n * cgroupspath的路径根据qos类别不同\n * kata_overhead的cpu和mem没有限制，能用到宿主机所有资源，如果不开启sandbox_cgroup_only会导致主机资源被抢占\n * kubepod cgroup限制=limit+overhead，容器业务负载就是在这个限制之内使用，然后区分sandbox_cgroup_only是否开启决定kata vm(sandbox)开销是否统计到kubepod中，如果是则业务申请cpu mem资源就必须考虑kata sandbox开销\n * 虚拟机大小=kata vm中或者说pod中看到的cpu mem（lscpu lsmem）=default+limit（见验证1）\n * kubectl describe node | grep test-kata看到的资源申请=limit+overhead（同runc）（见验证1）\n * kubectl top pod看到的是业务真正的负载开销？？\n * pod overhead会影响调度，overhead只作用于sandbox开销，不能作用于业务负载（见验证3）\n * 为了限制资源抢占问题，建议开启sandbox_cgroup_only=true,overhead建议不设置（待定），以下说明均在sandbox_cgroup_only=true前提下进行说明\n * 业务负载+sandbox开销最大能使用的资源限制=limit+overhead（overhead部分只能是额外开销用）（见验证3）\n * default_vcpus/memory，影响虚拟机的大小/启动时间，这个值官方不建议修改\n * 如果container未设置limit，则kubepod cgroup无限制（但是业务负载只能使用default设置的1g2g???暂未找到在哪做的限制）（见验证7）；如果设置了limit，则这个default则只影响虚拟机大小，但不影响kubepod cgroup限制（见验证1）\n * ~一个pod的最小规格是1c 256m，当低于 256m 时，会重置为 2g。，支持的最大内存规格是256gb。如果用户分配的内存规格超过256gb，可能会出现未定义的错误，安全容器暂不支持超过256gb的大内存场景。~（未找到官方出处，应该只是openeuler内部做的限制）（见验证5）\n * 如果不设置request，则request的值和limit默认相等\n\n\n# 一些验证\n\n\n# 验证1： 查看cgroup大小\n\ncpu.cfs_period_us是cfs算法的一个调度周期，一般它的值是100000us，即100ms。 cpu.cfs_quota_us表示在cfs算法中，在一个调度周期里该控制组被允许的运行时间，比如这个值为50000时，就是50ms。用这个值去除以调度周期cpu.cfs_period_us，即50ms/100ms=0.5，得到的值表示该控制组被允许使用的cpu最大配额是0.5个cpu。在我的系统里，这个值是-1，为默认值，表示不限制。\n\ndefault_vcpu=1 default_memory=2gi overhead: "podfixed":{"cpu":"250m","memory":"160mi"} pod qos: resources: requests: memory: "500mi" cpu: "0.5" limits: memory: "3000mi" cpu: "4"\n\n\n# sandbox_cgroup_only=true\n\n"cgroupspath": "/kubepods/burstable/pod287707dd-0fda-4fab-874d-e1b00e87390a/c2bfeccb7580707e7559c00f7ee9d46e98745cc2a0d267fbb41c68da41df784f",\n\nkata_overhead-mem: ~8g（不限） kata_overhead-cpu: -1（不限） kubepods_mem: 3313500160 (~3.08g) (limit+overhead) kubepods_cpu cfs_period_us: 100000 cpu.cfs_quota_us 425000 (4.25核) （limit+overhead）\n\nlscpu: 5 (default+limit) lsmem： memory block size: 128m memory block size: 128m total online memory: 5g (default+limit)\n\nkubectl describe node | grep test-kata： 750m (9%) 4250m (54%)(limit+overhead) 660mi (10%) 3160mi (48%)(limit+overhead) 4m54s kubectl top pod： 1002m 1mi kubectl top node： 1306m 16% 5513mi 84%\n\n[root@localhost ~]# systemd-cgtop | grep kata /kata_overhead - - 4.9m - - /system.slice/kata-monitor.service 1 - 27.4m - - [root@localhost ~]# systemd-cgtop | grep pod287707dd-0fda-4fab-874d-e1b00e87390a /kubepods/burstable/pod287707dd-0fda-4fab-874d-e1b00e87390a - - 193.4m - -\n\n\n# sandbox_cgroup_only=false（结果同=true）\n\n"cgroupspath": "/kubepods/burstable/pod3a449bdd-90d5-41fd-a57a-9cfd102f9e44/87b5990ce61e4ff193124fc60e4a68c7061cf9299688c6c521cae29103bc3ef5",\n\nkata_overhead-mem: ~8g（不限） kata_overhead-cpu: -1（不限）\n\nkubepods_mem: 3313500160 (~3.08g) (limit+overhead) kubepods_cpu cfs_period_us: 100000 cpu.cfs_quota_us 425000 (4.25核) （limit+overhead）\n\n[root@localhost ~]# systemd-cgtop | grep kata /kata_overhead - - 4.9m - - /system.slice/kata-monitor.service 1 - 24.6m - - [root@localhost ~]# systemd-cgtop | grep pod3a449bdd-90d5-41fd-a57a-9cfd102f9e44 /kubepods/burstable/pod3a449bdd-90d5-41fd-a57a-9cfd102f9e44 - - 151.7m - -\n\nkubectl describe node | grep test-kata： 750m (9%) 4250m (54%)(limit+overhead) 660mi (10%) 3160mi (48%)(limit+overhead) 4m54s kubectl top pod： 1002m 1mi kubectl top node： 1330m 17% 5507mi 84%\n\n\n# 查看命令：\n\n[root@localhost ~]# systemd-cgtop | grep kata\n/kata_overhead                                                                                                                -      -     4.9m        -        -\n/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/kata_842463ada9994438f6c663b082bbf5735c64309f77a0b57838b8a16f347433a6       7      -   132.9m        -        -\n/system.slice/kata-monitor.service                                                                                            1      -    23.2m        -        -\n\n[root@localhost ~]# cat /sys/fs/cgroup/memory/kata_overhead/memory.limit_in_bytes\n9223372036854771712\n[root@localhost ~]#  cat /sys/fs/cgroup/cpu/kata_overhead/cpu.cfs_period_us\n100000\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/kata_overhead/cpu.cfs_quota_us\n-1\n\n[root@localhost ~]# cat /sys/fs/cgroup/memory/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/memory.limit_in_bytes\n1241513984\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/cpu.cfs_period_us\n100000\n[root@localhost ~]# cat /sys/fs/cgroup/cpu/kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/cpu.cfs_quota_us\n125000\n\n[root@localhost ~]#  cat /sys/fs/cgroup/memory/system.slice/kata-monitor.service/memory.limit_in_bytes\n9223372036854771712\n\n[root@localhost ~]# kubectl top pod test-kata\nname        cpu(cores)   memory(bytes)\ntest-kata   0m           2mi\n[root@localhost ~]# kubectl top node\nname                    cpu(cores)   cpu%   memory(bytes)   memory%\nlocalhost.localdomain   355m         4%     5469mi          83%\n\n[root@localhost ~]# kubectl describe node | grep kata\n  default                     test-kata                                                1250m (16%)   1250m (16%)  1184mi (18%)     1184mi (18%)   16d\n  kube-system                 kata-deploy-q2cnv                                        0 (0%)        0 (0%)       0 (0%)           0 (0%)         21d\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 验证2：如果不设置request limit，kubepod cgroup的限制是怎样的\n\n"cgroupspath": "/kubepods/besteffort/pod09a392bc-1080-4044-8015-39f392e3862f/367368f8f5c44bc69b277febfa5d533063f096c65cd9b6729bbc7847a582f51f",\n\nkata_overhead-mem: ~8g（不限） kata_overhead-cpu: -1（不限）\n\nkubepods_mem: 9223372036854771712 ~8g（不限） kubepods_cpu cfs_period_us cfs_quota_us: 100000 -1 不限 kubectl top pod： 1000m 0mi kubectl top node： 1316m 16% 5517mi 84%\n\n[root@localhost hff]# systemd-cgtop | grep kata /kata_overhead - - 4.9m - - /system.slice/kata-monitor.service 1 - 25.1m - -\n\n[root@localhost hff]# systemd-cgtop | grep pod09a392bc-1080-4044-8015-39f392e3862f /kubepods/besteffort/pod09a392bc-1080-4044-8015-39f392e3862f - - 95.8m - -\n\nkubectl describe node | grep test-kata： 250m (3%)（overhead） 0 (0%) 160mi (2%)（overhead） 0 (0%) 6m30s\n\nkubepod不限制，但是pod确实只能用到limit的值\n\n\n# 验证3： 验证overhead是否影响业务负载\n\n设置overhead 2c 2g后，limit 3c3g, 打满cpu=6,mem=3gi\n\n[root@localhost hff]# kubectl get pod\nname                              ready   status        restarts   age\ntest-kata-5687cdcb66-28lgn        0/1     outofmemory   0          17s\ntest-kata-5687cdcb66-2lmd5        0/1     outofmemory   0          11s\ntest-kata-5687cdcb66-2pbhm        0/1     outofmemory   0          23s\ntest-kata-5687cdcb66-575sb        0/1     outofmemory   0          19s\ntest-kata-5687cdcb66-5gvt2        0/1     outofmemory   0          5s\ntest-kata-5687cdcb66-62fbd        0/1     outofmemory   0          33s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 验证4：验证如果不设置request limit，cpu mem的使用上线\n\n设置overhead 2c 2g后，limit不设置， 打满cpu=6,mem=1gi\n\n[root@localhost hff]# kubectl get pod  -w\nname                              ready   status        restarts   age\ntest-kata-55867ffb58-26ndp        0/1     outofmemory   0          4s\ntest-kata-55867ffb58-2blnx        0/1     outofmemory   0          2s\ntest-kata-55867ffb58-2d858        0/1     outofmemory   0          1s\ntest-kata-55867ffb58-2qwzf        0/1     pending       0          0s\ntest-kata-55867ffb58-4j4hl        0/1     outofmemory   0          1s\ntest-kata-55867ffb58-8zzbc        0/1     outofmemory   0          2s\ntest-kata-55867ffb58-crflb        0/1     outofmemory   0          4s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 验证5： 验证cpu mem小于1c 256mi的情况（no overhead）\n\n    resources:\n      requests:\n        memory: "1mi"\n        cpu: "0.1"\n      limits:\n        memory: "100mi"\n        cpu: "550m"\n    args:\n    - -cpus\n    - "2"\n    - -mem-total\n    - 100mi\n    - -mem-alloc-size\n    - 10mi\n    - -mem-alloc-sleep\n    - 1s\n\n\n没有oom，但是pod不断重启，所有并没有被重置成2g\n\n[root@localhost hff]# kubectl get pod -w\nname                              ready   status    restarts   age\nkubefilebrowser-896974bcc-z6scd   1/1     running   3          31d\ntest-kata-6878f4fd9f-76c5k        1/1     running   2          61s\ntest-runc-79d8bdc4cb-v6j28        1/1     running   0          75m\ntest-kata-6878f4fd9f-76c5k        0/1     error     2          72s\ntest-kata-6878f4fd9f-76c5k        0/1     crashloopbackoff   2          75s\n\n[root@localhost hff]# kubectl logs test-kata-6878f4fd9f-76c5k\ni0527 07:16:06.932758       1 main.go:26] allocating "200mi" memory, in "10mi" chunks, with a 1s sleep between allocations\ni0527 07:16:06.933058       1 main.go:39] spawning a thread to consume cpu\ni0527 07:16:06.933082       1 main.go:39] spawning a thread to consume cpu\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 验证6： 极小资源占用测试\n\nlimit550m/200mi，压2c100mi，pod会不断重启，但是不是oomkilled\n\n        resources:\n          requests:\n            memory: "1mi"\n            cpu: "0.1"\n          limits:\n            memory: "200mi"\n            cpu: "550m"\n        args:\n        - -cpus\n        - "2"\n        - -mem-total\n        - 100mi\n        - -mem-alloc-size\n        - 10mi\n        - -mem-alloc-sleep\n        - 1s\nevents:\n  type     reason          age                   from                            message\n  ----     ------          ----                  ----                            -------\n  normal   scheduled       <unknown>             default-scheduler               successfully assigned default/test-kata-68b77bc9f8-zlj5p to localhost.localdomain\n  normal   created         36m (x4 over 38m)     kubelet, localhost.localdomain  created container cpu-stress-kata\n  normal   started         36m (x4 over 38m)     kubelet, localhost.localdomain  started container cpu-stress-kata\n  normal   sandboxchanged  35m (x4 over 37m)     kubelet, localhost.localdomain  pod sandbox changed, it will be killed and re-created.\n  normal   pulled          7m53s (x11 over 38m)  kubelet, localhost.localdomain  container image "vish/stress" already present on machine\n  warning  backoff         3m5s (x159 over 37m)  kubelet, localhost.localdomain  back-off restarting failed container\n[root@localhost hff]#\n[root@localhost hff]# kubectl logs test-kata-68b77bc9f8-zlj5p\ni0527 08:13:52.926368       1 main.go:26] allocating "100mi" memory, in "10mi" chunks, with a 1s sleep between allocations\ni0527 08:13:52.926544       1 main.go:39] spawning a thread to consume cpu\ni0527 08:13:52.926570       1 main.go:39] spawning a thread to consume cpu\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 验证7： 查看kata vm中的cgroup\n\n不设置limit，overhead\n\nbash-5.1# more /sys/fs/cgroup/memory/\ncgroup.clone_children               memory.max_usage_in_bytes\ncgroup.event_control                memory.memsw.failcnt\ncgroup.procs                        memory.memsw.limit_in_bytes\ncgroup.sane_behavior                memory.memsw.max_usage_in_bytes\nkubepods/                           memory.memsw.usage_in_bytes\nmemory.failcnt                      memory.move_charge_at_immigrate\nmemory.force_empty                  memory.oom_control\nmemory.kmem.failcnt                 memory.pressure_level\nmemory.kmem.limit_in_bytes          memory.soft_limit_in_bytes\nmemory.kmem.max_usage_in_bytes      memory.stat\nmemory.kmem.slabinfo                memory.swappiness\nmemory.kmem.tcp.failcnt             memory.usage_in_bytes\nmemory.kmem.tcp.limit_in_bytes      memory.use_hierarchy\nmemory.kmem.tcp.max_usage_in_bytes  notify_on_release\nmemory.kmem.tcp.usage_in_bytes      release_agent\nmemory.kmem.usage_in_bytes          system.slice/\nmemory.limit_in_bytes               tasks\nbash-5.1# more /sys/fs/cgroup/memory/kubepods/\nbesteffort/                         memory.max_usage_in_bytes\ncgroup.clone_children               memory.memsw.failcnt\ncgroup.event_control                memory.memsw.limit_in_bytes\ncgroup.procs                        memory.memsw.max_usage_in_bytes\nmemory.failcnt                      memory.memsw.usage_in_bytes\nmemory.force_empty                  memory.move_charge_at_immigrate\nmemory.kmem.failcnt                 memory.oom_control\nmemory.kmem.limit_in_bytes          memory.pressure_level\nmemory.kmem.max_usage_in_bytes      memory.soft_limit_in_bytes\nmemory.kmem.slabinfo                memory.stat\nmemory.kmem.tcp.failcnt             memory.swappiness\nmemory.kmem.tcp.limit_in_bytes      memory.usage_in_bytes\nmemory.kmem.tcp.max_usage_in_bytes  memory.use_hierarchy\nmemory.kmem.tcp.usage_in_bytes      notify_on_release\nmemory.kmem.usage_in_bytes          tasks\nmemory.limit_in_bytes\nbash-5.1# more /sys/fs/cgroup/cpu/cpu.cfs_quota_us\n-1\nbash-5.1# more /sys/fs/cgroup/cpu/kubepods/besteffort/cpu.cfs_quota_us\n-1\nbash-5.1# more /sys/fs/cgroup/cpu/kubepods/besteffort/pode0eb5953-c643-4429-8812-b8e36d75e3d9/f3cffcf893000b0c5f6105f1adb94e3be7fa62ebecd801a29b9a77a472d62c86/cfs_quota_us\n-1\nbash-5.1# more /sys/fs/cgroup/memory/memory.limit_in_bytes\n9223372036854771712\nbash-5.1#  more /sys/fs/cgroup/memory/kubepods/memory.limit_in_bytes\n9223372036854771712\nbash-5.1#  more /sys/fs/cgroup/memory/kubepods/besteffort/memory.limit_in_bytes\n9223372036854771712\nbash-5.1#  more /sys/fs/cgroup/memory/kubepods/besteffort/pode0eb5953-c643-4429-8812-b8e36d75e3d9/.limit_in_bytes\n9223372036854771712\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n未找到default_vcpu/memory是在哪里做的限制\n\n\n# kata cgroup说明\n\nkata containers 在两层 cgroup 上运行。\n\n * workload guest\n * vmm host （kata containers 在两层 cgroup 上运行。第一层在虚拟机中放置工作负载，而第二层在主机上运行 vmm和 关联线程。）\n\n从 kubernetes 角度来讲，cgroup 指的是 pod cgroup，由 kubelet 创建，限制的是 pod 的资源; 从 container 角度来讲，cgroup 指的是 container cgroup，由对应的 runtime 创建，限制的是 container 的资源。但是为了可以获取到更准确的容器资源，kubelet 会根据 container cgroup 去调整 pod cgroup。 在传统的 runtime 中，两者没有太大的区别。\n\n而 kata containers 引入 vm 的概念，所以针对这种情况有两种处理方式：\n\n * 启用 sandboxcgrouponly（默认），kubelet 在调整 pod cgroup 的大小时，会将 sandbox 的开销统计进去 （就是说，用户申请的资源limit+overhead是业务负载和kata虚拟机开销的最大使用限制，如果不设置limit，默认是default_vcpus/mem??）\n * 禁用 sandboxcgrouponly，sandbox 的开销和 pod cgroup 分开计算，独立存在 （就是说，用户申请的资源limit+overhead是业务负载自己的最大使用限制，kata虚拟机开销单独一个cgroup而且没有限制，如果不设置limit，业务使用默认是default_vcpus/mem）\n\n\n# 两种cgrouppath:\n\n * /kubepods/burstable/pod287707dd-0fda-4fab-874d-e1b00e87390a/c2bfeccb7580707e7559c00f7ee9d46e98745cc2a0d267fbb41c68da41df784f ()\n * /kubepods/pod24356d87-3993-4e9a-8d3f-55207af763f9/kata_842463ada9994438f6c663b082bbf5735c64309f77a0b57838b8a16f347433a6 ()\n\n\n# pod overhead\n\n\n# sandbox_cgroup_only\n\n * 如果启用，运行时将在一个专用cgroup中添加所有kata进程。每个沙盒只创建一个cgroup，主机中的container cgroup将不会创建\n * kata runtime调用者可以自由地限制或收集整个kata沙盒的cgroup统计信息。\n * sandbox cgroup路径是具有podsandbox annotation(???)的容器的父cgroup。\n * 如果没有container type annotation(??)，则sandbox cgroup将受到限制\n * 意味着 pod cgroup 的大小适当，并考虑了 pod 开销（设置podoverhead考虑调度）\n * kata shim 将在sandbox_cgroup_onlypod 的专用 cgroup 下为每个 pod 创建一个子 cgroup\n * kata shim、qemu 线程将与沙箱在同一个 cgroup 中。在这种情况下，它们将与 vcpu 线程共享同一组 cpu 内核\n\n=true好处：\n\n * 便于pod资源统计\n * 更好的主机资源隔离\n\n=fasle优点及缺点：\n\n * 不限制会消耗大量主机资源\n * 在专用开销cgroup下运行所有非vcpu线程可以提供有关实际的开销准确值，可以设置开销cgroup大小（手动修改，无接口）\n\n\n# default_vcpus/memory\n\n\n# kata资源开销\n\n * 半虚拟化 i/o 后端\n * vmm 实例\n * kata shim 进程\n * kata monitor开销（如果开启）\n\n\n# kata组件进程：\n\n * sandbox qemu-system-x86_64进程cgroup\n * containerd-shim-kata-v2进程\n * 两个virtiofsd进程\n\nkata pod起来后，其中，kata shim进程和qemu进程占用了大量的内存开销，其中，沙箱里的内核和 agent 是直接分享了应用内存但并不是应用的一部分，也就是说，这一部分是用户可见的开销。而 vmm 本身在宿主机上的开销以及 shim-v2 占用的内存，虽然用户应用不可见，但同样是 kata 带来的开销，影响基础设施的资源效率。\n\n这些内存开销里，还包括了可共享开销和不可共享开销。所有宿主这边的代码段内存（只读内存），可以共享 page cache，所以是共享的，而在沙箱里的代码（只读）内存，在使用 dax 或模版的情况下，也可以共享同一份。所以，可以共享的内存开销在节点全局范围内是唯一一份，所以在有多个pod的情况下，这部分的常数开销相对而言是不太重要的，相反的，不可共享开销，尤其是堆内存开销，会随着 pod 的增长而增长，的换句话说，堆内存（匿名页）是最需要被重视的开销。\n\n综上，第一位需要被遏制的开销是沙箱内的用户可见的不可共享开销，尤其是 agent 的开销，而 vmm 和 shim 的匿名页开销次之。\n\n\n# 不支持cgroups v2\n\n\n# 一些需要知道的配置\n\n# default number of vcpus per sb/vm:\n# unspecified or 0                --\x3e will be set to 1（不设置或0则默认是1）\n# < 0                             --\x3e will be set to the actual number of physical cores(小于0则设为实际物理核)\n# > 0 <= number of physical cores --\x3e will be set to the specified number\n# > number of physical cores      --\x3e will be set to the actual number of physical cores（大于物理核默认为物理核）\ndefault_vcpus = 1\n\n# default memory size in mib for sb/vm.\n# if unspecified then it will be set 2048 mib.（不设置默认是2gi）\ndefault_memory = 2048\n\n# default maximum number of vcpus per sb/vm:\n# unspecified or == 0             --\x3e will be set to the actual number of physical cores or to the maximum number（不设置或0默认为最大物理核数）\n#                                     of vcpus supported by kvm if that number is exceeded\n# > 0 <= number of physical cores --\x3e will be set to the specified number\n# > number of physical cores      --\x3e will be set to the actual number of physical cores or to the maximum number\n#                                     of vcpus supported by kvm if that number is exceeded\n# warning: depending of the architecture, the maximum number of vcpus supported by kvm is used when\n# the actual number of physical cores is greater than it.\n# warning: be aware that this value impacts the virtual machine\'s memory footprint and cpu\n# the hotplug functionality. for example, `default_maxvcpus = 240` specifies that until 240 vcpus\n# can be added to a sb/vm, but the memory footprint will be big. another example, with\n# `default_maxvcpus = 8` the memory footprint will be small, but 8 will be the maximum number of\n# vcpus supported by the sb/vm. in general, we recommend that you do not edit this variable,\n# unless you know what are you doing.\n# notice: on arm platform with gicv2 interrupt controller, set it to 8.\ndefault_maxvcpus = 0\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 通过注释修改配置：\n\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n runtime_type = "io.containerd.kata.v2"\n privileged_without_host_devices = false\n shim_debug = true\n pod_annotations = ["io.katacontainers.*"] #  <-- look here\n\n\n1\n2\n3\n4\n5\n\n\n> io.katacontainers.config.hypervisor.default_vcpus = 5\n\n\n# 打开--feature-gates podoverhead\n\n> /etc/kubernetes/manifests/kube-apiserver.yaml\n\n1.17默认关闭，1.18默认打开\n\n> environment="kubelet_feature=--feature-gates=rotatekubeletservercertificate=true,volumesnapshotdatasource=true,expandcsivolumes=true,volumepvcdatasource=true,servicetopology=true,endpointslice=true,podoverhead=true"\n\n\n# 启用runtimeclass准入控制\n\n> --feature-gates=volumesnapshotdatasource=true,expandcsivolumes=true,volumepvcdatasource=true,ttlafterfinished=true,servicetopology=true,endpointslice=true,podoverhead=true\n\n\n# 设置podoverhead\n\nkind: runtimeclass\napiversion: node.k8s.io/v1beta1\nmetadata:\n  name: kata-containers\nhandler: kata\noverhead:\n  podfixed:\n  memory: "100mi"\n  cpu: "100m"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# virtio-mem内存热插拔（仅支持qemu）\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-use-virtio-mem-with-kata.md\n\n$ sudo sed -i -e \'s/^#enable_virtio_mem.*$/enable_virtio_mem = true/g\' /etc/kata-containers/configuration.toml\n\n\n1\n\n\n\n# 附件\n\n---\napiversion: apps/v1\nkind: deployment\nmetadata:\n  name: test-kata\nspec:\n  replicas: 1\n  selector:\n    matchlabels:\n      app: test-kata\n  template:\n    metadata:\n      labels:\n        app: test-kata\n    spec:\n      runtimeclassname: kata-containers\n      containers:\n      - image: vish/stress\n        imagepullpolicy: ifnotpresent\n        name: cpu-stress-kata\n        resources:\n          requests:\n            memory: "1mi"\n            cpu: "0.1"\n          limits:\n            memory: "161mi"\n            cpu: "350m"\n        args:\n        - -cpus\n        - "2"\n        - -mem-total\n        - 100mi\n        - -mem-alloc-size\n        - 10mi\n        - -mem-alloc-sleep\n        - 1s\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n',charsets:{cjk:!0}},{title:"guest kernel和guestos",frontmatter:{title:"guest kernel和guestos",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/e5081b/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"系统管理程序 hypervisor将启动一个虚拟机，该虚拟机包括最小的 虚拟机内核和虚拟机镜像。",meta:[{name:"twitter:title",content:"guest kernel和guestos"},{name:"twitter:description",content:"系统管理程序 hypervisor将启动一个虚拟机，该虚拟机包括最小的 虚拟机内核和虚拟机镜像。"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/04.guest%20kernel%E5%92%8Cguestos.html"},{property:"og:type",content:"article"},{property:"og:title",content:"guest kernel和guestos"},{property:"og:description",content:"系统管理程序 hypervisor将启动一个虚拟机，该虚拟机包括最小的 虚拟机内核和虚拟机镜像。"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/04.guest%20kernel%E5%92%8Cguestos.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"guest kernel和guestos"},{itemprop:"description",content:"系统管理程序 hypervisor将启动一个虚拟机，该虚拟机包括最小的 虚拟机内核和虚拟机镜像。"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/04.guest%20kernel%E5%92%8Cguestos.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/04.guest kernel和guestos.md",key:"v-397f9139",path:"/pages/e5081b/",headers:[{level:2,title:"image type(rootfs)",slug:"image-type-rootfs",normalizedTitle:"image type(rootfs)",charIndex:821},{level:2,title:"initrd type",slug:"initrd-type",normalizedTitle:"initrd type",charIndex:943},{level:2,title:"使用 Kata 配置文件configuration.toml（全局）",slug:"使用-kata-配置文件configuration-toml-全局",normalizedTitle:"使用 kata 配置文件configuration.toml（全局）",charIndex:2209},{level:2,title:"使用注释",slug:"使用注释",normalizedTitle:"使用注释",charIndex:2338}],headersStr:"image type(rootfs) initrd type 使用 Kata 配置文件configuration.toml（全局） 使用注释",content:'系统管理程序 hypervisor将启动一个虚拟机，该虚拟机包括最小的 虚拟机内核和虚拟机镜像。\n\n\n# 配置\n\n[hypervisor.qemu]\npath = "/opt/kata/bin/qemu-system-x86_64"\nkernel = "/opt/kata/share/kata-containers/vmlinux.container"\nimage = "/opt/kata/share/kata-containers/kata-containers.img"\nmachine_type = "q35"\n[Kernel]\n Path = "/opt/kata/share/kata-containers/vmlinux-5.15.23-89"\n Parameters = "systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none agent.debug_console agent.debug_console_vport=1026"\n [Image]\n Path = "/opt/kata/share/kata-containers/kata-clearlinux-latest.image"\n [Initrd]\n Path = ""\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# Guest kernel\n\n用于启动VM。Kata-container高度优化了内核启动时间和极小的内存占用，只用于一个容器的运行。\n\n\n# Guest image\n\n支持基于initrd和rootfs(image)的最小镜像，默认包中提供一个镜像和一个initrd，他们都是通过osbuilder生成的。\n\n\n# image type(rootfs)\n\n默认的 root filesystem image (有时称为mini O/S)是一个基于 Clear Linux 的高度优化的容器引导系统。它提供了一个极小的环境，并有一个高度优化的引导路径。\n\n\n# initrd type\n\n压缩的 cpio(1) 文件，从 rootfs （被载入内存并作为 linux 启动过程的一部分被使用）创建。\n\nKata 运行时配置文件中的initrd和image选项之一必须设置，但不能同时设置。选项之间的主要区别在于initrd(10MB+) 的大小明显小于 rootfs image(100MB+)。\n\n通过initrd=和image=配置决定使用哪一个类型\n\n\n# 最小镜像极度简化\n\nhttps://github.com/kata-containers/kata-containers/issues/2010\n\n\n# 内核构建build-kernel.sh\n\nhttps://github.com/kata-containers/kata-containers/tree/main/tools/packaging/kernel\n\n例子：\n\n$ ./build-kernel.sh -v 5.10.25 -g nvidia -f -d setup\n· -v 5.10.25：指定来宾内核版本。\n· -g nvidia: 构建一个支持 Nvidia GPU 的来宾内核。\n· -f:.config即使内核目录已经存在也强制生成文件。\n· -d: 启用 bash 调试模式。\n\n\n1\n2\n3\n4\n5\n\n\n添加补丁：${GOPATH}/src/github.com/kata-containers/kata-containers/tools/packaging/kernel/patches/\n\n内核配置：${GOPATH}/src/github.com/kata-containers/kata-containers/tools/packaging/kernel/configs/\n\n\n# osbuilder\n\nhttps://github.com/kata-containers/kata-containers/tree/main/tools/osbuilder\n\n\n# 修改内核参数\n\n[Kernel]\n Path = "/opt/kata/share/kata-containers/vmlinux-5.15.23-89"\n Parameters = "systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none agent.debug_console agent.debug_console_vport=1026"\n\n\n1\n2\n3\n\n\n\n# 加载内核模块\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-load-kernel-modules-with-kata.md\n\n\n# 使用 Kata 配置文件configuration.toml（全局）\n\n> \n\nkernel_modules =[ “ e1000e InterruptThrottleRate=3000,3000,3000 EEE=1 ” , “ i915 ” ]\n\n\n# 使用注释\n\nannotations:\n  io.katacontainers.config.agent.kernel_modules: "e1000e EEE=1; i915"spec:\n\n\n1\n2\n\n\n\n# 使用 Kata 设置sysctl\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-use-sysctls-with-kata.md\n\nsysctl 使用 pod 的 securityContext 在 pod 上设置。securityContext 适用于同一 pod 中的所有容器。\n\napiVersion: v1kind: Podmetadata:\nname: sysctl-examplespec:\nsecurityContext:\n  sysctls:\n   - name: kernel.shm_rmid_forced\n     value: "0"\n   - name: net.ipv4.route.min_pmtu\n     value: "552"\n   - name: kernel.msgmax\n     value: "65536"\n ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n所有安全sysctls默认被开启\n\n使用不安全的 sysctls，集群管理员需要允许这些：\n\n$ kubelet --allowed-unsafe-sysctls \'kernel.msg*,net.ipv4.route.min_pmtu\' ...\n\n\n1\n',normalizedContent:'系统管理程序 hypervisor将启动一个虚拟机，该虚拟机包括最小的 虚拟机内核和虚拟机镜像。\n\n\n# 配置\n\n[hypervisor.qemu]\npath = "/opt/kata/bin/qemu-system-x86_64"\nkernel = "/opt/kata/share/kata-containers/vmlinux.container"\nimage = "/opt/kata/share/kata-containers/kata-containers.img"\nmachine_type = "q35"\n[kernel]\n path = "/opt/kata/share/kata-containers/vmlinux-5.15.23-89"\n parameters = "systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none agent.debug_console agent.debug_console_vport=1026"\n [image]\n path = "/opt/kata/share/kata-containers/kata-clearlinux-latest.image"\n [initrd]\n path = ""\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# guest kernel\n\n用于启动vm。kata-container高度优化了内核启动时间和极小的内存占用，只用于一个容器的运行。\n\n\n# guest image\n\n支持基于initrd和rootfs(image)的最小镜像，默认包中提供一个镜像和一个initrd，他们都是通过osbuilder生成的。\n\n\n# image type(rootfs)\n\n默认的 root filesystem image (有时称为mini o/s)是一个基于 clear linux 的高度优化的容器引导系统。它提供了一个极小的环境，并有一个高度优化的引导路径。\n\n\n# initrd type\n\n压缩的 cpio(1) 文件，从 rootfs （被载入内存并作为 linux 启动过程的一部分被使用）创建。\n\nkata 运行时配置文件中的initrd和image选项之一必须设置，但不能同时设置。选项之间的主要区别在于initrd(10mb+) 的大小明显小于 rootfs image(100mb+)。\n\n通过initrd=和image=配置决定使用哪一个类型\n\n\n# 最小镜像极度简化\n\nhttps://github.com/kata-containers/kata-containers/issues/2010\n\n\n# 内核构建build-kernel.sh\n\nhttps://github.com/kata-containers/kata-containers/tree/main/tools/packaging/kernel\n\n例子：\n\n$ ./build-kernel.sh -v 5.10.25 -g nvidia -f -d setup\n· -v 5.10.25：指定来宾内核版本。\n· -g nvidia: 构建一个支持 nvidia gpu 的来宾内核。\n· -f:.config即使内核目录已经存在也强制生成文件。\n· -d: 启用 bash 调试模式。\n\n\n1\n2\n3\n4\n5\n\n\n添加补丁：${gopath}/src/github.com/kata-containers/kata-containers/tools/packaging/kernel/patches/\n\n内核配置：${gopath}/src/github.com/kata-containers/kata-containers/tools/packaging/kernel/configs/\n\n\n# osbuilder\n\nhttps://github.com/kata-containers/kata-containers/tree/main/tools/osbuilder\n\n\n# 修改内核参数\n\n[kernel]\n path = "/opt/kata/share/kata-containers/vmlinux-5.15.23-89"\n parameters = "systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none agent.debug_console agent.debug_console_vport=1026"\n\n\n1\n2\n3\n\n\n\n# 加载内核模块\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-load-kernel-modules-with-kata.md\n\n\n# 使用 kata 配置文件configuration.toml（全局）\n\n> \n\nkernel_modules =[ “ e1000e interruptthrottlerate=3000,3000,3000 eee=1 ” , “ i915 ” ]\n\n\n# 使用注释\n\nannotations:\n  io.katacontainers.config.agent.kernel_modules: "e1000e eee=1; i915"spec:\n\n\n1\n2\n\n\n\n# 使用 kata 设置sysctl\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-use-sysctls-with-kata.md\n\nsysctl 使用 pod 的 securitycontext 在 pod 上设置。securitycontext 适用于同一 pod 中的所有容器。\n\napiversion: v1kind: podmetadata:\nname: sysctl-examplespec:\nsecuritycontext:\n  sysctls:\n   - name: kernel.shm_rmid_forced\n     value: "0"\n   - name: net.ipv4.route.min_pmtu\n     value: "552"\n   - name: kernel.msgmax\n     value: "65536"\n ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n所有安全sysctls默认被开启\n\n使用不安全的 sysctls，集群管理员需要允许这些：\n\n$ kubelet --allowed-unsafe-sysctls \'kernel.msg*,net.ipv4.route.min_pmtu\' ...\n\n\n1\n',charsets:{cjk:!0}},{title:"kata-monitor监控",frontmatter:{title:"kata-monitor监控",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/4df25b/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"https://github.com/kata-containers/kata-containers/blob/main/docs/design/kata-2-0-metrics.md",meta:[{name:"twitter:title",content:"kata-monitor监控"},{name:"twitter:description",content:"https://github.com/kata-containers/kata-containers/blob/main/docs/design/kata-2-0-metrics.md"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/05.kata-monitor%E7%9B%91%E6%8E%A7.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata-monitor监控"},{property:"og:description",content:"https://github.com/kata-containers/kata-containers/blob/main/docs/design/kata-2-0-metrics.md"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/05.kata-monitor%E7%9B%91%E6%8E%A7.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata-monitor监控"},{itemprop:"description",content:"https://github.com/kata-containers/kata-containers/blob/main/docs/design/kata-2-0-metrics.md"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/05.kata-monitor%E7%9B%91%E6%8E%A7.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/05.kata-monitor监控.md",key:"v-02ffbd9e",path:"/pages/4df25b/",headers:[{level:2,title:"kata-monitor启动方式",slug:"kata-monitor启动方式",normalizedTitle:"kata-monitor启动方式",charIndex:282},{level:2,title:"promethues增加scrape_configs",slug:"promethues增加scrape-configs",normalizedTitle:"promethues增加scrape_configs",charIndex:1078},{level:2,title:"导入 Grafana dashborad",slug:"导入-grafana-dashborad",normalizedTitle:"导入 grafana dashborad",charIndex:1193},{level:2,title:"Kata Containers 目前采集了下面几种类型的 metrics：",slug:"kata-containers-目前采集了下面几种类型的-metrics",normalizedTitle:"kata containers 目前采集了下面几种类型的 metrics：",charIndex:1927},{level:2,title:"promethues监控负载指标",slug:"promethues监控负载指标",normalizedTitle:"promethues监控负载指标",charIndex:2725},{level:2,title:"指标的性能与开销",slug:"指标的性能与开销",normalizedTitle:"指标的性能与开销",charIndex:2966}],headersStr:"kata-monitor启动方式 promethues增加scrape_configs 导入 Grafana dashborad Kata Containers 目前采集了下面几种类型的 metrics： promethues监控负载指标 指标的性能与开销",content:'https://github.com/kata-containers/kata-containers/blob/main/docs/design/kata-2-0-metrics.md\n\nkata-monitor 进程运行在宿主机上，负责从各 Kata Containers 容器/VM中获取 metrics，并返回给 Prometheus。\n\n默认情况下 kata-monitor 不需要指定参数，它会监听在本地的 8090 端口，这也是在 Prometheus 配置文件中 target 指定的端口号。如果要修改这个端口号，则需要注意两处要保持一致。\n\n\n# kata-monitor启动方式\n\n 1. kata节点运行kata-monitor守护进程\n\n[root@localhost ~]# cat /etc/systemd/system/kata-monitor.service\n[Unit]\nDescription=kata monitor\n\n[Service]\nExecStart=/opt/kata/bin/kata-monitor -listen-address 0.0.0.0:8090\nRestart=always\nStartLimitInterval=0\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n 2. daemonset(？？没有镜像，手动编译不过)（TODO）\n\n$ kubectl apply -f https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/how-to/data/kata-monitor-daemonset.yml\n\n\n1\n\n\nOnce the daemonset is running, Prometheus should discover kata-monitor as a target. You can open http://:30909/service-discovery and find kubernetes-pods under the Service Discovery list\n\n * 关于没有kata-monitor 镜像问题 https://github.com/kata-containers/kata-containers/issues/2421\n\n\n# promethues增加scrape_configs\n\n- job_name: \'kata\'\n    static_configs:\n    - targets: [\'<kata节点IP>:8090\']\n\n\n1\n2\n3\n\n\n\n# 导入 Grafana dashborad\n\n[root@localhost ~]# curl -XPOST -i <grafana节点IP>:3000/api/dashboards/import \\\n>     -u admin:admin \\\n>     -H "Content-Type: application/json" \\\n> -d "{\\"dashboard\\":$(curl -sL https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/how-to/data/dashboard.json )}"\n\nHTTP/1.1 100 Continue\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Mon, 16 May 2022 05:16:33 GMT\nContent-Length: 253\n\n{"pluginId":"","title":"Kata containers","imported":true,"importedUri":"db/kata-containers","importedUrl":"/d/75pdqURGk/kata-containers","slug":"","dashboardId":0,"folderId":0,"importedRevision":1,"revision":1,"description":"","path":"","removed":false}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 监控指标\n\n\n# Kata Containers 目前采集了下面几种类型的 metrics：\n\nKata agent metrics：agent 进程的 metrics Kata guest OS metrics：VM 中的 guest metrics Hypervisor metrics：hypervisor 进程的 metrics（如果 hypervisor 本身提供了 metrics 接口，比如 firecracker，也会采集到 Kata Containers 的 metrics） Kata monitor metrics：kata-monitor 进程的 metrics Kata containerd shim v2 metrics：shimv2 进程的 metrics\n\n在kata vm中/proc//io stat status等的数据 kata_agent_io_stat代理进程 IO 统计 kata_agent_process_cpu_seconds_total 以秒为单位花费的总用户和系统 CPU 时间。 kata_agent_total_vm\n\n在kata vm中/proc/stat diskstats meminfo等的数据 kata_guest_cpu_time kata_guest_diskstat kata_guest_load kata_guest_meminfo kata_guest_vm_stat\n\nkata_hypervisor_io_stat 处理IO统计 kata_hypervisor_proc_stat 进程统计\n\nkata_shim_pod_overhead_cpu CPU 资源的 Kata Pod 开销（百分比） kata_shim_pod_overhead_memory_in_bytes Kata Pod 的内存资源开销（字节）\n\n\n# promethues监控负载指标\n\n * container_fs_writes_bytes_total\n\n * container_cpu_usage_seconds_total没有container字段\n\n * \n\nsum(irate(container_cpu_usage_seconds_total{namespace=~"${allNamespace}",pod=~"^${loadNames}",container!=""}[3m]))by(pod)\n\n\n1\n\n\n\n# 指标的性能与开销\n\n * 端到端（从 Prometheus 服务器到kata-monitor并kata-monitor写回响应）：20 毫秒（平均）\n\n * 代理（从 shim 到agent的所有 RPC）：3 毫秒（平均）\n\n * Prometheus 默认scrape_interval为 1 分钟，但通常设置为 15 秒。较小scrape_interval会导致更多开销，因此用户应根据自己的监控需求进行设置。\n   \n   Prometheus 发出的一个指标获取请求的大小。当没有 gzip 压缩时，计算预期大小的公式是：\n   9 + (144 - 9) *number of kata sandboxes Prometheus支持gzip压缩. 启用后，每个请求的响应大小会更小：\n   2 + (10 - 2) *number of kata sandboxes\n\n\n# endpoint\n\nkata-monitor公开了以下endpoint·：\n\n * /metrics : 获取 Kata 沙箱指标。\n * /sandboxes : 列出主机上运行的所有 Kata 沙箱。\n * /agent-url : 获取 Kata 沙箱的代理 URL。\n * /debug/vars : Kata 运行时 shim 的内部数据。\n * /debug/pprof/ : Kata 运行时 shim 的 Golang 分析数据：索引页。\n * /debug/pprof/cmdline : Kata 运行时 shim 的 Golang 分析数据：cmdlineendpoint。\n * /debug/pprof/profile : Kata 运行时 shim 的 Golang 分析数据：profileendpoint（CPU 分析）。\n * /debug/pprof/symbol : Kata 运行时 shim 的 Golang 分析数据：symbolendpoint。\n * /debug/pprof/trace : Kata 运行时 shim 的 Golang 分析数据：traceendpoint。\n\n/agent-url和所有/debug/ * 都需要在查询字符串中指定sandbox_id\n\ncurl 127.0.0.1:8090/sandboxes curl 127.0.0.1:8090/agent-url?sandboxes=df96b24bd49ec437c872c1a758edc084121d607ce1242ff5d2263a0e1b693343',normalizedContent:'https://github.com/kata-containers/kata-containers/blob/main/docs/design/kata-2-0-metrics.md\n\nkata-monitor 进程运行在宿主机上，负责从各 kata containers 容器/vm中获取 metrics，并返回给 prometheus。\n\n默认情况下 kata-monitor 不需要指定参数，它会监听在本地的 8090 端口，这也是在 prometheus 配置文件中 target 指定的端口号。如果要修改这个端口号，则需要注意两处要保持一致。\n\n\n# kata-monitor启动方式\n\n 1. kata节点运行kata-monitor守护进程\n\n[root@localhost ~]# cat /etc/systemd/system/kata-monitor.service\n[unit]\ndescription=kata monitor\n\n[service]\nexecstart=/opt/kata/bin/kata-monitor -listen-address 0.0.0.0:8090\nrestart=always\nstartlimitinterval=0\nrestartsec=10\n\n[install]\nwantedby=multi-user.target\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n 2. daemonset(？？没有镜像，手动编译不过)（todo）\n\n$ kubectl apply -f https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/how-to/data/kata-monitor-daemonset.yml\n\n\n1\n\n\nonce the daemonset is running, prometheus should discover kata-monitor as a target. you can open http://:30909/service-discovery and find kubernetes-pods under the service discovery list\n\n * 关于没有kata-monitor 镜像问题 https://github.com/kata-containers/kata-containers/issues/2421\n\n\n# promethues增加scrape_configs\n\n- job_name: \'kata\'\n    static_configs:\n    - targets: [\'<kata节点ip>:8090\']\n\n\n1\n2\n3\n\n\n\n# 导入 grafana dashborad\n\n[root@localhost ~]# curl -xpost -i <grafana节点ip>:3000/api/dashboards/import \\\n>     -u admin:admin \\\n>     -h "content-type: application/json" \\\n> -d "{\\"dashboard\\":$(curl -sl https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/how-to/data/dashboard.json )}"\n\nhttp/1.1 100 continue\n\nhttp/1.1 200 ok\ncontent-type: application/json\ndate: mon, 16 may 2022 05:16:33 gmt\ncontent-length: 253\n\n{"pluginid":"","title":"kata containers","imported":true,"importeduri":"db/kata-containers","importedurl":"/d/75pdqurgk/kata-containers","slug":"","dashboardid":0,"folderid":0,"importedrevision":1,"revision":1,"description":"","path":"","removed":false}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 监控指标\n\n\n# kata containers 目前采集了下面几种类型的 metrics：\n\nkata agent metrics：agent 进程的 metrics kata guest os metrics：vm 中的 guest metrics hypervisor metrics：hypervisor 进程的 metrics（如果 hypervisor 本身提供了 metrics 接口，比如 firecracker，也会采集到 kata containers 的 metrics） kata monitor metrics：kata-monitor 进程的 metrics kata containerd shim v2 metrics：shimv2 进程的 metrics\n\n在kata vm中/proc//io stat status等的数据 kata_agent_io_stat代理进程 io 统计 kata_agent_process_cpu_seconds_total 以秒为单位花费的总用户和系统 cpu 时间。 kata_agent_total_vm\n\n在kata vm中/proc/stat diskstats meminfo等的数据 kata_guest_cpu_time kata_guest_diskstat kata_guest_load kata_guest_meminfo kata_guest_vm_stat\n\nkata_hypervisor_io_stat 处理io统计 kata_hypervisor_proc_stat 进程统计\n\nkata_shim_pod_overhead_cpu cpu 资源的 kata pod 开销（百分比） kata_shim_pod_overhead_memory_in_bytes kata pod 的内存资源开销（字节）\n\n\n# promethues监控负载指标\n\n * container_fs_writes_bytes_total\n\n * container_cpu_usage_seconds_total没有container字段\n\n * \n\nsum(irate(container_cpu_usage_seconds_total{namespace=~"${allnamespace}",pod=~"^${loadnames}",container!=""}[3m]))by(pod)\n\n\n1\n\n\n\n# 指标的性能与开销\n\n * 端到端（从 prometheus 服务器到kata-monitor并kata-monitor写回响应）：20 毫秒（平均）\n\n * 代理（从 shim 到agent的所有 rpc）：3 毫秒（平均）\n\n * prometheus 默认scrape_interval为 1 分钟，但通常设置为 15 秒。较小scrape_interval会导致更多开销，因此用户应根据自己的监控需求进行设置。\n   \n   prometheus 发出的一个指标获取请求的大小。当没有 gzip 压缩时，计算预期大小的公式是：\n   9 + (144 - 9) *number of kata sandboxes prometheus支持gzip压缩. 启用后，每个请求的响应大小会更小：\n   2 + (10 - 2) *number of kata sandboxes\n\n\n# endpoint\n\nkata-monitor公开了以下endpoint·：\n\n * /metrics : 获取 kata 沙箱指标。\n * /sandboxes : 列出主机上运行的所有 kata 沙箱。\n * /agent-url : 获取 kata 沙箱的代理 url。\n * /debug/vars : kata 运行时 shim 的内部数据。\n * /debug/pprof/ : kata 运行时 shim 的 golang 分析数据：索引页。\n * /debug/pprof/cmdline : kata 运行时 shim 的 golang 分析数据：cmdlineendpoint。\n * /debug/pprof/profile : kata 运行时 shim 的 golang 分析数据：profileendpoint（cpu 分析）。\n * /debug/pprof/symbol : kata 运行时 shim 的 golang 分析数据：symbolendpoint。\n * /debug/pprof/trace : kata 运行时 shim 的 golang 分析数据：traceendpoint。\n\n/agent-url和所有/debug/ * 都需要在查询字符串中指定sandbox_id\n\ncurl 127.0.0.1:8090/sandboxes curl 127.0.0.1:8090/agent-url?sandboxes=df96b24bd49ec437c872c1a758edc084121d607ce1242ff5d2263a0e1b693343',charsets:{cjk:!0}},{title:"kata使用限制",frontmatter:{title:"kata使用限制",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/f1a570/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"kata使用限制"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/06.kata%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata使用限制"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/06.kata%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata使用限制"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/06.kata%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/06.kata使用限制.md",key:"v-5ee541f8",path:"/pages/f1a570/",headers:[{level:2,title:"CLI命令：不支持docker和Podman",slug:"cli命令-不支持docker和podman",normalizedTitle:"cli命令：不支持docker和podman",charIndex:358},{level:2,title:"runtime命令：不支持checkpoint、restore、events 、update",slug:"runtime命令-不支持checkpoint、restore、events-、update",normalizedTitle:"runtime命令：不支持checkpoint、restore、events 、update",charIndex:415},{level:2,title:"网络？未列出",slug:"网络-未列出",normalizedTitle:"网络？未列出",charIndex:466},{level:2,title:"资源管理",slug:"资源管理",normalizedTitle:"资源管理",charIndex:477},{level:3,title:"docker 的--cpu",slug:"docker-的-cpu",normalizedTitle:"docker 的--cpu",charIndex:539},{level:3,title:"vcpus",slug:"vcpus",normalizedTitle:"vcpus",charIndex:557},{level:2,title:"架构限制",slug:"架构限制",normalizedTitle:"架构限制",charIndex:567},{level:3,title:"存储限制subPaths",slug:"存储限制subpaths",normalizedTitle:"存储限制subpaths",charIndex:576},{level:3,title:"主机资源共享:securityContext privileged",slug:"主机资源共享-securitycontext-privileged",normalizedTitle:"主机资源共享:securitycontext privileged",charIndex:593},{level:2,title:"通过guest kernel参数设置限制kata vm，如sysctl参数等",slug:"通过guest-kernel参数设置限制kata-vm-如sysctl参数等",normalizedTitle:"通过guest kernel参数设置限制kata vm，如sysctl参数等",charIndex:734},{level:2,title:"限制kata container",slug:"限制kata-container",normalizedTitle:"限制kata container",charIndex:777},{level:2,title:"通过主机级约束限制hypervisor；设置hypervisor参数",slug:"通过主机级约束限制hypervisor-设置hypervisor参数",normalizedTitle:"通过主机级约束限制hypervisor；设置hypervisor参数",charIndex:798}],headersStr:"CLI命令：不支持docker和Podman runtime命令：不支持checkpoint、restore、events 、update 网络？未列出 资源管理 docker 的--cpu vcpus 架构限制 存储限制subPaths 主机资源共享:securityContext privileged 通过guest kernel参数设置限制kata vm，如sysctl参数等 限制kata container 通过主机级约束限制hypervisor；设置hypervisor参数",content:"https://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md\n\nkata在硬件隔离的虚拟机中运行容器，每个vm都有独立的内核，由于这种高程度的隔离，某些容器功能无法启用，或者通过vm隐式启用。\n\nOCI 规范定义了运行时必须支持的最低规范，以便与 Docker 等容器管理器进行互操作。如果运行时不支持 OCI 规范的某些方面，则根据定义它是一个限制。\n\n但是，runc并不完全符合 OCI 规范本身。\n\n以下是社区列出的限制 https://github.com/pulls?q=label%3Alimitation+org%3Akata-containers+is%3Aopen\n\n\n# 一些列出的限制\n\n\n# CLI命令：不支持docker和Podman\n\n不支持docker --runtime指定kata运行时\n\n\n# runtime命令：不支持checkpoint、restore、events 、update\n\n\n# 网络？未列出\n\n\n# 资源管理\n\n对于基于 VM 的系统，将 cgroup、CPU、内存和存储等资源约束应用于工作负载并不总是那么简单。\n\n\n# docker 的--cpu\n\n\n# vcpus\n\n\n# 架构限制\n\n\n# 存储限制subPaths\n\n\n# 主机资源共享:securityContext privileged\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/privileged.md\n\n\n# kata容器限制级别\n\n\n# 通过guest kernel参数设置限制kata vm，如sysctl参数等\n\n\n# 限制kata container\n\n\n# 通过主机级约束限制hypervisor；设置hypervisor参数",normalizedContent:"https://github.com/kata-containers/kata-containers/blob/main/docs/limitations.md\n\nkata在硬件隔离的虚拟机中运行容器，每个vm都有独立的内核，由于这种高程度的隔离，某些容器功能无法启用，或者通过vm隐式启用。\n\noci 规范定义了运行时必须支持的最低规范，以便与 docker 等容器管理器进行互操作。如果运行时不支持 oci 规范的某些方面，则根据定义它是一个限制。\n\n但是，runc并不完全符合 oci 规范本身。\n\n以下是社区列出的限制 https://github.com/pulls?q=label%3alimitation+org%3akata-containers+is%3aopen\n\n\n# 一些列出的限制\n\n\n# cli命令：不支持docker和podman\n\n不支持docker --runtime指定kata运行时\n\n\n# runtime命令：不支持checkpoint、restore、events 、update\n\n\n# 网络？未列出\n\n\n# 资源管理\n\n对于基于 vm 的系统，将 cgroup、cpu、内存和存储等资源约束应用于工作负载并不总是那么简单。\n\n\n# docker 的--cpu\n\n\n# vcpus\n\n\n# 架构限制\n\n\n# 存储限制subpaths\n\n\n# 主机资源共享:securitycontext privileged\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/privileged.md\n\n\n# kata容器限制级别\n\n\n# 通过guest kernel参数设置限制kata vm，如sysctl参数等\n\n\n# 限制kata container\n\n\n# 通过主机级约束限制hypervisor；设置hypervisor参数",charsets:{cjk:!0}},{title:"其他特性",frontmatter:{title:"其他特性",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/2dc340/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"其他特性"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/07.%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7.html"},{property:"og:type",content:"article"},{property:"og:title",content:"其他特性"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/07.%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"其他特性"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/07.%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/07.其他特性.md",key:"v-093891d7",path:"/pages/2dc340/",headersStr:null,content:"# vm cache\n\nVMCache 服务器将创建一些 VM 并通过工厂缓存对其进行缓存。它将 VM 转换为 gRPC 格式，并在收到客户端请求时进行传输。\n\nvm_cache_number指定VMCache的缓存数量：\n- 未指定或 == 0\n  VMCache 已禁用\n- \\> 0\n  将被设置为指定的数字\nvm_cache_endpoint指定 Unix 套接字的地址。\n\n\n1\n2\n3\n4\n5\n6\n\n\n通过调用创建一个 VM 模板供以后使用：\n\n$ sudo kata-runtime factory init\n\n\n1\n\n\n\n# 虚拟机模板\n\n\n# 特权容器\n\n具有通常不授予的附加功能和访问权限 如果配置不正确，它可能会降低 Kata Containers 的安全性。\n\n默认情况下，当为容器启用特权时，/dev/*主机中的所有块设备都会挂载到guest中。这将允许 Kata guest内部的特权容器获得从主机挂载任何块设备的访问权限，这是降低 Kata 安全性的潜在不良副作用。\n\n通过privileged_without_host_devices， 允许在 containerd 配置中为每个运行时配置特权主机设备行为，将此设置为true将禁用主机设备热插入来宾，即使启用了特权也是如此。\n\n\n# Serverless",normalizedContent:"# vm cache\n\nvmcache 服务器将创建一些 vm 并通过工厂缓存对其进行缓存。它将 vm 转换为 grpc 格式，并在收到客户端请求时进行传输。\n\nvm_cache_number指定vmcache的缓存数量：\n- 未指定或 == 0\n  vmcache 已禁用\n- \\> 0\n  将被设置为指定的数字\nvm_cache_endpoint指定 unix 套接字的地址。\n\n\n1\n2\n3\n4\n5\n6\n\n\n通过调用创建一个 vm 模板供以后使用：\n\n$ sudo kata-runtime factory init\n\n\n1\n\n\n\n# 虚拟机模板\n\n\n# 特权容器\n\n具有通常不授予的附加功能和访问权限 如果配置不正确，它可能会降低 kata containers 的安全性。\n\n默认情况下，当为容器启用特权时，/dev/*主机中的所有块设备都会挂载到guest中。这将允许 kata guest内部的特权容器获得从主机挂载任何块设备的访问权限，这是降低 kata 安全性的潜在不良副作用。\n\n通过privileged_without_host_devices， 允许在 containerd 配置中为每个运行时配置特权主机设备行为，将此设置为true将禁用主机设备热插入来宾，即使启用了特权也是如此。\n\n\n# serverless",charsets:{cjk:!0}},{title:"kata-deploy部署、卸载与升级",frontmatter:{title:"kata-deploy部署、卸载与升级",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/84f980/",categories:["技术杂谈","kata-containers","kata部署"],tags:[null],titleTag:"原创",readingShow:"top",description:"[TOC]",meta:[{name:"twitter:title",content:"kata-deploy部署、卸载与升级"},{name:"twitter:description",content:"[TOC]"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/02.kata%E9%83%A8%E7%BD%B2/01.kata-deploy%E9%83%A8%E7%BD%B2%E3%80%81%E5%8D%B8%E8%BD%BD%E4%B8%8E%E5%8D%87%E7%BA%A7.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata-deploy部署、卸载与升级"},{property:"og:description",content:"[TOC]"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/02.kata%E9%83%A8%E7%BD%B2/01.kata-deploy%E9%83%A8%E7%BD%B2%E3%80%81%E5%8D%B8%E8%BD%BD%E4%B8%8E%E5%8D%87%E7%BA%A7.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata-deploy部署、卸载与升级"},{itemprop:"description",content:"[TOC]"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/02.kata%E9%83%A8%E7%BD%B2/01.kata-deploy%E9%83%A8%E7%BD%B2%E3%80%81%E5%8D%B8%E8%BD%BD%E4%B8%8E%E5%8D%87%E7%BA%A7.html",relativePath:"01.技术杂谈/06.kata-containers/02.kata部署/01.kata-deploy部署、卸载与升级.md",key:"v-b4021342",path:"/pages/84f980/",headers:[{level:2,title:"部署kata-monitor",slug:"部署kata-monitor",normalizedTitle:"部署kata-monitor",charIndex:924},{level:3,title:"kata节点运行kata-monitor守护进程",slug:"kata节点运行kata-monitor守护进程",normalizedTitle:"kata节点运行kata-monitor守护进程",charIndex:966},{level:3,title:"promethues增加scrape_configs",slug:"promethues增加scrape-configs",normalizedTitle:"promethues增加scrape_configs",charIndex:1288},{level:3,title:"导入 Grafana dashborad",slug:"导入-grafana-dashborad",normalizedTitle:"导入 grafana dashborad",charIndex:1403},{level:2,title:"检查：",slug:"检查",normalizedTitle:"检查：",charIndex:1701}],headersStr:"部署kata-monitor kata节点运行kata-monitor守护进程 promethues增加scrape_configs 导入 Grafana dashborad 检查：",content:'[TOC]\n\n\n# 前提\n\n * 物理机已开启硬件虚拟化\n * k8s容器运行时使用containerd（推荐）\n\n\n# 部署\n\n * 给kata节点打上label: kata-worker=true（如果不需要区分kata节点，可以把kata-deploy中的节点亲和性去掉）\n * 生成configuration.toml分发到各个kata节点（所有节点）/etc/kata-containers/configuration.toml\n * 创建kata资源：kata-rbac.yaml、kata-deploy.yaml，创建runtimeClass： runtimeClass.yaml\n\n$ kubectl apply -f kata-rbac.yaml\n$ kubectl apply -f kata-deploy.yaml\n\n$ kubectl -n kube-system wait --timeout=10m --for=condition=Ready -l name=kata-deploy pod\n\n$ kubectl apply -f kata-runtimeClasses.yaml\n\n\n1\n2\n3\n4\n5\n6\n\n * 各个kata节点（所有节点）创建软链接：\n\nln -s /opt/kata/bin/kata-runtime /usr/bin/kata-runtime\nln -s /opt/kata/bin/kata-monitor /usr/bin/kata-monitor\n\n\n1\n2\n\n\n注：\n\n * 需要注意的是kata-deploy重启可能会导致默认的configuration.toml文件恢复默认配置，因此使用的是优先级更高的/etc/kata-containers/configuration.toml\n * 使用ctr run创建的容器默认使用的是-qemu配置（/opt/kata/share/defaults/kata-containers/configuration-qemu.toml），如果需要使用ctr run测试，请同步配置到-qemu配置，或重定向shim链接到新的文件下\n\n\n# 部署kata-monitor\n\n详情见[[kata-monitor监控]]\n\n\n# kata节点运行kata-monitor守护进程\n\n[root@localhost ~]# cat /etc/systemd/system/kata-monitor.service\n[Unit]\nDescription=kata monitor\n\n[Service]\nExecStart=/opt/kata/bin/kata-monitor -listen-address 0.0.0.0:8090\nRestart=always\nStartLimitInterval=0\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# promethues增加scrape_configs\n\n- job_name: \'kata\'\n    static_configs:\n    - targets: [\'<kata节点IP>:8090\']\n\n\n1\n2\n3\n\n\n\n# 导入 Grafana dashborad\n\n$ curl -XPOST -i <grafana节点IP>:3000/api/dashboards/import \\\n    -u admin:admin \\\n    -H "Content-Type: application/json" \\\n\t-d "{\\"dashboard\\":$(curl -sL https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/how-to/data/dashboard.json )}"\n\n\n1\n2\n3\n4\n\n\n\n# 检查：\n\n[root@rqy-k8s-1 ~]# kata-runtime check\n  WARN[0000] Not running network checks as super user      arch=amd64 name=kata-runtime pid=48176 source=runtime\n  System is capable of running Kata Containers\n  System can currently create Kata Containers\n\n\n1\n2\n3\n4\n\n\n\n# 卸载\n\n * 删除所有kata容器\n * 删除kata节点软连接\n * 删除kata资源：kata-rbac.yaml、kata-deploy.yaml、runtimeClass.yaml\n * 删除kata节点configuration.toml文件\n\n$ kubectl delete -f kata-deploy.yaml\n\n$ kubectl -n kube-system wait --timeout=10m --for=delete -l name=kata-deploy pod\n\n$ kubectl apply -f kata-cleanup.yaml\n# The cleanup daemon-set will run a single time, cleaning up the node-label, which makes it difficult to check in an automated fashion. This process should take, at most, 5 minutes.\n# kubectl get pod -n kube-system | grep kubelet-kata-cleanup\n\n$ kubectl delete -f kata-cleanup.yaml\n$ kubectl delete -f kata-rbac.yaml\n$ kubectl delete -f kata-runtimeClasses.yaml\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 升级(TODO)',normalizedContent:'[toc]\n\n\n# 前提\n\n * 物理机已开启硬件虚拟化\n * k8s容器运行时使用containerd（推荐）\n\n\n# 部署\n\n * 给kata节点打上label: kata-worker=true（如果不需要区分kata节点，可以把kata-deploy中的节点亲和性去掉）\n * 生成configuration.toml分发到各个kata节点（所有节点）/etc/kata-containers/configuration.toml\n * 创建kata资源：kata-rbac.yaml、kata-deploy.yaml，创建runtimeclass： runtimeclass.yaml\n\n$ kubectl apply -f kata-rbac.yaml\n$ kubectl apply -f kata-deploy.yaml\n\n$ kubectl -n kube-system wait --timeout=10m --for=condition=ready -l name=kata-deploy pod\n\n$ kubectl apply -f kata-runtimeclasses.yaml\n\n\n1\n2\n3\n4\n5\n6\n\n * 各个kata节点（所有节点）创建软链接：\n\nln -s /opt/kata/bin/kata-runtime /usr/bin/kata-runtime\nln -s /opt/kata/bin/kata-monitor /usr/bin/kata-monitor\n\n\n1\n2\n\n\n注：\n\n * 需要注意的是kata-deploy重启可能会导致默认的configuration.toml文件恢复默认配置，因此使用的是优先级更高的/etc/kata-containers/configuration.toml\n * 使用ctr run创建的容器默认使用的是-qemu配置（/opt/kata/share/defaults/kata-containers/configuration-qemu.toml），如果需要使用ctr run测试，请同步配置到-qemu配置，或重定向shim链接到新的文件下\n\n\n# 部署kata-monitor\n\n详情见[[kata-monitor监控]]\n\n\n# kata节点运行kata-monitor守护进程\n\n[root@localhost ~]# cat /etc/systemd/system/kata-monitor.service\n[unit]\ndescription=kata monitor\n\n[service]\nexecstart=/opt/kata/bin/kata-monitor -listen-address 0.0.0.0:8090\nrestart=always\nstartlimitinterval=0\nrestartsec=10\n\n[install]\nwantedby=multi-user.target\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# promethues增加scrape_configs\n\n- job_name: \'kata\'\n    static_configs:\n    - targets: [\'<kata节点ip>:8090\']\n\n\n1\n2\n3\n\n\n\n# 导入 grafana dashborad\n\n$ curl -xpost -i <grafana节点ip>:3000/api/dashboards/import \\\n    -u admin:admin \\\n    -h "content-type: application/json" \\\n\t-d "{\\"dashboard\\":$(curl -sl https://raw.githubusercontent.com/kata-containers/kata-containers/main/docs/how-to/data/dashboard.json )}"\n\n\n1\n2\n3\n4\n\n\n\n# 检查：\n\n[root@rqy-k8s-1 ~]# kata-runtime check\n  warn[0000] not running network checks as super user      arch=amd64 name=kata-runtime pid=48176 source=runtime\n  system is capable of running kata containers\n  system can currently create kata containers\n\n\n1\n2\n3\n4\n\n\n\n# 卸载\n\n * 删除所有kata容器\n * 删除kata节点软连接\n * 删除kata资源：kata-rbac.yaml、kata-deploy.yaml、runtimeclass.yaml\n * 删除kata节点configuration.toml文件\n\n$ kubectl delete -f kata-deploy.yaml\n\n$ kubectl -n kube-system wait --timeout=10m --for=delete -l name=kata-deploy pod\n\n$ kubectl apply -f kata-cleanup.yaml\n# the cleanup daemon-set will run a single time, cleaning up the node-label, which makes it difficult to check in an automated fashion. this process should take, at most, 5 minutes.\n# kubectl get pod -n kube-system | grep kubelet-kata-cleanup\n\n$ kubectl delete -f kata-cleanup.yaml\n$ kubectl delete -f kata-rbac.yaml\n$ kubectl delete -f kata-runtimeclasses.yaml\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 升级(todo)',charsets:{cjk:!0}},{title:"一个kata容器的创建示例",frontmatter:{title:"一个kata容器的创建示例",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/cda215/",categories:["技术杂谈","kata-containers","kata初识"],tags:[null],titleTag:"原创",readingShow:"top",description:"k8s: 1.17.2\ncontainerd: 1.4.6\nkata: 2.4.0",meta:[{name:"twitter:title",content:"一个kata容器的创建示例"},{name:"twitter:description",content:"k8s: 1.17.2\ncontainerd: 1.4.6\nkata: 2.4.0"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/08.%E4%B8%80%E4%B8%AAkata%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E7%A4%BA%E4%BE%8B.html"},{property:"og:type",content:"article"},{property:"og:title",content:"一个kata容器的创建示例"},{property:"og:description",content:"k8s: 1.17.2\ncontainerd: 1.4.6\nkata: 2.4.0"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/08.%E4%B8%80%E4%B8%AAkata%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E7%A4%BA%E4%BE%8B.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"一个kata容器的创建示例"},{itemprop:"description",content:"k8s: 1.17.2\ncontainerd: 1.4.6\nkata: 2.4.0"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/01.kata%E5%88%9D%E8%AF%86/08.%E4%B8%80%E4%B8%AAkata%E5%AE%B9%E5%99%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E7%A4%BA%E4%BE%8B.html",relativePath:"01.技术杂谈/06.kata-containers/01.kata初识/08.一个kata容器的创建示例.md",key:"v-1b6d1231",path:"/pages/cda215/",headers:[{level:2,title:"crictl pods",slug:"crictl-pods",normalizedTitle:"crictl pods",charIndex:902},{level:2,title:"crictl ps",slug:"crictl-ps",normalizedTitle:"crictl ps",charIndex:1296},{level:2,title:"crictl stats",slug:"crictl-stats",normalizedTitle:"crictl stats",charIndex:1652},{level:2,title:"获取sandboxID",slug:"获取sandboxid",normalizedTitle:"获取sandboxid",charIndex:1899},{level:2,title:"宿主机进程",slug:"宿主机进程",normalizedTitle:"宿主机进程",charIndex:2074},{level:2,title:"ip netns",slug:"ip-netns",normalizedTitle:"ip netns",charIndex:5851},{level:2,title:"宿主机目录",slug:"宿主机目录",normalizedTitle:"宿主机目录",charIndex:8032},{level:2,title:"vm_pid",slug:"vm-pid",normalizedTitle:"vm_pid",charIndex:8218},{level:2,title:"df -h",slug:"df-h",normalizedTitle:"df -h",charIndex:9781},{level:2,title:"lsblk",slug:"lsblk",normalizedTitle:"lsblk",charIndex:10298},{level:2,title:"ip addr",slug:"ip-addr",normalizedTitle:"ip addr",charIndex:10493},{level:2,title:"mount",slug:"mount",normalizedTitle:"mount",charIndex:2853},{level:2,title:"lsblk",slug:"lsblk-2",normalizedTitle:"lsblk",charIndex:10298},{level:2,title:"看看挂载了什么分区",slug:"看看挂载了什么分区",normalizedTitle:"看看挂载了什么分区",charIndex:14012},{level:2,title:"ls都没有，只能echo * 代替。",slug:"ls都没有-只能echo-代替。",normalizedTitle:"ls都没有，只能echo * 代替。",charIndex:17558},{level:2,title:"uname -a",slug:"uname-a",normalizedTitle:"uname -a",charIndex:17705},{level:2,title:"看看激活了什么内核模块",slug:"看看激活了什么内核模块",normalizedTitle:"看看激活了什么内核模块",charIndex:17718},{level:2,title:"看看都有什么进程",slug:"看看都有什么进程",normalizedTitle:"看看都有什么进程",charIndex:17918},{level:2,title:"看看有多少内存",slug:"看看有多少内存",normalizedTitle:"看看有多少内存",charIndex:17952},{level:2,title:"看看内核启动参数",slug:"看看内核启动参数",normalizedTitle:"看看内核启动参数",charIndex:17983},{level:2,title:"看看systemctl的服务",slug:"看看systemctl的服务",normalizedTitle:"看看systemctl的服务",charIndex:18019},{level:2,title:"cpuinfo/meminfo  (2C)",slug:"cpuinfo-meminfo-2c",normalizedTitle:"cpuinfo/meminfo  (2c)",charIndex:null}],headersStr:"crictl pods crictl ps crictl stats 获取sandboxID 宿主机进程 ip netns 宿主机目录 vm_pid df -h lsblk ip addr mount lsblk 看看挂载了什么分区 ls都没有，只能echo * 代替。 uname -a 看看激活了什么内核模块 看看都有什么进程 看看有多少内存 看看内核启动参数 看看systemctl的服务 cpuinfo/meminfo  (2C)",content:'# 环境\n\n> k8s: 1.17.2 containerd: 1.4.6 kata: 2.4.0\n\n\n# 创建一个kata容器\n\n    resources:\n      limits:\n        cpu: "1"\n        memory: 1Gi\n      requests:\n        cpu: "1"\n        memory: 1Gi\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n[root@localhost ~]# kubectl get pod -o wide\nNAME                              READY   STATUS    RESTARTS   AGE   IP               NODE                    NOMINATED NODE   READINESS GATES\ntest-runc                         1/1     Running   0          19h   10.241.102.169   localhost.localdomain   <none>           <none>\n[root@localhost ~]# kubectl top pod\nNAME                              CPU(cores)   MEMORY(bytes)\ntest-kata                         0m           2Mi\n[root@localhost ~]# kubectl describe node | grep kata\n  default                     test-kata                                                1250m (16%)   1250m (16%)  1184Mi (18%)     1184Mi (18%)   64m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# crictl pods\n\n[root@localhost ~]# crictl pods\nPOD ID              CREATED             STATE               NAME                                                    NAMESPACE              ATTEMPT             RUNTIME\n3871d0c8108c6       About an hour ago   Ready               test-kata                                               default                0                   kata-qemu\n\n\n1\n2\n3\n\n\n\n# crictl ps\n\n[root@localhost ~]# crictl ps\nCONTAINER           IMAGE               CREATED             STATE               NAME                                   ATTEMPT             POD ID\na83ce7bc82f78       e39e5c33c2d50       About an hour ago   Running             pod1                                   0                   3871d0c8108c6\n\n\n\n1\n2\n3\n4\n\n\n\n# crictl stats\n\n[root@localhost ~]# crictl stats a83ce7bc82f78\nCONTAINER           CPU %               MEM                 DISK                INODES\na83ce7bc82f78       0.00                3.056MB             16.38kB             14\n\n\n\n1\n2\n3\n4\n\n\n\n# 获取sandboxID\n\n[root@localhost ~]# crictl inspect a83ce7bc82f78 | grep sandboxID\n    "sandboxID": "3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985",\n\n\n1\n2\n\n\n\n# 宿主机进程\n\n[root@localhost ~]# ps -ef | grep 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\nroot      2251   429  0 11:32 pts/2    00:00:00 grep --color=auto 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\nroot     23520     1  0 10:24 ?        00:00:01 /opt/kata/bin/containerd-shim-kata-v2 -namespace k8s.io -address /run/containerd/containerd.sock -publish-binary /usr/bin/containerd -id 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\nroot     23528 23520  0 10:24 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\nroot     23535     1  0 10:24 ?        00:00:09 /opt/kata/bin/qemu-system-x86_64 -name sandbox-3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985 -uuid 2cfc6a6d-63ab-41aa-ac4b-18cb10377791 -machine q35,accel=kvm,kernel_irqchip=on,nvdimm=on -cpu host,pmu=off -qmp unix:/run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/qmp.sock,server=on,wait=off -m 2048M,slots=10,maxmem=8773M -device pci-bridge,bus=pcie.0,id=pci-bridge-0,chassis_nr=1,shpc=off,addr=2,io-reserve=4k,mem-reserve=1m,pref64-reserve=1m -device virtio-serial-pci,disable-modern=false,id=serial0 -device virtconsole,chardev=charconsole0,id=console0 -chardev socket,id=charconsole0,path=/run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/console.sock,server=on,wait=off -device nvdimm,id=nv0,memdev=mem0,unarmed=on -object memory-backend-file,id=mem0,mem-path=/opt/kata/share/kata-containers/kata-clearlinux-latest.image,size=134217728,readonly=on -device virtio-scsi-pci,id=scsi0,disable-modern=false -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 -device vhost-vsock-pci,disable-modern=false,vhostfd=3,id=vsock-4001198526,guest-cid=4001198526 -chardev socket,id=char-93f9924bc919f096,path=/run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/vhost-fs.sock -device vhost-user-fs-pci,chardev=char-93f9924bc919f096,tag=kataShared -netdev tap,id=network-0,vhost=on,vhostfds=4,fds=5 -device driver=virtio-net-pci,netdev=network-0,mac=ea:e4:96:23:5e:9f,disable-modern=false,mq=on,vectors=4 -rtc base=utc,driftfix=slew,clock=host -global kvm-pit.lost_tick_policy=discard -vga none -no-user-config -nodefaults -nographic --no-reboot -daemonize -object memory-backend-file,id=dimm1,size=2048M,mem-path=/dev/shm,share=on -numa node,memdev=dimm1 -kernel /opt/kata/share/kata-containers/vmlinux-5.15.26-90 -append tsc=reliable no_timer_check rcupdate.rcu_expedited=1 i8042.direct=1 i8042.dumbkbd=1 i8042.nopnp=1 i8042.noaux=1 noreplace-smp reboot=k console=hvc0 console=hvc1 cryptomgr.notests net.ifnames=0 pci=lastbus=0 root=/dev/pmem0p1 rootflags=dax,data=ordered,errors=remount-ro ro rootfstype=ext4 quiet systemd.show_status=false panic=1 nr_cpus=8 systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none agent.debug_console agent.debug_console_vport=1026 -pidfile /run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/pid -smp 1,cores=1,threads=1,sockets=8,maxcpus=8\nroot     23543 23528  0 10:24 ?        00:00:01 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\nroot     27463 17898  0 10:26 pts/0    00:00:00 kata-runtime exec 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# ip netns\n\n[root@localhost ~]# ip netns exec cni-75b072ca-fd5a-ceda-617d-9ce0b606ac5e  ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: tunl0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000\n    link/ipip 0.0.0.0 brd 0.0.0.0\n4: eth0@if17552: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc noqueue state UP group default qlen 1000\n    link/ether ea:e4:96:23:5e:9f brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.241.103.177/32 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::e8e4:96ff:fe23:5e9f/64 scope link\n       valid_lft forever preferred_lft forever\n5: tap0_kata: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc mq state UNKNOWN group default qlen 1000\n    link/ether a2:a5:96:5b:90:23 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::a0a5:96ff:fe5b:9023/64 scope link\n       valid_lft forever preferred_lft forever\n[root@localhost ~]# ip netns exec cni-75b072ca-fd5a-ceda-617d-9ce0b606ac5e  tc -s qdisc\nqdisc noqueue 0: dev lo root refcnt 2\n Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc noqueue 0: dev eth0 root refcnt 2\n Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev eth0 parent ffff:fff1 ----------------\n Sent 468 bytes 7 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc mq 0: dev tap0_kata root\n Sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc pfifo_fast 0: dev tap0_kata parent :1 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1\n Sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev tap0_kata parent ffff:fff1 ----------------\n Sent 992 bytes 16 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 宿主机目录\n\n> /run/kata-containers/shared/sandboxes/ /run/vc/vm/ /run/vc/sbs/ /sys/fs/cgroup/(memory、devices、cpu,cpuacct...) /sys/fs/cgroup/systemd/kata_overhead/ /app/docker/containerd/\n\n\n# vm_pid\n\n[root@localhost ~]# cat /proc/23535/status\nName:   qemu-system-x86\nUmask:  0027\nState:  S (sleeping)\nTgid:   23535\nNgid:   0\nPid:    23535\nPPid:   1\nTracerPid:      0\nUid:    0       0       0       0\nGid:    0       0       0       0\nFDSize: 128\nGroups:\nVmPeak:  3659100 kB\nVmSize:  3659100 kB\nVmLck:         0 kB\nVmPin:         0 kB\nVmHWM:    152104 kB\nVmRSS:    152104 kB\nRssAnon:           14288 kB\nRssFile:           35956 kB\nRssShmem:         101860 kB\nVmData:   326316 kB\nVmStk:       132 kB\nVmExe:      8496 kB\nVmLib:         0 kB\nVmPTE:       652 kB\nVmSwap:        0 kB\nThreads:        5\nSigQ:   0/30632\nSigPnd: 0000000000000000\nShdPnd: 0000000000000000\nSigBlk: 0000000010002240\nSigIgn: 0000000000381000\nSigCgt: 0000000180004243\nCapInh: 0000000000000000\nCapPrm: 0000001fffffffff\nCapEff: 0000001fffffffff\nCapBnd: 0000001fffffffff\nCapAmb: 0000000000000000\nNoNewPrivs:     0\nSeccomp:        0\nSpeculation_Store_Bypass:       thread vulnerable\nCpus_allowed:   ff\nCpus_allowed_list:      0-7\nMems_allowed:   00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001\nMems_allowed_list:      0\nvoluntary_ctxt_switches:        1769\nnonvoluntary_ctxt_switches:     4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# 进入kata容器\n\n\n# df -h\n\n\nroot@hostpath-kata-7949f86f8c-8gfqj:/# df -h\n\nFilesystem      Size  Used Avail Use% Mounted on\n\nnone            494G   28G  466G   6% /\n\ntmpfs            64M     0   64M   0% /dev\n\ntmpfs           992M     0  992M   0% /sys/fs/cgroup\n\nnone            494G   28G  466G   6% /hff\n\nkataShared      494G   28G  466G   6% /etc/hosts\n\nshm             992M     0  992M   0% /dev/shm\n\ntmpfs           992M   12K  992M   1% /run/secrets/kubernetes.io/serviceaccount\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# lsblk\n\n\nroot@hostpath-kata-7949f86f8c-8gfqj:/# lsblk\n\nNAME      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\n\npmem0     259:0    0  126M  1 disk\n\n`-pmem0p1 259:1    0  124M  1 part\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ip addr\n\n/ # ip addr\nroot@test-kata:/# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1440 qdisc fq state UP group default qlen 1000\n    link/ether ea:e4:96:23:5e:9f brd ff:ff:ff:ff:ff:ff\n    inet 10.241.103.177/32 brd 10.241.103.177 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::e8e4:96ff:fe23:5e9f/64 scope link\n       valid_lft forever preferred_lft forever\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# mount\n\nroot@test-kata:/# mount\nnone on / type virtiofs (rw,relatime)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev type tmpfs (rw,nosuid,size=65536k,nr_inodes=255223,mode=755)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)\ntmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,size=1020892k,nr_inodes=255223)\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)\ncgroup on /sys/fs/cgroup/memory type cgroup (ro,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/devices type cgroup (ro,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/pids type cgroup (ro,nosuid,nodev,noexec,relatime,pids)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (ro,nosuid,nodev,noexec,relatime,net_cls,net_prio)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (ro,nosuid,nodev,noexec,relatime,perf_event)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpu,cpuacct)\ncgroup on /sys/fs/cgroup/blkio type cgroup (ro,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/freezer type cgroup (ro,nosuid,nodev,noexec,relatime,freezer)\nnone on /test type virtiofs (rw,relatime)\nkataShared on /etc/hosts type virtiofs (rw,relatime)\nkataShared on /dev/termination-log type virtiofs (rw,relatime)\nkataShared on /etc/hostname type virtiofs (rw,relatime)\nkataShared on /etc/resolv.conf type virtiofs (rw,relatime)\nshm on /dev/shm type tmpfs (rw,relatime,size=1020892k,nr_inodes=255223)\ntmpfs on /run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime,size=1020892k,nr_inodes=255223)\ntmpfs on /proc/timer_list type tmpfs (rw,nosuid,size=65536k,nr_inodes=255223,mode=755)\nproc on /proc/bus type proc (ro,relatime)\nproc on /proc/fs type proc (ro,relatime)\nproc on /proc/irq type proc (ro,relatime)\nproc on /proc/sys type proc (ro,relatime)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 进入kata vm\n\nhttps://github.com/kata-containers/kata-containers/issues/2010\n\n[root@rqy-k8s-1 kbuser]# kata-runtime exec 1b482bb4613ba606894d30370fe7637610a495d9b3a504bc36e9aa292db9a0f0\nbash: grep: command not found\nbash: grep: command not found\nbash: tty: command not found\nbash: expr: command not found\nbash: [: : integer expression expected\nbash-5.1#\nbash-5.1#\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# lsblk\n\nbash-5.1# lsblk\nNAME      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\npmem0     259:0    0  126M  1 disk\n`-pmem0p1 259:1    0  124M  1 part /\nbash-5.1#\n\n\n1\n2\n3\n4\n5\n\n\n\n# 看看挂载了什么分区\n\nbash-5.1# mount\n/dev/pmem0p1 on / type ext4 (ro,relatime,errors=remount-ro,data=ordered,dax=always)\ndevtmpfs on /dev type devtmpfs (rw,relatime,size=1019140k,nr_inodes=254785,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,size=1020892k,nr_inodes=255223)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=408360k,nr_inodes=819200,mode=755)\ntmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,size=4096k,nr_inodes=1024,mode=755)\ncgroup2 on /sys/fs/cgroup/unified type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate)\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,noexec,relatime,pagesize=2M)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\ncgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)\ncgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)\ncgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)\ntmpfs on /etc/machine-id type tmpfs (ro,size=408360k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=29,pgrp=1,timeout=0,minproto=5,maxproto=5,direct)\ntmpfs on /tmp type tmpfs (rw,nosuid,nodev,size=1020896k,nr_inodes=1048576)\nnsfs on /run/sandbox-ns/ipc type nsfs (rw)\nnsfs on /run/sandbox-ns/uts type nsfs (rw)\nkataShared on /run/kata-containers/shared/containers type virtiofs (rw,relatime)\nshm on /run/kata-containers/sandbox/shm type tmpfs (rw,relatime,size=1020892k,nr_inodes=255223)\ntmpfs on /etc/resolv.conf type tmpfs (rw,nosuid,nodev,size=408360k,nr_inodes=819200,mode=755)\nnone on /run/kata-containers/shared/containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs type virtiofs (rw,relatime)\nnone on /run/kata-containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs type virtiofs (rw,relatime)\ntmpfs on /run/kata-containers/shared/containers/watchable type tmpfs (rw,relatime,size=1020892k,nr_inodes=255223)\nnone on /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-172195b99cf7a9fd-serviceaccount type virtiofs (rw,relatime)\nnone on /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs type virtiofs (rw,relatime)\nnone on /run/kata-containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs type virtiofs (rw,relatime)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# ls都没有，只能echo * 代替。\n\nbash-5.1# echo *\nautofs bin boot dev etc home lib lib64 lost+found media mnt proc root run sbin srv sys tmp usr var\n\n\n1\n2\n\n\n\n# uname -a\n\n\n# 看看激活了什么内核模块\n\nbash-5.1# lsmod\nlibkmod: kmod_module_new_from_loaded: could not open /proc/modules: No such file or directory\nError: could not get list of modules: No such file or directory\n\n\n1\n2\n3\n\n\n\n# 看看都有什么进程\n\nbash-5.1# ps efx ww\n\n\n# 看看有多少内存\n\nbash-5.1# free -h\n\n\n# 看看内核启动参数\n\nbash-5.1# cat cmdline\n\n\n# 看看systemctl的服务\n\nbash-5.1# systemctl list-units\n  UNIT                                                                                                                                                  LOAD   ACTIVE     SUB       DESCRIPTION          \n  proc-sys-fs-binfmt_misc.automount                                                                                                                     loaded active     waiting   Arbitrary Executable File Formats File System Automount Point\n  dev-pmem0p1.device                                                                                                                                    loaded activating tentative /dev/pmem0p1         \n  -.mount                                                                                                                                               loaded active     mounted   Root Mount\n  etc-machine\\x2did.mount                                                                                                                               loaded active     mounted   /etc/machine-id\n  etc-resolv.conf.mount                                                                                                                                 loaded active     mounted   /etc/resolv.conf\n  run-kata\\x2dcontainers-3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985-rootfs.mount                                                  loaded active     mounted   /run/kata-containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs\n  run-kata\\x2dcontainers-a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-rootfs.mount                                                  loaded active     mounted   /run/kata-containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs\n  run-kata\\x2dcontainers-sandbox-shm.mount                                                                                                              loaded active     mounted   /run/kata-containers/sandbox/shm\n  run-kata\\x2dcontainers-shared-containers-3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985-rootfs.mount                                loaded active     mounted   /run/kata-containers/shared/containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs\n  run-kata\\x2dcontainers-shared-containers-a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-rootfs.mount                                loaded active     mounted   /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs\n  run-kata\\x2dcontainers-shared-containers-a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a\\x2d172195b99cf7a9fd\\x2dserviceaccount.mount loaded active     mounted   /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-172195b99cf7a9fd-serviceaccount\n  run-kata\\x2dcontainers-shared-containers-watchable.mount                                                                                              loaded active     mounted   /run/kata-containers/shared/containers/watchable\n  run-kata\\x2dcontainers-shared-containers.mount                                                                                                        loaded active     mounted   /run/kata-containers/shared/containers\n  run-sandbox\\x2dns-ipc.mount                                                                                                                           loaded active     mounted   /run/sandbox-ns/ipc\n  run-sandbox\\x2dns-uts.mount                                                                                                                           loaded active     mounted   /run/sandbox-ns/uts\n  tmp.mount                                                                                                                                             loaded active     mounted   Temporary Directory /tmp\n  systemd-ask-password-console.path                                                                                                                     loaded active     waiting   Dispatch Password Requests to Console Directory Watch\n  init.scope                                                                                                                                            loaded active     running   System and Service Manager\n● chronyd.service                                                                                                                                       loaded failed     failed    NTP client/server\n  kata-agent.service                                                                                                                                    loaded active     running   Kata Containers Agent\n  systemd-remount-fs.service                                                                                                                            loaded active     exited    Remount Root and Kernel File Systems\n  systemd-sysctl.service                                                                                                                                loaded active     exited    Apply Kernel Variables\n  -.slice                                                                                                                                               loaded active     active    Root Slice\n  system.slice                                                                                                                                          loaded active     active    System Slice         \n  systemd-coredump.socket                                                                                                                               loaded active     listening Process Core Dump Socket\n  basic.target                                                                                                                                          loaded active     active    Basic System\n  cryptsetup.target                                                                                                                                     loaded active     active    Local Encrypted Volumes\n  kata-containers.target                                                                                                                                loaded active     active    Kata Containers Agent Target\n  local-fs-pre.target                                                                                                                                   loaded active     active    Preparation for Local File Systems\n  local-fs.target                                                                                                                                       loaded active     active    Local File Systems\n  paths.target                                                                                                                                          loaded active     active    Path Units\n  slices.target                                                                                                                                         loaded active     active    Slice Units\n  sockets.target                                                                                                                                        loaded active     active    Socket Units\n  swap.target                                                                                                                                           loaded active     active    Swaps\n  sysinit.target                                                                                                                                        loaded active     active    System Initialization\n  timers.target                                                                                                                                         loaded active     active    Timer Units          \n  systemd-tmpfiles-clean.timer                                                                                                                          loaded active     waiting   Daily Cleanup of Temporary Directories\n\nLOAD   = Reflects whether the unit definition was properly loaded.\nACTIVE = The high-level unit activation state, i.e. generalization of SUB.\nSUB    = The low-level unit activation state, values depend on unit type.\n37 loaded units listed. Pass --all to see loaded but inactive units, too.\nTo show all installed unit files use \'systemctl list-unit-files\'.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\nbash-5.1#   systemctl cat kata-containers.target\n# /usr/lib/systemd/system/kata-containers.target\n#\n# Copyright (c) 2018-2019 Intel Corporation\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n[Unit]\nDescription=Kata Containers Agent Target\nRequires=basic.target\nRequires=tmp.mount\nWants=chronyd.service\nRequires=kata-agent.service\nConflicts=rescue.service rescue.target\nAfter=basic.target rescue.service rescue.target\nAllowIsolate=yes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# cpuinfo/meminfo (2C)\n\nbash-5.1# more /proc/cpuinfo\nprocessor       : 0\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 158\nmodel name      : Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz\nstepping        : 9\nmicrocode       : 0xea\ncpu MHz         : 3599.982\ncache size      : 16384 KB\nphysical id     : 0\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_ arat md_clearinvpcid rtm mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1--More--e_timer aes xsave avx f16c rdra--More--\niority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest pmld ept_1gb flexpr--More--\nswapgs taa itlb_multihit srbds spectre_v1 spectre_v2 spec_store_bypass l1tf mds --More--\nbogomips        : 7199.96\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 39 bits physical, 48 bits virtual\npower management:\n\nprocessor       : 1\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 158\nmodel name      : Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz\nstepping        : 9\nmicrocode       : 0xea\ncpu MHz         : 3599.982\ncache size      : 16384 KB\nphysical id     : 7\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 7\ninitial apicid  : 7\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nlushopt xsaveopt xsavec xgetbv1 arat md_clearinvpcid rtm mpx rdseed adx smap clf--More--\nswapgs taa itlb_multihit srbds spectre_v1 spectre_v2 spec_store_bypass l1tf mds --More--\nbogomips        : 7199.96\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 39 bits physical, 48 bits virtual\npower management:\n\n[root@localhost ~]# more /proc/meminfo   (??)\nMemTotal:        7935356 kB\nMemFree:          478024 kB\nMemAvailable:    1827752 kB\nBuffers:            1064 kB\nCached:          1903388 kB\nSwapCached:            0 kB\nActive:          5728076 kB\nInactive:         891144 kB\nActive(anon):    5029108 kB\nInactive(anon):   207680 kB\nActive(file):     698968 kB\nInactive(file):   683464 kB\nUnevictable:           4 kB\nMlocked:               4 kB\nSwapTotal:             0 kB\nSwapFree:              0 kB\nDirty:              9584 kB\nWriteback:             0 kB\nAnonPages:       4715640 kB\nMapped:           564200 kB\nShmem:            522020 kB\nSlab:             469116 kB\nSReclaimable:     280468 kB\nSUnreclaim:       188648 kB\nKernelStack:       43248 kB\nPageTables:        39740 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:     3967676 kB\nCommitted_AS:   23822760 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      461976 kB\nVmallocChunk:   34358937596 kB\nPercpu:            11552 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:     20480 kB\nCmaTotal:              0 kB\nCmaFree:               0 kB\nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:      211152 kB\nDirectMap2M:     8038400 kB\nDirectMap1G:           0 kB\n[root@localhost ~]#\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n\n\n\n# 总结\n\nlimit 1C1G default:1C2G\n\nvm: cpuinfo： 2CPU meminfo: MemTotal: 7935356 kB (7.5G)\n\npod: cpuinfo：2CPU meminfo: MemTotal: 3090364 kB (2.9G) free -h: 2.9G',normalizedContent:'# 环境\n\n> k8s: 1.17.2 containerd: 1.4.6 kata: 2.4.0\n\n\n# 创建一个kata容器\n\n    resources:\n      limits:\n        cpu: "1"\n        memory: 1gi\n      requests:\n        cpu: "1"\n        memory: 1gi\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n[root@localhost ~]# kubectl get pod -o wide\nname                              ready   status    restarts   age   ip               node                    nominated node   readiness gates\ntest-runc                         1/1     running   0          19h   10.241.102.169   localhost.localdomain   <none>           <none>\n[root@localhost ~]# kubectl top pod\nname                              cpu(cores)   memory(bytes)\ntest-kata                         0m           2mi\n[root@localhost ~]# kubectl describe node | grep kata\n  default                     test-kata                                                1250m (16%)   1250m (16%)  1184mi (18%)     1184mi (18%)   64m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# crictl pods\n\n[root@localhost ~]# crictl pods\npod id              created             state               name                                                    namespace              attempt             runtime\n3871d0c8108c6       about an hour ago   ready               test-kata                                               default                0                   kata-qemu\n\n\n1\n2\n3\n\n\n\n# crictl ps\n\n[root@localhost ~]# crictl ps\ncontainer           image               created             state               name                                   attempt             pod id\na83ce7bc82f78       e39e5c33c2d50       about an hour ago   running             pod1                                   0                   3871d0c8108c6\n\n\n\n1\n2\n3\n4\n\n\n\n# crictl stats\n\n[root@localhost ~]# crictl stats a83ce7bc82f78\ncontainer           cpu %               mem                 disk                inodes\na83ce7bc82f78       0.00                3.056mb             16.38kb             14\n\n\n\n1\n2\n3\n4\n\n\n\n# 获取sandboxid\n\n[root@localhost ~]# crictl inspect a83ce7bc82f78 | grep sandboxid\n    "sandboxid": "3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985",\n\n\n1\n2\n\n\n\n# 宿主机进程\n\n[root@localhost ~]# ps -ef | grep 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\nroot      2251   429  0 11:32 pts/2    00:00:00 grep --color=auto 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\nroot     23520     1  0 10:24 ?        00:00:01 /opt/kata/bin/containerd-shim-kata-v2 -namespace k8s.io -address /run/containerd/containerd.sock -publish-binary /usr/bin/containerd -id 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\nroot     23528 23520  0 10:24 ?        00:00:00 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\nroot     23535     1  0 10:24 ?        00:00:09 /opt/kata/bin/qemu-system-x86_64 -name sandbox-3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985 -uuid 2cfc6a6d-63ab-41aa-ac4b-18cb10377791 -machine q35,accel=kvm,kernel_irqchip=on,nvdimm=on -cpu host,pmu=off -qmp unix:/run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/qmp.sock,server=on,wait=off -m 2048m,slots=10,maxmem=8773m -device pci-bridge,bus=pcie.0,id=pci-bridge-0,chassis_nr=1,shpc=off,addr=2,io-reserve=4k,mem-reserve=1m,pref64-reserve=1m -device virtio-serial-pci,disable-modern=false,id=serial0 -device virtconsole,chardev=charconsole0,id=console0 -chardev socket,id=charconsole0,path=/run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/console.sock,server=on,wait=off -device nvdimm,id=nv0,memdev=mem0,unarmed=on -object memory-backend-file,id=mem0,mem-path=/opt/kata/share/kata-containers/kata-clearlinux-latest.image,size=134217728,readonly=on -device virtio-scsi-pci,id=scsi0,disable-modern=false -object rng-random,id=rng0,filename=/dev/urandom -device virtio-rng-pci,rng=rng0 -device vhost-vsock-pci,disable-modern=false,vhostfd=3,id=vsock-4001198526,guest-cid=4001198526 -chardev socket,id=char-93f9924bc919f096,path=/run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/vhost-fs.sock -device vhost-user-fs-pci,chardev=char-93f9924bc919f096,tag=katashared -netdev tap,id=network-0,vhost=on,vhostfds=4,fds=5 -device driver=virtio-net-pci,netdev=network-0,mac=ea:e4:96:23:5e:9f,disable-modern=false,mq=on,vectors=4 -rtc base=utc,driftfix=slew,clock=host -global kvm-pit.lost_tick_policy=discard -vga none -no-user-config -nodefaults -nographic --no-reboot -daemonize -object memory-backend-file,id=dimm1,size=2048m,mem-path=/dev/shm,share=on -numa node,memdev=dimm1 -kernel /opt/kata/share/kata-containers/vmlinux-5.15.26-90 -append tsc=reliable no_timer_check rcupdate.rcu_expedited=1 i8042.direct=1 i8042.dumbkbd=1 i8042.nopnp=1 i8042.noaux=1 noreplace-smp reboot=k console=hvc0 console=hvc1 cryptomgr.notests net.ifnames=0 pci=lastbus=0 root=/dev/pmem0p1 rootflags=dax,data=ordered,errors=remount-ro ro rootfstype=ext4 quiet systemd.show_status=false panic=1 nr_cpus=8 systemd.unit=kata-containers.target systemd.mask=systemd-networkd.service systemd.mask=systemd-networkd.socket scsi_mod.scan=none agent.debug_console agent.debug_console_vport=1026 -pidfile /run/vc/vm/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/pid -smp 1,cores=1,threads=1,sockets=8,maxcpus=8\nroot     23543 23528  0 10:24 ?        00:00:01 /opt/kata/libexec/kata-qemu/virtiofsd --syslog -o cache=auto -o no_posix_lock -o source=/run/kata-containers/shared/sandboxes/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/shared --fd=3 -f --thread-pool-size=1 -o announce_submounts\nroot     27463 17898  0 10:26 pts/0    00:00:00 kata-runtime exec 3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# ip netns\n\n[root@localhost ~]# ip netns exec cni-75b072ca-fd5a-ceda-617d-9ce0b606ac5e  ip a\n1: lo: <loopback,up,lower_up> mtu 65536 qdisc noqueue state unknown group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: tunl0@none: <noarp> mtu 1480 qdisc noop state down group default qlen 1000\n    link/ipip 0.0.0.0 brd 0.0.0.0\n4: eth0@if17552: <broadcast,multicast,up,lower_up> mtu 1440 qdisc noqueue state up group default qlen 1000\n    link/ether ea:e4:96:23:5e:9f brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.241.103.177/32 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::e8e4:96ff:fe23:5e9f/64 scope link\n       valid_lft forever preferred_lft forever\n5: tap0_kata: <broadcast,multicast,up,lower_up> mtu 1440 qdisc mq state unknown group default qlen 1000\n    link/ether a2:a5:96:5b:90:23 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::a0a5:96ff:fe5b:9023/64 scope link\n       valid_lft forever preferred_lft forever\n[root@localhost ~]# ip netns exec cni-75b072ca-fd5a-ceda-617d-9ce0b606ac5e  tc -s qdisc\nqdisc noqueue 0: dev lo root refcnt 2\n sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc noqueue 0: dev eth0 root refcnt 2\n sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev eth0 parent ffff:fff1 ----------------\n sent 468 bytes 7 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc mq 0: dev tap0_kata root\n sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc pfifo_fast 0: dev tap0_kata parent :1 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1\n sent 1222 bytes 15 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc ingress ffff: dev tap0_kata parent ffff:fff1 ----------------\n sent 992 bytes 16 pkt (dropped 0, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 宿主机目录\n\n> /run/kata-containers/shared/sandboxes/ /run/vc/vm/ /run/vc/sbs/ /sys/fs/cgroup/(memory、devices、cpu,cpuacct...) /sys/fs/cgroup/systemd/kata_overhead/ /app/docker/containerd/\n\n\n# vm_pid\n\n[root@localhost ~]# cat /proc/23535/status\nname:   qemu-system-x86\numask:  0027\nstate:  s (sleeping)\ntgid:   23535\nngid:   0\npid:    23535\nppid:   1\ntracerpid:      0\nuid:    0       0       0       0\ngid:    0       0       0       0\nfdsize: 128\ngroups:\nvmpeak:  3659100 kb\nvmsize:  3659100 kb\nvmlck:         0 kb\nvmpin:         0 kb\nvmhwm:    152104 kb\nvmrss:    152104 kb\nrssanon:           14288 kb\nrssfile:           35956 kb\nrssshmem:         101860 kb\nvmdata:   326316 kb\nvmstk:       132 kb\nvmexe:      8496 kb\nvmlib:         0 kb\nvmpte:       652 kb\nvmswap:        0 kb\nthreads:        5\nsigq:   0/30632\nsigpnd: 0000000000000000\nshdpnd: 0000000000000000\nsigblk: 0000000010002240\nsigign: 0000000000381000\nsigcgt: 0000000180004243\ncapinh: 0000000000000000\ncapprm: 0000001fffffffff\ncapeff: 0000001fffffffff\ncapbnd: 0000001fffffffff\ncapamb: 0000000000000000\nnonewprivs:     0\nseccomp:        0\nspeculation_store_bypass:       thread vulnerable\ncpus_allowed:   ff\ncpus_allowed_list:      0-7\nmems_allowed:   00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001\nmems_allowed_list:      0\nvoluntary_ctxt_switches:        1769\nnonvoluntary_ctxt_switches:     4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# 进入kata容器\n\n\n# df -h\n\n\nroot@hostpath-kata-7949f86f8c-8gfqj:/# df -h\n\nfilesystem      size  used avail use% mounted on\n\nnone            494g   28g  466g   6% /\n\ntmpfs            64m     0   64m   0% /dev\n\ntmpfs           992m     0  992m   0% /sys/fs/cgroup\n\nnone            494g   28g  466g   6% /hff\n\nkatashared      494g   28g  466g   6% /etc/hosts\n\nshm             992m     0  992m   0% /dev/shm\n\ntmpfs           992m   12k  992m   1% /run/secrets/kubernetes.io/serviceaccount\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# lsblk\n\n\nroot@hostpath-kata-7949f86f8c-8gfqj:/# lsblk\n\nname      maj:min rm  size ro type mountpoint\n\npmem0     259:0    0  126m  1 disk\n\n`-pmem0p1 259:1    0  124m  1 part\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# ip addr\n\n/ # ip addr\nroot@test-kata:/# ip a\n1: lo: <loopback,up,lower_up> mtu 65536 qdisc noqueue state unknown group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <broadcast,multicast,up,lower_up> mtu 1440 qdisc fq state up group default qlen 1000\n    link/ether ea:e4:96:23:5e:9f brd ff:ff:ff:ff:ff:ff\n    inet 10.241.103.177/32 brd 10.241.103.177 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::e8e4:96ff:fe23:5e9f/64 scope link\n       valid_lft forever preferred_lft forever\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# mount\n\nroot@test-kata:/# mount\nnone on / type virtiofs (rw,relatime)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev type tmpfs (rw,nosuid,size=65536k,nr_inodes=255223,mode=755)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)\ntmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,size=1020892k,nr_inodes=255223)\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)\ncgroup on /sys/fs/cgroup/memory type cgroup (ro,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/devices type cgroup (ro,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/pids type cgroup (ro,nosuid,nodev,noexec,relatime,pids)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (ro,nosuid,nodev,noexec,relatime,net_cls,net_prio)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (ro,nosuid,nodev,noexec,relatime,perf_event)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpu,cpuacct)\ncgroup on /sys/fs/cgroup/blkio type cgroup (ro,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/freezer type cgroup (ro,nosuid,nodev,noexec,relatime,freezer)\nnone on /test type virtiofs (rw,relatime)\nkatashared on /etc/hosts type virtiofs (rw,relatime)\nkatashared on /dev/termination-log type virtiofs (rw,relatime)\nkatashared on /etc/hostname type virtiofs (rw,relatime)\nkatashared on /etc/resolv.conf type virtiofs (rw,relatime)\nshm on /dev/shm type tmpfs (rw,relatime,size=1020892k,nr_inodes=255223)\ntmpfs on /run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime,size=1020892k,nr_inodes=255223)\ntmpfs on /proc/timer_list type tmpfs (rw,nosuid,size=65536k,nr_inodes=255223,mode=755)\nproc on /proc/bus type proc (ro,relatime)\nproc on /proc/fs type proc (ro,relatime)\nproc on /proc/irq type proc (ro,relatime)\nproc on /proc/sys type proc (ro,relatime)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 进入kata vm\n\nhttps://github.com/kata-containers/kata-containers/issues/2010\n\n[root@rqy-k8s-1 kbuser]# kata-runtime exec 1b482bb4613ba606894d30370fe7637610a495d9b3a504bc36e9aa292db9a0f0\nbash: grep: command not found\nbash: grep: command not found\nbash: tty: command not found\nbash: expr: command not found\nbash: [: : integer expression expected\nbash-5.1#\nbash-5.1#\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# lsblk\n\nbash-5.1# lsblk\nname      maj:min rm  size ro type mountpoints\npmem0     259:0    0  126m  1 disk\n`-pmem0p1 259:1    0  124m  1 part /\nbash-5.1#\n\n\n1\n2\n3\n4\n5\n\n\n\n# 看看挂载了什么分区\n\nbash-5.1# mount\n/dev/pmem0p1 on / type ext4 (ro,relatime,errors=remount-ro,data=ordered,dax=always)\ndevtmpfs on /dev type devtmpfs (rw,relatime,size=1019140k,nr_inodes=254785,mode=755)\nproc on /proc type proc (rw,nosuid,nodev,noexec,relatime)\nsysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,size=1020892k,nr_inodes=255223)\ndevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,size=408360k,nr_inodes=819200,mode=755)\ntmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,size=4096k,nr_inodes=1024,mode=755)\ncgroup2 on /sys/fs/cgroup/unified type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate)\ncgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)\nbpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)\nhugetlbfs on /dev/hugepages type hugetlbfs (rw,nosuid,nodev,noexec,relatime,pagesize=2m)\nmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)\nfusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)\ncgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)\ncgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)\ncgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)\ncgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)\ncgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)\ncgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)\ncgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)\ncgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)\ncgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)\ntmpfs on /etc/machine-id type tmpfs (ro,size=408360k,nr_inodes=819200,mode=755)\nsystemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=29,pgrp=1,timeout=0,minproto=5,maxproto=5,direct)\ntmpfs on /tmp type tmpfs (rw,nosuid,nodev,size=1020896k,nr_inodes=1048576)\nnsfs on /run/sandbox-ns/ipc type nsfs (rw)\nnsfs on /run/sandbox-ns/uts type nsfs (rw)\nkatashared on /run/kata-containers/shared/containers type virtiofs (rw,relatime)\nshm on /run/kata-containers/sandbox/shm type tmpfs (rw,relatime,size=1020892k,nr_inodes=255223)\ntmpfs on /etc/resolv.conf type tmpfs (rw,nosuid,nodev,size=408360k,nr_inodes=819200,mode=755)\nnone on /run/kata-containers/shared/containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs type virtiofs (rw,relatime)\nnone on /run/kata-containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs type virtiofs (rw,relatime)\ntmpfs on /run/kata-containers/shared/containers/watchable type tmpfs (rw,relatime,size=1020892k,nr_inodes=255223)\nnone on /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-172195b99cf7a9fd-serviceaccount type virtiofs (rw,relatime)\nnone on /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs type virtiofs (rw,relatime)\nnone on /run/kata-containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs type virtiofs (rw,relatime)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# ls都没有，只能echo * 代替。\n\nbash-5.1# echo *\nautofs bin boot dev etc home lib lib64 lost+found media mnt proc root run sbin srv sys tmp usr var\n\n\n1\n2\n\n\n\n# uname -a\n\n\n# 看看激活了什么内核模块\n\nbash-5.1# lsmod\nlibkmod: kmod_module_new_from_loaded: could not open /proc/modules: no such file or directory\nerror: could not get list of modules: no such file or directory\n\n\n1\n2\n3\n\n\n\n# 看看都有什么进程\n\nbash-5.1# ps efx ww\n\n\n# 看看有多少内存\n\nbash-5.1# free -h\n\n\n# 看看内核启动参数\n\nbash-5.1# cat cmdline\n\n\n# 看看systemctl的服务\n\nbash-5.1# systemctl list-units\n  unit                                                                                                                                                  load   active     sub       description          \n  proc-sys-fs-binfmt_misc.automount                                                                                                                     loaded active     waiting   arbitrary executable file formats file system automount point\n  dev-pmem0p1.device                                                                                                                                    loaded activating tentative /dev/pmem0p1         \n  -.mount                                                                                                                                               loaded active     mounted   root mount\n  etc-machine\\x2did.mount                                                                                                                               loaded active     mounted   /etc/machine-id\n  etc-resolv.conf.mount                                                                                                                                 loaded active     mounted   /etc/resolv.conf\n  run-kata\\x2dcontainers-3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985-rootfs.mount                                                  loaded active     mounted   /run/kata-containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs\n  run-kata\\x2dcontainers-a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-rootfs.mount                                                  loaded active     mounted   /run/kata-containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs\n  run-kata\\x2dcontainers-sandbox-shm.mount                                                                                                              loaded active     mounted   /run/kata-containers/sandbox/shm\n  run-kata\\x2dcontainers-shared-containers-3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985-rootfs.mount                                loaded active     mounted   /run/kata-containers/shared/containers/3871d0c8108c66d3388f883f0d4de0cdf3e724607a06bce653fc13a988cd1985/rootfs\n  run-kata\\x2dcontainers-shared-containers-a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-rootfs.mount                                loaded active     mounted   /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a/rootfs\n  run-kata\\x2dcontainers-shared-containers-a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a\\x2d172195b99cf7a9fd\\x2dserviceaccount.mount loaded active     mounted   /run/kata-containers/shared/containers/a83ce7bc82f78808ff1aa8165e705ecded65634ba54a57a1eda68c19d751f98a-172195b99cf7a9fd-serviceaccount\n  run-kata\\x2dcontainers-shared-containers-watchable.mount                                                                                              loaded active     mounted   /run/kata-containers/shared/containers/watchable\n  run-kata\\x2dcontainers-shared-containers.mount                                                                                                        loaded active     mounted   /run/kata-containers/shared/containers\n  run-sandbox\\x2dns-ipc.mount                                                                                                                           loaded active     mounted   /run/sandbox-ns/ipc\n  run-sandbox\\x2dns-uts.mount                                                                                                                           loaded active     mounted   /run/sandbox-ns/uts\n  tmp.mount                                                                                                                                             loaded active     mounted   temporary directory /tmp\n  systemd-ask-password-console.path                                                                                                                     loaded active     waiting   dispatch password requests to console directory watch\n  init.scope                                                                                                                                            loaded active     running   system and service manager\n● chronyd.service                                                                                                                                       loaded failed     failed    ntp client/server\n  kata-agent.service                                                                                                                                    loaded active     running   kata containers agent\n  systemd-remount-fs.service                                                                                                                            loaded active     exited    remount root and kernel file systems\n  systemd-sysctl.service                                                                                                                                loaded active     exited    apply kernel variables\n  -.slice                                                                                                                                               loaded active     active    root slice\n  system.slice                                                                                                                                          loaded active     active    system slice         \n  systemd-coredump.socket                                                                                                                               loaded active     listening process core dump socket\n  basic.target                                                                                                                                          loaded active     active    basic system\n  cryptsetup.target                                                                                                                                     loaded active     active    local encrypted volumes\n  kata-containers.target                                                                                                                                loaded active     active    kata containers agent target\n  local-fs-pre.target                                                                                                                                   loaded active     active    preparation for local file systems\n  local-fs.target                                                                                                                                       loaded active     active    local file systems\n  paths.target                                                                                                                                          loaded active     active    path units\n  slices.target                                                                                                                                         loaded active     active    slice units\n  sockets.target                                                                                                                                        loaded active     active    socket units\n  swap.target                                                                                                                                           loaded active     active    swaps\n  sysinit.target                                                                                                                                        loaded active     active    system initialization\n  timers.target                                                                                                                                         loaded active     active    timer units          \n  systemd-tmpfiles-clean.timer                                                                                                                          loaded active     waiting   daily cleanup of temporary directories\n\nload   = reflects whether the unit definition was properly loaded.\nactive = the high-level unit activation state, i.e. generalization of sub.\nsub    = the low-level unit activation state, values depend on unit type.\n37 loaded units listed. pass --all to see loaded but inactive units, too.\nto show all installed unit files use \'systemctl list-unit-files\'.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\nbash-5.1#   systemctl cat kata-containers.target\n# /usr/lib/systemd/system/kata-containers.target\n#\n# copyright (c) 2018-2019 intel corporation\n#\n# spdx-license-identifier: apache-2.0\n#\n\n[unit]\ndescription=kata containers agent target\nrequires=basic.target\nrequires=tmp.mount\nwants=chronyd.service\nrequires=kata-agent.service\nconflicts=rescue.service rescue.target\nafter=basic.target rescue.service rescue.target\nallowisolate=yes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# cpuinfo/meminfo (2c)\n\nbash-5.1# more /proc/cpuinfo\nprocessor       : 0\nvendor_id       : genuineintel\ncpu family      : 6\nmodel           : 158\nmodel name      : intel(r) core(tm) i7-7700 cpu @ 3.60ghz\nstepping        : 9\nmicrocode       : 0xea\ncpu mhz         : 3599.982\ncache size      : 16384 kb\nphysical id     : 0\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 0\ninitial apicid  : 0\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_ arat md_clearinvpcid rtm mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1--more--e_timer aes xsave avx f16c rdra--more--\niority tsc_offset vtpr mtf vapic ept vpid unrestricted_guest pmld ept_1gb flexpr--more--\nswapgs taa itlb_multihit srbds spectre_v1 spectre_v2 spec_store_bypass l1tf mds --more--\nbogomips        : 7199.96\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 39 bits physical, 48 bits virtual\npower management:\n\nprocessor       : 1\nvendor_id       : genuineintel\ncpu family      : 6\nmodel           : 158\nmodel name      : intel(r) core(tm) i7-7700 cpu @ 3.60ghz\nstepping        : 9\nmicrocode       : 0xea\ncpu mhz         : 3599.982\ncache size      : 16384 kb\nphysical id     : 7\nsiblings        : 1\ncore id         : 0\ncpu cores       : 1\napicid          : 7\ninitial apicid  : 7\nfpu             : yes\nfpu_exception   : yes\ncpuid level     : 13\nwp              : yes\nlushopt xsaveopt xsavec xgetbv1 arat md_clearinvpcid rtm mpx rdseed adx smap clf--more--\nswapgs taa itlb_multihit srbds spectre_v1 spectre_v2 spec_store_bypass l1tf mds --more--\nbogomips        : 7199.96\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 39 bits physical, 48 bits virtual\npower management:\n\n[root@localhost ~]# more /proc/meminfo   (??)\nmemtotal:        7935356 kb\nmemfree:          478024 kb\nmemavailable:    1827752 kb\nbuffers:            1064 kb\ncached:          1903388 kb\nswapcached:            0 kb\nactive:          5728076 kb\ninactive:         891144 kb\nactive(anon):    5029108 kb\ninactive(anon):   207680 kb\nactive(file):     698968 kb\ninactive(file):   683464 kb\nunevictable:           4 kb\nmlocked:               4 kb\nswaptotal:             0 kb\nswapfree:              0 kb\ndirty:              9584 kb\nwriteback:             0 kb\nanonpages:       4715640 kb\nmapped:           564200 kb\nshmem:            522020 kb\nslab:             469116 kb\nsreclaimable:     280468 kb\nsunreclaim:       188648 kb\nkernelstack:       43248 kb\npagetables:        39740 kb\nnfs_unstable:          0 kb\nbounce:                0 kb\nwritebacktmp:          0 kb\ncommitlimit:     3967676 kb\ncommitted_as:   23822760 kb\nvmalloctotal:   34359738367 kb\nvmallocused:      461976 kb\nvmallocchunk:   34358937596 kb\npercpu:            11552 kb\nhardwarecorrupted:     0 kb\nanonhugepages:     20480 kb\ncmatotal:              0 kb\ncmafree:               0 kb\nhugepages_total:       0\nhugepages_free:        0\nhugepages_rsvd:        0\nhugepages_surp:        0\nhugepagesize:       2048 kb\ndirectmap4k:      211152 kb\ndirectmap2m:     8038400 kb\ndirectmap1g:           0 kb\n[root@localhost ~]#\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n\n\n\n# 总结\n\nlimit 1c1g default:1c2g\n\nvm: cpuinfo： 2cpu meminfo: memtotal: 7935356 kb (7.5g)\n\npod: cpuinfo：2cpu meminfo: memtotal: 3090364 kb (2.9g) free -h: 2.9g',charsets:{cjk:!0}},{title:"kata-deploy分析",frontmatter:{title:"kata-deploy分析",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/69d5c3/",categories:["技术杂谈","kata-containers","kata部署"],tags:[null],titleTag:"原创",readingShow:"top",description:"在节点上安装必要的 Kata 二进制文件、配置文件和虚拟机组件。安装后，DaemonSet 添加一个节点标签katacontainers.io/kata-runtime=true并重新配置 CRI-O 或 containerd 以注册三个runtimeClasses：kata-clh、kata-qemu和kata-fc。作为最后一步，DaemonSet 重新启动 CRI-O 或 containerd。删除后，DaemonSet 会删除 Kata 二进制文件和 VM 工件，并将节点标签更新为katacontainers.io/kata-runtime=cleanup.",meta:[{name:"twitter:title",content:"kata-deploy分析"},{name:"twitter:description",content:"在节点上安装必要的 Kata 二进制文件、配置文件和虚拟机组件。安装后，DaemonSet 添加一个节点标签katacontainers.io/kata-runtime=true并重新配置 CRI-O 或 containerd 以注册三个runtimeClasses：kata-clh、kata-qemu和kata-fc。作为最后一步，DaemonSet 重新启动 CRI-O 或 containerd。删除后，DaemonSet 会删除 Kata 二进制文件和 VM 工件，并将节点标签更新为katacontainers.io/kata-runtime=cleanup."},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/02.kata%E9%83%A8%E7%BD%B2/02.kata-deploy%E5%88%86%E6%9E%90.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata-deploy分析"},{property:"og:description",content:"在节点上安装必要的 Kata 二进制文件、配置文件和虚拟机组件。安装后，DaemonSet 添加一个节点标签katacontainers.io/kata-runtime=true并重新配置 CRI-O 或 containerd 以注册三个runtimeClasses：kata-clh、kata-qemu和kata-fc。作为最后一步，DaemonSet 重新启动 CRI-O 或 containerd。删除后，DaemonSet 会删除 Kata 二进制文件和 VM 工件，并将节点标签更新为katacontainers.io/kata-runtime=cleanup."},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/02.kata%E9%83%A8%E7%BD%B2/02.kata-deploy%E5%88%86%E6%9E%90.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata-deploy分析"},{itemprop:"description",content:"在节点上安装必要的 Kata 二进制文件、配置文件和虚拟机组件。安装后，DaemonSet 添加一个节点标签katacontainers.io/kata-runtime=true并重新配置 CRI-O 或 containerd 以注册三个runtimeClasses：kata-clh、kata-qemu和kata-fc。作为最后一步，DaemonSet 重新启动 CRI-O 或 containerd。删除后，DaemonSet 会删除 Kata 二进制文件和 VM 工件，并将节点标签更新为katacontainers.io/kata-runtime=cleanup."}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/02.kata%E9%83%A8%E7%BD%B2/02.kata-deploy%E5%88%86%E6%9E%90.html",relativePath:"01.技术杂谈/06.kata-containers/02.kata部署/02.kata-deploy分析.md",key:"v-de20ac86",path:"/pages/69d5c3/",headers:[{level:2,title:"Host artifacts:",slug:"host-artifacts",normalizedTitle:"host artifacts:",charIndex:291},{level:2,title:"Virtual Machine artifacts:",slug:"virtual-machine-artifacts",normalizedTitle:"virtual machine artifacts:",charIndex:431},{level:2,title:"kata-deploy内部",slug:"kata-deploy内部",normalizedTitle:"kata-deploy内部",charIndex:1405}],headersStr:"Host artifacts: Virtual Machine artifacts: kata-deploy内部",content:'在节点上安装必要的 Kata 二进制文件、配置文件和虚拟机组件。安装后，DaemonSet 添加一个节点标签katacontainers.io/kata-runtime=true并重新配置 CRI-O 或 containerd 以注册三个runtimeClasses：kata-clh、kata-qemu和kata-fc。作为最后一步，DaemonSet 重新启动 CRI-O 或 containerd。删除后，DaemonSet 会删除 Kata 二进制文件和 VM 工件，并将节点标签更新为katacontainers.io/kata-runtime=cleanup.\n\n\n# Host artifacts:\n\ncloud-hypervisor, firecracker, qemu, and supporting binaries containerd-shim-kata-v2 kata-collect-data.sh kata-runtime\n\n\n# Virtual Machine artifacts:\n\nkata-containers.img and kata-containers-initrd.img vmlinuz.container and vmlinuz-virtiofs.container\n\n\n# 部署kata-deploy之后\n\n[root@localhost ~]# ps -ef | grep kata\nroot     16533 16031  0 14:26 pts/1    00:00:00 grep --color=auto kata\nroot     24526 20728  0 11:09 ?        00:00:00 bash /opt/kata-artifacts/scripts/kata-deploy.sh install\n[root@localhost ~]# ps -ef | grep qemu\nroot     18834 16031  0 14:27 pts/1    00:00:00 grep --color=auto qemu\n[root@localhost ~]#\n[root@localhost ~]#\n[root@localhost ~]# ps -ef | grep kvm\nroot       756     2  0 Mar25 ?        00:00:00 [kvm-irqfd-clean]\nroot     18975 16031  0 14:27 pts/1    00:00:00 grep --color=auto kvm\n[root@localhost ~]# ls /opt/kata/\nbin  libexec  share\n[root@localhost ~]# ls /opt/kata/bin/\ncloud-hypervisor         firecracker  kata-collect-data.sh  kata-runtime\ncontainerd-shim-kata-v2  jailer       kata-monitor          qemu-system-x86_64\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# kata-deploy内部\n\n[root@kata-deploy-6r86s /]# ps -ef \nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 03:09 ?        00:00:00 bash /opt/kata-artifacts/scripts/kata-deploy.sh install\nroot        80     1  0 03:09 ?        00:00:00 sleep infinity\nroot        81     0  0 06:41 pts/0    00:00:00 bash\nroot        96    81  0 06:42 pts/0    00:00:00 ps -ef\n挂载/run/system后可以控制宿主机服务\n[root@kata-deploy-6r86s /]# systemctl status containerd\n● containerd.service - containerd container runtime\n   Loaded: loaded (/usr/lib/systemd/system/containerd.service; enabled; vendor preset: disabled)\n   Active: active (running) since Thu 2022-04-07 06:47:47 UTC; 6min ago\n     Docs: https://containerd.io\n  Process: 3033 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)\n Main PID: 3035\n    Tasks: 585\n   Memory: 535.9M\n   CGroup: /system.slice/containerd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 部署后containerd配置追加\n\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n  runtime_type = "io.containerd.kata.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc]\n  runtime_type = "io.containerd.kata-fc.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-fc.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]\n  runtime_type = "io.containerd.kata-qemu.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh]\n  runtime_type = "io.containerd.kata-clh.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-clh.toml"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 部署日志：\n\ncopying kata artifacts onto host\nwarning: containerd-shim-kata-fc-v2 already exists\n#!/usr/bin/env bash\nKATA_CONF_FILE=/opt/kata/share/defaults/kata-containers/configuration-fc.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\nwarning: containerd-shim-kata-qemu-v2 already exists\n#!/usr/bin/env bash\nKATA_CONF_FILE=/opt/kata/share/defaults/kata-containers/configuration-qemu.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\nCreating the default shim-v2 binary\nwarning: containerd-shim-kata-clh-v2 already exists\n#!/usr/bin/env bash\nKATA_CONF_FILE=/opt/kata/share/defaults/kata-containers/configuration-clh.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\nAdd Kata Containers as a supported runtime for containerd\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n  runtime_type = "io.containerd.kata.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc]\n  runtime_type = "io.containerd.kata-fc.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-fc.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]\n  runtime_type = "io.containerd.kata-qemu.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh]\n  runtime_type = "io.containerd.kata-clh.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh.options]\n    ConfigPath = "/opt/kata/share/defaults/kata-containers/configuration-clh.toml"\nnode/localhost.localdomain unlabeled\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n',normalizedContent:'在节点上安装必要的 kata 二进制文件、配置文件和虚拟机组件。安装后，daemonset 添加一个节点标签katacontainers.io/kata-runtime=true并重新配置 cri-o 或 containerd 以注册三个runtimeclasses：kata-clh、kata-qemu和kata-fc。作为最后一步，daemonset 重新启动 cri-o 或 containerd。删除后，daemonset 会删除 kata 二进制文件和 vm 工件，并将节点标签更新为katacontainers.io/kata-runtime=cleanup.\n\n\n# host artifacts:\n\ncloud-hypervisor, firecracker, qemu, and supporting binaries containerd-shim-kata-v2 kata-collect-data.sh kata-runtime\n\n\n# virtual machine artifacts:\n\nkata-containers.img and kata-containers-initrd.img vmlinuz.container and vmlinuz-virtiofs.container\n\n\n# 部署kata-deploy之后\n\n[root@localhost ~]# ps -ef | grep kata\nroot     16533 16031  0 14:26 pts/1    00:00:00 grep --color=auto kata\nroot     24526 20728  0 11:09 ?        00:00:00 bash /opt/kata-artifacts/scripts/kata-deploy.sh install\n[root@localhost ~]# ps -ef | grep qemu\nroot     18834 16031  0 14:27 pts/1    00:00:00 grep --color=auto qemu\n[root@localhost ~]#\n[root@localhost ~]#\n[root@localhost ~]# ps -ef | grep kvm\nroot       756     2  0 mar25 ?        00:00:00 [kvm-irqfd-clean]\nroot     18975 16031  0 14:27 pts/1    00:00:00 grep --color=auto kvm\n[root@localhost ~]# ls /opt/kata/\nbin  libexec  share\n[root@localhost ~]# ls /opt/kata/bin/\ncloud-hypervisor         firecracker  kata-collect-data.sh  kata-runtime\ncontainerd-shim-kata-v2  jailer       kata-monitor          qemu-system-x86_64\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# kata-deploy内部\n\n[root@kata-deploy-6r86s /]# ps -ef \nuid        pid  ppid  c stime tty          time cmd\nroot         1     0  0 03:09 ?        00:00:00 bash /opt/kata-artifacts/scripts/kata-deploy.sh install\nroot        80     1  0 03:09 ?        00:00:00 sleep infinity\nroot        81     0  0 06:41 pts/0    00:00:00 bash\nroot        96    81  0 06:42 pts/0    00:00:00 ps -ef\n挂载/run/system后可以控制宿主机服务\n[root@kata-deploy-6r86s /]# systemctl status containerd\n● containerd.service - containerd container runtime\n   loaded: loaded (/usr/lib/systemd/system/containerd.service; enabled; vendor preset: disabled)\n   active: active (running) since thu 2022-04-07 06:47:47 utc; 6min ago\n     docs: https://containerd.io\n  process: 3033 execstartpre=/sbin/modprobe overlay (code=exited, status=0/success)\n main pid: 3035\n    tasks: 585\n   memory: 535.9m\n   cgroup: /system.slice/containerd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 部署后containerd配置追加\n\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n  runtime_type = "io.containerd.kata.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc]\n  runtime_type = "io.containerd.kata-fc.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration-fc.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]\n  runtime_type = "io.containerd.kata-qemu.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh]\n  runtime_type = "io.containerd.kata-clh.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration-clh.toml"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 部署日志：\n\ncopying kata artifacts onto host\nwarning: containerd-shim-kata-fc-v2 already exists\n#!/usr/bin/env bash\nkata_conf_file=/opt/kata/share/defaults/kata-containers/configuration-fc.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\nwarning: containerd-shim-kata-qemu-v2 already exists\n#!/usr/bin/env bash\nkata_conf_file=/opt/kata/share/defaults/kata-containers/configuration-qemu.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\ncreating the default shim-v2 binary\nwarning: containerd-shim-kata-clh-v2 already exists\n#!/usr/bin/env bash\nkata_conf_file=/opt/kata/share/defaults/kata-containers/configuration-clh.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\nadd kata containers as a supported runtime for containerd\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n  runtime_type = "io.containerd.kata.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc]\n  runtime_type = "io.containerd.kata-fc.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-fc.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration-fc.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu]\n  runtime_type = "io.containerd.kata-qemu.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-qemu.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration-qemu.toml"\n[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh]\n  runtime_type = "io.containerd.kata-clh.v2"\n  privileged_without_host_devices = true\n  pod_annotations = ["io.katacontainers.*"]\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata-clh.options]\n    configpath = "/opt/kata/share/defaults/kata-containers/configuration-clh.toml"\nnode/localhost.localdomain unlabeled\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n',charsets:{cjk:!0}},{title:"常用命令",frontmatter:{title:"常用命令",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/3cb03e/",categories:["技术杂谈","kata-containers","kata应用"],tags:[null],titleTag:"原创",readingShow:"top",description:"[TOC]",meta:[{name:"twitter:title",content:"常用命令"},{name:"twitter:description",content:"[TOC]"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/01.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"},{property:"og:type",content:"article"},{property:"og:title",content:"常用命令"},{property:"og:description",content:"[TOC]"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/01.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"常用命令"},{itemprop:"description",content:"[TOC]"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/01.%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"01.技术杂谈/06.kata-containers/04.kata应用/01.常用命令.md",key:"v-21013b52",path:"/pages/3cb03e/",headers:[{level:2,title:"进入kata虚拟机  kata-runtime  exec",slug:"进入kata虚拟机-kata-runtime-exec",normalizedTitle:"进入kata虚拟机  kata-runtime  exec",charIndex:null}],headersStr:"进入kata虚拟机  kata-runtime  exec",content:'[TOC]\n\n\n# kata-rumtime\n\n * kata-runtime check\n\n> WARN[0000] Not running network checks as super user      arch=amd64 name=kata-runtime pid=25571 source=runtime\n> \n> System is capable of running Kata Containers\n> \n> System can currently create Kata Containers\n\n * kata-runtime env\n\n * kata-runtime metrics fd77dc25ad3e958ded82cc5449c521a00b8300b71981370ba43a757e14ce7b19\n\n\n# 进入kata虚拟机 kata-runtime exec\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/Developer-Guide.md#connect-to-debug-console\n\nkata v2环境中考虑到安全性问题不能直接使用kata-runtime exec进入sandbox虚拟机，并且kata release版本的镜像没有包含登录组件，如果要登录需要重新制作sandbox文件系统，登录sandbox需要通过kata-monitor并且sandbox需要在kata-monitor启动之后再启动才能进行调试工作\n\n * 修改配置 debug_console_enabled\n\n> [agent.kata] debug_console_enabled = true\n\n * 启动kata-monitor\n\n[root@rqy-k8s-1 kbuser]# /opt/kata/bin/kata-monitor\nINFO[0000] announce                    app=kata-monitor arch=amd64 git-commit=8d545f7438fc8b1189c1dcc8c414dcc50f7e5587 go-version=go1.17.3 listen-address="127.0.0.1:8090" log-level=info os=linux runtime-endpoint=/run/containerd/containerd.sock version=0.3.0\n\n\n\n# 虚拟机里面，是个超级简化的系统，命令奇缺\n[root@rqy-k8s-1 kbuser]# kata-runtime exec 1b482bb4613ba606894d30370fe7637610a495d9b3a504bc36e9aa292db9a0f0\nbash: grep: command not found\nbash: grep: command not found\nbash: tty: command not found\nbash: expr: command not found\nbash: [: : integer expression expected\nbash-5.1#\nbash-5.1#\nbash-5.1# df -h\nbash: df: command not found\nbash-5.1# lsblk\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS\npmem0   259:0   0  126M  1 disk\n`-pmem0p1 259:1   0  124M  1 part /\nbash-5.1# ip addr\nbash: ip: command not found\nbash-5.1# ifconfig\nbash: ifconfig: command not found\n# 详情见[一个kata容器的创建示例]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# crictl\n\nctr是containerd的一个客户端工具\n\ncrictl 是 CRI 兼容的容器运行时命令行接口，可以使用它来检查和调试 Kubernetes 节点上的容器运行时和应用程序\n\ncrictl 使用命名空间 k8s.io，即crictl image list = ctr -n=k8s.io image list\n\ncrictl config runtime-endpoint unix:///run/containerd/containerd.sock crictl ps #同docker ps crictl inspect crictl exec crictl pods # 可以查看哪些是kata容器 crictl images # 同docker images crictl logs\n\ncrictl ps | grep stress\n86a94ad5059a4  14701355bb465   12 minutes ago   Running    stress   0    7247eaccec1b6\ncrictl inspect  86a94ad5059a4\ncrictl exec -it  86a94ad5059a4 bash\nrictl stats 86a94ad5059a4\nCONTAINER    CPU %     MEM        DISK         INODES\n86a94ad5059a4  99.88     1.628GB       0B          13\ncrictl pods | grep stress\nbcfeedf0c17bf   3 minutes ago    Ready   stress-b4fdd868-s8d7n     default     0      kata\ncrictl images | grep vish/stress\ndocker.io/vish/stress      latest          14701355bb465    1.56MB\n[root@localhost kata]# POD_ID="$(sudo crictl pods --name test -q)"\n[root@localhost kata]# echo $POD_ID\n2766411ac797b74cdb16fc7a042715e434cfa127c522e45ffe347bd5f7f88cbb\n[root@localhost kata]# crictl inspectp -o=json $POD_ID | grep cgroupsPath\n "cgroupsPath": "/kubepods/pod31c20d7a-3733-4b8c-8651-160b23868773/2766411ac797b74cdb16fc7a042715e434cfa127c522e45ffe347bd5f7f88cbb",\n [root@localhost kata]# cat /sys/fs/cgroup/memory/kubepods/pod31c20d7a-3733-4b8c-8651-160b23868773/memory.limit_in_bytes\n524288000\n[root@rqy-k8s-1 kbuser]# ls /run/vc/vm/\n685a6f8538efaee72b1d38efd824aff76241b6ff307e75d3764b3d0606d33894  6d46a824dae01c4675da741ca2aff98b1e7eb005103d10cf0c3af6f758c97afe [root@rqy-k8s-1 kbuser]# kata-runtime exec 685a6f8538efaee72b1d38efd824aff76241b6ff307e75d3764b3d0606d33894 rpc error: code = DeadlineExceeded desc = timed out connecting to vsock 621008089:1026\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# ctr\n\nctr -n k8s.io image list\n\nctr -n k8s.io i export img.tar imgname\n\nctr -n k8s.io i import img.tar\n\nctr run -d imgname hfftest\n\n// 测试增加--rm参数退出后删除，否则退出后进程不会删除 ctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/xridge/fio:latest hfftest sh\n\nctr -n k8s.io t kill -s SIGKILL hfftest ctr -n k8s.io t rm hfftest\n\nctr -n k8s.io snapshot rm hfftest ctr -n k8s.io container rm hfftest\n\nctr -n k8s.io tasks list\n\nctr -n k8s.io task ps hfftest ctr -n k8s.io t exec --exec-id $RANDOM -t hfftest sh\n\n\n# 镜像管理命令\n\ndockers images ctr -n k8s.io images list crictl images\n\ndocker inspect pause:3.1 crictl inspecti docker.io/vish/stress:latest ctr无inspec命令\n\ndocker pull vish/stress ctr -n k8s.io pull vish/stress\n\n\n# 附件',normalizedContent:'[toc]\n\n\n# kata-rumtime\n\n * kata-runtime check\n\n> warn[0000] not running network checks as super user      arch=amd64 name=kata-runtime pid=25571 source=runtime\n> \n> system is capable of running kata containers\n> \n> system can currently create kata containers\n\n * kata-runtime env\n\n * kata-runtime metrics fd77dc25ad3e958ded82cc5449c521a00b8300b71981370ba43a757e14ce7b19\n\n\n# 进入kata虚拟机 kata-runtime exec\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/developer-guide.md#connect-to-debug-console\n\nkata v2环境中考虑到安全性问题不能直接使用kata-runtime exec进入sandbox虚拟机，并且kata release版本的镜像没有包含登录组件，如果要登录需要重新制作sandbox文件系统，登录sandbox需要通过kata-monitor并且sandbox需要在kata-monitor启动之后再启动才能进行调试工作\n\n * 修改配置 debug_console_enabled\n\n> [agent.kata] debug_console_enabled = true\n\n * 启动kata-monitor\n\n[root@rqy-k8s-1 kbuser]# /opt/kata/bin/kata-monitor\ninfo[0000] announce                    app=kata-monitor arch=amd64 git-commit=8d545f7438fc8b1189c1dcc8c414dcc50f7e5587 go-version=go1.17.3 listen-address="127.0.0.1:8090" log-level=info os=linux runtime-endpoint=/run/containerd/containerd.sock version=0.3.0\n\n\n\n# 虚拟机里面，是个超级简化的系统，命令奇缺\n[root@rqy-k8s-1 kbuser]# kata-runtime exec 1b482bb4613ba606894d30370fe7637610a495d9b3a504bc36e9aa292db9a0f0\nbash: grep: command not found\nbash: grep: command not found\nbash: tty: command not found\nbash: expr: command not found\nbash: [: : integer expression expected\nbash-5.1#\nbash-5.1#\nbash-5.1# df -h\nbash: df: command not found\nbash-5.1# lsblk\nname    maj:min rm  size ro type mountpoints\npmem0   259:0   0  126m  1 disk\n`-pmem0p1 259:1   0  124m  1 part /\nbash-5.1# ip addr\nbash: ip: command not found\nbash-5.1# ifconfig\nbash: ifconfig: command not found\n# 详情见[一个kata容器的创建示例]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# crictl\n\nctr是containerd的一个客户端工具\n\ncrictl 是 cri 兼容的容器运行时命令行接口，可以使用它来检查和调试 kubernetes 节点上的容器运行时和应用程序\n\ncrictl 使用命名空间 k8s.io，即crictl image list = ctr -n=k8s.io image list\n\ncrictl config runtime-endpoint unix:///run/containerd/containerd.sock crictl ps #同docker ps crictl inspect crictl exec crictl pods # 可以查看哪些是kata容器 crictl images # 同docker images crictl logs\n\ncrictl ps | grep stress\n86a94ad5059a4  14701355bb465   12 minutes ago   running    stress   0    7247eaccec1b6\ncrictl inspect  86a94ad5059a4\ncrictl exec -it  86a94ad5059a4 bash\nrictl stats 86a94ad5059a4\ncontainer    cpu %     mem        disk         inodes\n86a94ad5059a4  99.88     1.628gb       0b          13\ncrictl pods | grep stress\nbcfeedf0c17bf   3 minutes ago    ready   stress-b4fdd868-s8d7n     default     0      kata\ncrictl images | grep vish/stress\ndocker.io/vish/stress      latest          14701355bb465    1.56mb\n[root@localhost kata]# pod_id="$(sudo crictl pods --name test -q)"\n[root@localhost kata]# echo $pod_id\n2766411ac797b74cdb16fc7a042715e434cfa127c522e45ffe347bd5f7f88cbb\n[root@localhost kata]# crictl inspectp -o=json $pod_id | grep cgroupspath\n "cgroupspath": "/kubepods/pod31c20d7a-3733-4b8c-8651-160b23868773/2766411ac797b74cdb16fc7a042715e434cfa127c522e45ffe347bd5f7f88cbb",\n [root@localhost kata]# cat /sys/fs/cgroup/memory/kubepods/pod31c20d7a-3733-4b8c-8651-160b23868773/memory.limit_in_bytes\n524288000\n[root@rqy-k8s-1 kbuser]# ls /run/vc/vm/\n685a6f8538efaee72b1d38efd824aff76241b6ff307e75d3764b3d0606d33894  6d46a824dae01c4675da741ca2aff98b1e7eb005103d10cf0c3af6f758c97afe [root@rqy-k8s-1 kbuser]# kata-runtime exec 685a6f8538efaee72b1d38efd824aff76241b6ff307e75d3764b3d0606d33894 rpc error: code = deadlineexceeded desc = timed out connecting to vsock 621008089:1026\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# ctr\n\nctr -n k8s.io image list\n\nctr -n k8s.io i export img.tar imgname\n\nctr -n k8s.io i import img.tar\n\nctr run -d imgname hfftest\n\n// 测试增加--rm参数退出后删除，否则退出后进程不会删除 ctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/xridge/fio:latest hfftest sh\n\nctr -n k8s.io t kill -s sigkill hfftest ctr -n k8s.io t rm hfftest\n\nctr -n k8s.io snapshot rm hfftest ctr -n k8s.io container rm hfftest\n\nctr -n k8s.io tasks list\n\nctr -n k8s.io task ps hfftest ctr -n k8s.io t exec --exec-id $random -t hfftest sh\n\n\n# 镜像管理命令\n\ndockers images ctr -n k8s.io images list crictl images\n\ndocker inspect pause:3.1 crictl inspecti docker.io/vish/stress:latest ctr无inspec命令\n\ndocker pull vish/stress ctr -n k8s.io pull vish/stress\n\n\n# 附件',charsets:{cjk:!0}},{title:"kata使用问题汇总",frontmatter:{title:"kata使用问题汇总",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/37753f/",categories:["技术杂谈","kata-containers","kata应用"],tags:[null],titleTag:"原创",readingShow:"top",description:"​\t\t一些使用主机网络的k8s组件和业务无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。",meta:[{name:"twitter:title",content:"kata使用问题汇总"},{name:"twitter:description",content:"​\t\t一些使用主机网络的k8s组件和业务无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/02.kata%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata使用问题汇总"},{property:"og:description",content:"​\t\t一些使用主机网络的k8s组件和业务无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/02.kata%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata使用问题汇总"},{itemprop:"description",content:"​\t\t一些使用主机网络的k8s组件和业务无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/02.kata%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html",relativePath:"01.技术杂谈/06.kata-containers/04.kata应用/02.kata使用问题汇总.md",key:"v-6d806f67",path:"/pages/37753f/",headers:[{level:2,title:"不支持subPaths(emptyDir )使用",slug:"不支持subpaths-emptydir-使用",normalizedTitle:"不支持subpaths(emptydir )使用",charIndex:83},{level:2,title:"kata不支持host网络",slug:"kata不支持host网络",normalizedTitle:"kata不支持host网络",charIndex:112},{level:2,title:"不支持网络命名空间共享",slug:"不支持网络命名空间共享",normalizedTitle:"不支持网络命名空间共享",charIndex:220},{level:2,title:"不支持cpuset-cpus",slug:"不支持cpuset-cpus",normalizedTitle:"不支持cpuset-cpus",charIndex:441},{level:2,title:"容器内fio测试(压内存)会导致host上对应qemu进程oom，或节点卡死，节点异常问题",slug:"容器内fio测试-压内存-会导致host上对应qemu进程oom-或节点卡死-节点异常问题",normalizedTitle:"容器内fio测试(压内存)会导致host上对应qemu进程oom，或节点卡死，节点异常问题",charIndex:2003},{level:2,title:"Overhead的CPU和内存占用应该纳入已分配配额？？？",slug:"overhead的cpu和内存占用应该纳入已分配配额",normalizedTitle:"overhead的cpu和内存占用应该纳入已分配配额？？？",charIndex:2275},{level:2,title:"容器使用内存不会自动release？？",slug:"容器使用内存不会自动release",normalizedTitle:"容器使用内存不会自动release？？",charIndex:2309},{level:2,title:"未enable DAX, fio测试结果较差？？",slug:"未enable-dax-fio测试结果较差",normalizedTitle:"未enable dax, fio测试结果较差？？",charIndex:2344},{level:2,title:"qemu 不能直接使用 veth-pair, 导致vm+container的网络拓扑比较复杂且容易有性能问题, kubevirt同样的问题",slug:"qemu-不能直接使用-veth-pair-导致vm-container的网络拓扑比较复杂且容易有性能问题-kubevirt同样的问题",normalizedTitle:"qemu 不能直接使用 veth-pair, 导致vm+container的网络拓扑比较复杂且容易有性能问题, kubevirt同样的问题",charIndex:2382}],headersStr:"不支持subPaths(emptyDir )使用 kata不支持host网络 不支持网络命名空间共享 不支持cpuset-cpus 容器内fio测试(压内存)会导致host上对应qemu进程oom，或节点卡死，节点异常问题 Overhead的CPU和内存占用应该纳入已分配配额？？？ 容器使用内存不会自动release？？ 未enable DAX, fio测试结果较差？？ qemu 不能直接使用 veth-pair, 导致vm+container的网络拓扑比较复杂且容易有性能问题, kubevirt同样的问题",content:'[TOC]\n\n\n# docker 兼容问题\n\n * kata已去掉docker cli支持，请使用crictl命令\n\n * DinD问题\n\n\n# 使用限制：\n\n\n# 不支持subPaths(emptyDir )使用\n\n\n# kata不支持host网络\n\n一些使用主机网络的k8s组件和业务无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。\n\n\n# 不支持网络命名空间共享\n\nDocker 支持容器使用docker run --net=containers语法加入另一个容器命名空间的能力。这允许多个容器共享一个公共网络命名空间和放置在网络命名空间中的网络接口。Kata Containers 不支持网络命名空间共享。如果将 Kata 容器设置为共享runc容器的网络命名空间，则运行时会有效地接管分配给命名空间的所有网络接口并将它们绑定到 VM。因此，runc容器失去其网络连接。\n\n\n# 不支持cpuset-cpus\n\nhttps://github.com/kata-containers/runtime/issues/1079 docker run -d --cpuset-cpus= “ 0-1 ” ubuntu sleep 30000\n\n\n# ctr依赖/configuration-qemu.toml路径问题\n\n/etc/kata-containers/configuration.toml已存在，为测试删除了默认配置文件，但是containerd配置保留\n\n[root@localhost ~]# cat  /etc/containerd/config.toml \n      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n        runtime_type = "io.containerd.kata.v2"\n        privileged_without_host_devices = true\n        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]\n           ConfigPath = "/etc/kata-containers/configuration.toml"\n\n[root@localhost ~]# kubectl get runtimeclasses.node.k8s.io kata-containers -o yaml | grep handler\nhandler: kata\n\n[root@localhost ~]# ctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/library/busybox:latest hfftest dmesg \nctr: Cannot find usable config file (file /opt/kata/share/defaults/kata-containers/configuration-qemu.toml does not exist): not found\n\n\n[root@rqy-k8s-1 kbuser]# ll /usr/local/bin/containerd-shim-kata-v2\nlrwxrwxrwx. 1 root root 43 Mar 18 11:31 /usr/local/bin/containerd-shim-kata-v2 -> /usr/local/bin/containerd-shim-kata-qemu-v2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# kata deploy重启/节点重启会导致配置还原问题（必现）\n\ncat /opt/kata/share/defaults/kata-containers/configuration-qemu.toml  | grep sandbox_cgroup_only\nsandbox_cgroup_only=true\n\n## 重启后\n[root@localhost ~]# cat /opt/kata/share/defaults/kata-containers/configuration-qemu.toml  | grep sandbox_cgroup_only\nsandbox_cgroup_only=false\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 资源开销问题\n\n\n# 容器内fio测试(压内存)会导致host上对应qemu进程oom，或节点卡死，节点异常问题\n\n问题1： pod sanbox change，exec退出，pod重启次数加1 问题2： 节点卡死，节点notrady，相同配置runc测试无该问题\n\n怀疑： 未开启SandboxCgroupOnly，导致sanbox overhead无限制占用主机资源，导致节点异常，这样的话就说明kata的资源开销还是很大的。\n\n开启SandboxCgroupOnly后测试卡死，但是pod/节点未异常,进程结束。。。 所以，问题是，为什么没有错误信息\n\n\n# Overhead的CPU和内存占用应该纳入已分配配额？？？\n\n\n# 容器使用内存不会自动release？？\n\n\n# 存储性能问题\n\n\n# 未enable DAX, fio测试结果较差？？\n\n\n# 网络问题\n\n\n# qemu 不能直接使用 veth-pair, 导致vm+container的网络拓扑比较复杂且容易有性能问题, kubevirt同样的问题\n\n\n# 参考资料\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/Limitations.md https://github.com/pulls?q=label%3Alimitation+org%3Akata-containers+is%3Aclosed https://github.com/chestack/k8s-blog/blob/master/kata-container/kata-container.md',normalizedContent:'[toc]\n\n\n# docker 兼容问题\n\n * kata已去掉docker cli支持，请使用crictl命令\n\n * dind问题\n\n\n# 使用限制：\n\n\n# 不支持subpaths(emptydir )使用\n\n\n# kata不支持host网络\n\n一些使用主机网络的k8s组件和业务无法使用kata容器，所以runc（containerd）必须保留作为默认运行时，而kata-container作为可选运行时给特定负载使用。\n\n\n# 不支持网络命名空间共享\n\ndocker 支持容器使用docker run --net=containers语法加入另一个容器命名空间的能力。这允许多个容器共享一个公共网络命名空间和放置在网络命名空间中的网络接口。kata containers 不支持网络命名空间共享。如果将 kata 容器设置为共享runc容器的网络命名空间，则运行时会有效地接管分配给命名空间的所有网络接口并将它们绑定到 vm。因此，runc容器失去其网络连接。\n\n\n# 不支持cpuset-cpus\n\nhttps://github.com/kata-containers/runtime/issues/1079 docker run -d --cpuset-cpus= “ 0-1 ” ubuntu sleep 30000\n\n\n# ctr依赖/configuration-qemu.toml路径问题\n\n/etc/kata-containers/configuration.toml已存在，为测试删除了默认配置文件，但是containerd配置保留\n\n[root@localhost ~]# cat  /etc/containerd/config.toml \n      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n        runtime_type = "io.containerd.kata.v2"\n        privileged_without_host_devices = true\n        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]\n           configpath = "/etc/kata-containers/configuration.toml"\n\n[root@localhost ~]# kubectl get runtimeclasses.node.k8s.io kata-containers -o yaml | grep handler\nhandler: kata\n\n[root@localhost ~]# ctr -n k8s.io run --runtime io.containerd.kata.v2 -t --rm docker.io/library/busybox:latest hfftest dmesg \nctr: cannot find usable config file (file /opt/kata/share/defaults/kata-containers/configuration-qemu.toml does not exist): not found\n\n\n[root@rqy-k8s-1 kbuser]# ll /usr/local/bin/containerd-shim-kata-v2\nlrwxrwxrwx. 1 root root 43 mar 18 11:31 /usr/local/bin/containerd-shim-kata-v2 -> /usr/local/bin/containerd-shim-kata-qemu-v2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# kata deploy重启/节点重启会导致配置还原问题（必现）\n\ncat /opt/kata/share/defaults/kata-containers/configuration-qemu.toml  | grep sandbox_cgroup_only\nsandbox_cgroup_only=true\n\n## 重启后\n[root@localhost ~]# cat /opt/kata/share/defaults/kata-containers/configuration-qemu.toml  | grep sandbox_cgroup_only\nsandbox_cgroup_only=false\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 资源开销问题\n\n\n# 容器内fio测试(压内存)会导致host上对应qemu进程oom，或节点卡死，节点异常问题\n\n问题1： pod sanbox change，exec退出，pod重启次数加1 问题2： 节点卡死，节点notrady，相同配置runc测试无该问题\n\n怀疑： 未开启sandboxcgrouponly，导致sanbox overhead无限制占用主机资源，导致节点异常，这样的话就说明kata的资源开销还是很大的。\n\n开启sandboxcgrouponly后测试卡死，但是pod/节点未异常,进程结束。。。 所以，问题是，为什么没有错误信息\n\n\n# overhead的cpu和内存占用应该纳入已分配配额？？？\n\n\n# 容器使用内存不会自动release？？\n\n\n# 存储性能问题\n\n\n# 未enable dax, fio测试结果较差？？\n\n\n# 网络问题\n\n\n# qemu 不能直接使用 veth-pair, 导致vm+container的网络拓扑比较复杂且容易有性能问题, kubevirt同样的问题\n\n\n# 参考资料\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/limitations.md https://github.com/pulls?q=label%3alimitation+org%3akata-containers+is%3aclosed https://github.com/chestack/k8s-blog/blob/master/kata-container/kata-container.md',charsets:{cjk:!0}},{title:"kata相关配置及路径",frontmatter:{title:"kata相关配置及路径",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/821097/",categories:["技术杂谈","kata-containers","kata应用"],tags:[null],titleTag:"原创",readingShow:"top",description:"/etc/containerd/config.toml\n> /etc/systemd/system/kubelet.service.d/0-containerd.conf",meta:[{name:"twitter:title",content:"kata相关配置及路径"},{name:"twitter:description",content:"/etc/containerd/config.toml\n> /etc/systemd/system/kubelet.service.d/0-containerd.conf"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/03.kata%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B7%AF%E5%BE%84.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata相关配置及路径"},{property:"og:description",content:"/etc/containerd/config.toml\n> /etc/systemd/system/kubelet.service.d/0-containerd.conf"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/03.kata%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B7%AF%E5%BE%84.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata相关配置及路径"},{itemprop:"description",content:"/etc/containerd/config.toml\n> /etc/systemd/system/kubelet.service.d/0-containerd.conf"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/03.kata%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B7%AF%E5%BE%84.html",relativePath:"01.技术杂谈/06.kata-containers/04.kata应用/03.kata相关配置及路径.md",key:"v-d84e5c68",path:"/pages/821097/",headers:[{level:2,title:"containerd数据路径",slug:"containerd数据路径",normalizedTitle:"containerd数据路径",charIndex:114},{level:2,title:"containerd插件数据",slug:"containerd插件数据",normalizedTitle:"containerd插件数据",charIndex:205},{level:2,title:"注意配置文件问题",slug:"注意配置文件问题",normalizedTitle:"注意配置文件问题",charIndex:908},{level:2,title:"1. [hypervisor.qemu]",slug:"_1-hypervisor-qemu",normalizedTitle:"1. [hypervisor.qemu]",charIndex:1014},{level:2,title:"containerd配置：",slug:"containerd配置-2",normalizedTitle:"containerd配置：",charIndex:3634},{level:2,title:"受限注释：",slug:"受限注释",normalizedTitle:"受限注释：",charIndex:3867}],headersStr:"containerd数据路径 containerd插件数据 注意配置文件问题 1. [hypervisor.qemu] containerd配置： 受限注释：",content:'[TOC]\n\n\n# containerd配置\n\n> /etc/containerd/config.toml /etc/systemd/system/kubelet.service.d/0-containerd.conf\n\n\n# containerd数据路径\n\n> root = "/app/docker/containerd" state = "/app/docker/run/containerd"\n\n\n# containerd插件数据\n\n> ctr plugin ls\n\n\n# kata配置configuration.toml\n\n默认的配置文件位于/opt/kata/share/defaults/kata-containers/configuration.toml，如果/etc/kata-containers/configuration.toml的配置文件存在，则会替代默认的配置文件。\n\n[root@rqy-k8s-1 hff]# kata-runtime --kata-show-default-config-paths\n/etc/kata-containers/configuration.toml\n/opt/kata/share/defaults/kata-containers/configuration.toml\n\n\n1\n2\n3\n\n\n[hypervisor.qemu]\nuse_vsock ：使用vsocks与agent直接通信（前提支持vsocks），默认false \n[runtime]\nenable_cpu_memory_hotplug ：使能cpu和内存热插拔，默认false\n[agent.kata]\ndebug_console_enabled = true\n[hypervisor.qemu]\nsed -i -e \'s/^kernel_params = "\\(.*\\)"/kernel_params = "\\1 agent.debug_console"/g\' "${kata_configuration_file}"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n修改后新容器生效\n\n\n# 注意配置文件问题\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/containerd-kata.md\n\n\n# 1. [hypervisor.qemu]\n\npath = "/usr/bin/qemu-system-x86_64" 指定 qemu 的路径\nkernel = "/usr/share/kata-containers/vmlinuz.container" 指定启动内核路径\ninitrd = "/usr/share/kata-containers/kata-containers-initrd.img" 指定 initrd\nimage = "/usr/share/kata-containers/kata-containers-centos.img" 指定系统盘，initrd 和 image 不可以同时配置，否则会出错\nkernel_params = "" 配置-append 参数，定制虚拟机内核启动参数\nfirmware = "" 指定固件，影响 qemu 的-bios 参数\nmachine_accelerators="" virtcontainers/qemu.go 的 getQemuMachine() 进行处理，加到 machine.Options 中，最终是加到-machine 参数中\ndefault_vcpus = 1 默认 vcpu 个数\ndefault_maxvcpus = 0  默认最大 vcpu 个数，设置为 0 时实际上时 240\ndefault_bridges = 1 默认 PCI 桥个数\ndefault_memory = 2048  VM 默认内存大小\nmemory_slots = 10 内存插槽个数\ndisable_block_device_use = false 是否禁用块设备\nblock_device_driver = "virtio-scsi" 块设备驱动，可以是 virtio-scsi、virtio-blk 或 nvdimm\n#block_device_cache_set = true\n#block_device_cache_direct = true\n#block_device_cache_noflush = true  块设备是否设置 cache\nenable_iothreads = false  //enable_iothreas 当前仅针对 virtio-scsi 块设备生效\n#enable_mem_prealloc = true\n#enable_hugepages = true\n#file_mem_backend = ""  //这几个配置统一用于 kata-runtime qemu 插件启动虚拟机时的内存配置\n#enable_swap=true  //是否允许虚拟机内存 swap，以支持更大的虚拟机密度\n#enable_debug=false  //影响 guest kernel 内核启动，在 enable_debug 后，guest kernel 启动项会加上 systemd.show_status true systemd.log_level debug\n#disable_nesting_checks = true 虚拟机标志是否 nestedRun，即虚拟化嵌套\nmsize=8192 9p fs msize 选项\n#use_vsock = true 是否使用 vsock\n#hotplug_vfio_on_root_bus = true 对于 vfio 设备，会挂在到 root bus 上，否则挂载到 PCI bridge 上, 默认是 false\n#disable_vhost_net = true 禁用 vhost_net\n#entropy_source= "/dev/urandom" 指定随机数发生器，默认为/dev/urandom,kata 启动虚拟机时会给虚拟机附加一个随机数发生器\n#guest_hook_path = "/usr/share/oci/hooks" guest 钩子函数执行路径,用于 OCI\n#enable_template = true 默认为 false，enable 后新的虚拟机从模板通过虚拟机克隆方式启动，所有 VM 共享相同的初始化 kernel、initramfs 和 agent 内存\n#enable_debug = true 默认为 false，enable 后，shim 将消息发往 system log\n#enable_tracing = true 默认为 false，用于跟踪\n#diable_new_netns=true 默认为 false，enable 后，runtime 不会再为 shim 和 hypervisor 进程创建一个网络 namespace，在 enable_netmon、网络模式采用 bridged 或者 macvtap 后不能 enable 该选项\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# crictl\n\ncrictl 默认连接到 unix:///var/run/dockershim.sock\n\n[root@rqy-k8s-3 fio-iperf]# cat /etc/crictl.yaml\nruntime-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 0\ndebug: false\n\n\n1\n2\n3\n4\n\n\n\n# 镜像配置：\n\n> [plugins."io.containerd.grpc.v1.cri".registry]\n\n镜像存储路径：\n\n> /var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/ 原docker: /app/docker/overlay2\n\n\n# 修改sanbox(虚拟机)配置\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-set-sandbox-config-kata.md\n\n\n# containerd配置：\n\n​ [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n​  runtime_type = "io.containerd.kata.v2"\n​  pod_annotations = ["io.katacontainers.*"]\n​  container_annotations = ["io.katacontainers.*"]\n\n\n1\n2\n3\n4\n\n\n\n# 受限注释：\n\n一些注释是受限的，这意味着配置文件指定了可接受的值。目前，出于安全原因，仅管理程序注释受到限制，目的是控制 Kata Containers 运行时将代表您启动哪些二进制文件。\n\n> configuration.toml： enable_annotations = []\n\n\n# 关于runtime 名字怎么写？\n\nhttp://liubin.org/kata-dev-book/src/runtime-arch.html\n\n在 K8s 和 containerd 中，我们会看到很多用于设置 runtime 的地方，比如 RuntimeClass 、Pod 的 runtimeClassName 定义，以及 ctr run --runtime io.containerd.run.kata.v2 和 crictl runp -r kata ，里面都有参数指定运行时的名字。\n\nPod 的 runtimeClassName 属性会查找同名的 RuntimeClass 资源 根据 该资源的 handler ，在 containerd 的配置文件查找相应的运行时（ [plugins.cri.containerd.runtimes.${HANDLER_NAME}] ）。 一般情况下 containerd 配置会像这样：\n\n> [plugins.cri.containerd.runtimes.kata] runtime_type = "io.containerd.kata.v2"\n\n * ctr 命令使用的是 containerd 配置文件中的 runtime_type 属性（ containerd 用）。\n * crictl 和 K8s（实际也是 CRI 接口） 使用的是 containerd 配置中的 HANDLER_NAME（ CRI 用）。\n\n默认情况下，containerd 会根据 runtime_type 按规则对应到具体的运行时的可执行文件名。比如 Kata Containers(io.containerd.kata.v2) 运行时最终会转换为 containerd-shim-kata-v2 命令，该命令默认安装在 /usr/local/bin/containerd-shim-kata-v2。\n\n[root@localhost ~]# cat /usr/local/bin/containerd-shim-kata-v2\n#!/usr/bin/env bash\nKATA_CONF_FILE=/opt/kata/share/defaults/kata-containers/configuration-qemu.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\n\n\n1\n2\n3\n',normalizedContent:'[toc]\n\n\n# containerd配置\n\n> /etc/containerd/config.toml /etc/systemd/system/kubelet.service.d/0-containerd.conf\n\n\n# containerd数据路径\n\n> root = "/app/docker/containerd" state = "/app/docker/run/containerd"\n\n\n# containerd插件数据\n\n> ctr plugin ls\n\n\n# kata配置configuration.toml\n\n默认的配置文件位于/opt/kata/share/defaults/kata-containers/configuration.toml，如果/etc/kata-containers/configuration.toml的配置文件存在，则会替代默认的配置文件。\n\n[root@rqy-k8s-1 hff]# kata-runtime --kata-show-default-config-paths\n/etc/kata-containers/configuration.toml\n/opt/kata/share/defaults/kata-containers/configuration.toml\n\n\n1\n2\n3\n\n\n[hypervisor.qemu]\nuse_vsock ：使用vsocks与agent直接通信（前提支持vsocks），默认false \n[runtime]\nenable_cpu_memory_hotplug ：使能cpu和内存热插拔，默认false\n[agent.kata]\ndebug_console_enabled = true\n[hypervisor.qemu]\nsed -i -e \'s/^kernel_params = "\\(.*\\)"/kernel_params = "\\1 agent.debug_console"/g\' "${kata_configuration_file}"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n修改后新容器生效\n\n\n# 注意配置文件问题\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/containerd-kata.md\n\n\n# 1. [hypervisor.qemu]\n\npath = "/usr/bin/qemu-system-x86_64" 指定 qemu 的路径\nkernel = "/usr/share/kata-containers/vmlinuz.container" 指定启动内核路径\ninitrd = "/usr/share/kata-containers/kata-containers-initrd.img" 指定 initrd\nimage = "/usr/share/kata-containers/kata-containers-centos.img" 指定系统盘，initrd 和 image 不可以同时配置，否则会出错\nkernel_params = "" 配置-append 参数，定制虚拟机内核启动参数\nfirmware = "" 指定固件，影响 qemu 的-bios 参数\nmachine_accelerators="" virtcontainers/qemu.go 的 getqemumachine() 进行处理，加到 machine.options 中，最终是加到-machine 参数中\ndefault_vcpus = 1 默认 vcpu 个数\ndefault_maxvcpus = 0  默认最大 vcpu 个数，设置为 0 时实际上时 240\ndefault_bridges = 1 默认 pci 桥个数\ndefault_memory = 2048  vm 默认内存大小\nmemory_slots = 10 内存插槽个数\ndisable_block_device_use = false 是否禁用块设备\nblock_device_driver = "virtio-scsi" 块设备驱动，可以是 virtio-scsi、virtio-blk 或 nvdimm\n#block_device_cache_set = true\n#block_device_cache_direct = true\n#block_device_cache_noflush = true  块设备是否设置 cache\nenable_iothreads = false  //enable_iothreas 当前仅针对 virtio-scsi 块设备生效\n#enable_mem_prealloc = true\n#enable_hugepages = true\n#file_mem_backend = ""  //这几个配置统一用于 kata-runtime qemu 插件启动虚拟机时的内存配置\n#enable_swap=true  //是否允许虚拟机内存 swap，以支持更大的虚拟机密度\n#enable_debug=false  //影响 guest kernel 内核启动，在 enable_debug 后，guest kernel 启动项会加上 systemd.show_status true systemd.log_level debug\n#disable_nesting_checks = true 虚拟机标志是否 nestedrun，即虚拟化嵌套\nmsize=8192 9p fs msize 选项\n#use_vsock = true 是否使用 vsock\n#hotplug_vfio_on_root_bus = true 对于 vfio 设备，会挂在到 root bus 上，否则挂载到 pci bridge 上, 默认是 false\n#disable_vhost_net = true 禁用 vhost_net\n#entropy_source= "/dev/urandom" 指定随机数发生器，默认为/dev/urandom,kata 启动虚拟机时会给虚拟机附加一个随机数发生器\n#guest_hook_path = "/usr/share/oci/hooks" guest 钩子函数执行路径,用于 oci\n#enable_template = true 默认为 false，enable 后新的虚拟机从模板通过虚拟机克隆方式启动，所有 vm 共享相同的初始化 kernel、initramfs 和 agent 内存\n#enable_debug = true 默认为 false，enable 后，shim 将消息发往 system log\n#enable_tracing = true 默认为 false，用于跟踪\n#diable_new_netns=true 默认为 false，enable 后，runtime 不会再为 shim 和 hypervisor 进程创建一个网络 namespace，在 enable_netmon、网络模式采用 bridged 或者 macvtap 后不能 enable 该选项\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# crictl\n\ncrictl 默认连接到 unix:///var/run/dockershim.sock\n\n[root@rqy-k8s-3 fio-iperf]# cat /etc/crictl.yaml\nruntime-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 0\ndebug: false\n\n\n1\n2\n3\n4\n\n\n\n# 镜像配置：\n\n> [plugins."io.containerd.grpc.v1.cri".registry]\n\n镜像存储路径：\n\n> /var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/snapshots/ 原docker: /app/docker/overlay2\n\n\n# 修改sanbox(虚拟机)配置\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/how-to/how-to-set-sandbox-config-kata.md\n\n\n# containerd配置：\n\n​ [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]\n​  runtime_type = "io.containerd.kata.v2"\n​  pod_annotations = ["io.katacontainers.*"]\n​  container_annotations = ["io.katacontainers.*"]\n\n\n1\n2\n3\n4\n\n\n\n# 受限注释：\n\n一些注释是受限的，这意味着配置文件指定了可接受的值。目前，出于安全原因，仅管理程序注释受到限制，目的是控制 kata containers 运行时将代表您启动哪些二进制文件。\n\n> configuration.toml： enable_annotations = []\n\n\n# 关于runtime 名字怎么写？\n\nhttp://liubin.org/kata-dev-book/src/runtime-arch.html\n\n在 k8s 和 containerd 中，我们会看到很多用于设置 runtime 的地方，比如 runtimeclass 、pod 的 runtimeclassname 定义，以及 ctr run --runtime io.containerd.run.kata.v2 和 crictl runp -r kata ，里面都有参数指定运行时的名字。\n\npod 的 runtimeclassname 属性会查找同名的 runtimeclass 资源 根据 该资源的 handler ，在 containerd 的配置文件查找相应的运行时（ [plugins.cri.containerd.runtimes.${handler_name}] ）。 一般情况下 containerd 配置会像这样：\n\n> [plugins.cri.containerd.runtimes.kata] runtime_type = "io.containerd.kata.v2"\n\n * ctr 命令使用的是 containerd 配置文件中的 runtime_type 属性（ containerd 用）。\n * crictl 和 k8s（实际也是 cri 接口） 使用的是 containerd 配置中的 handler_name（ cri 用）。\n\n默认情况下，containerd 会根据 runtime_type 按规则对应到具体的运行时的可执行文件名。比如 kata containers(io.containerd.kata.v2) 运行时最终会转换为 containerd-shim-kata-v2 命令，该命令默认安装在 /usr/local/bin/containerd-shim-kata-v2。\n\n[root@localhost ~]# cat /usr/local/bin/containerd-shim-kata-v2\n#!/usr/bin/env bash\nkata_conf_file=/opt/kata/share/defaults/kata-containers/configuration-qemu.toml /opt/kata/bin/containerd-shim-kata-v2 "$@"\n\n\n1\n2\n3\n',charsets:{cjk:!0}},{title:"kata debug与日志",frontmatter:{title:"kata debug与日志",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/7393ee/",categories:["技术杂谈","kata-containers","kata应用"],tags:[null],titleTag:"原创",readingShow:"top",description:"[TOC]",meta:[{name:"twitter:title",content:"kata debug与日志"},{name:"twitter:description",content:"[TOC]"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/04.kata%20debug%E4%B8%8E%E6%97%A5%E5%BF%97.html"},{property:"og:type",content:"article"},{property:"og:title",content:"kata debug与日志"},{property:"og:description",content:"[TOC]"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/04.kata%20debug%E4%B8%8E%E6%97%A5%E5%BF%97.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"kata debug与日志"},{itemprop:"description",content:"[TOC]"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/06.kata-containers/04.kata%E5%BA%94%E7%94%A8/04.kata%20debug%E4%B8%8E%E6%97%A5%E5%BF%97.html",relativePath:"01.技术杂谈/06.kata-containers/04.kata应用/04.kata debug与日志.md",key:"v-ea1be710",path:"/pages/7393ee/",headers:[{level:2,title:"journalctl -t kata",slug:"journalctl-t-kata",normalizedTitle:"journalctl -t kata",charIndex:10},{level:2,title:"journalctl -t containerd",slug:"journalctl-t-containerd",normalizedTitle:"journalctl -t containerd",charIndex:149}],headersStr:"journalctl -t kata journalctl -t containerd",content:'[TOC]\n\n\n# journalctl -t kata\n\nKata containerd shimv2 运行时日志通过containerd，其日志将被发送到containerd日志指向的任何地方。\n\n查看shimv2运行时日志：\n\n> $ sudo journalctl -t kata\n\n\n# journalctl -t containerd\n\n\n# 开启 debug log\n\n开启 debug log 可以帮助我们获得更详细的 log，除了 runtime 的 log，而且还能看到 agent 的 log，以及 guest OS 中 kernel 的 log（dmesg命令的输出）。\n\n开启 debug log，需要修改两个配置文件：\n\n * containerd 配置文件按如下修改即可： [debug] level = "debug"\n\n * Kata Containers需要开启 runtime 和 agent 的 debug log\n\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep enable_debug\n#enable_debug = true\n#enable_debug = true\n#enable_debug = true\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep kernel_params\nkernel_params = ""\n\n\n$ sudo sed -i -e \'s/^# *\\(enable_debug\\).*=.*$/\\1 = true/g\' /etc/kata-containers/configuration.toml\n$ sudo sed -i -e \'s/^kernel_params = "\\(.*\\)"/kernel_params = "\\1 agent.log=debug"/g\' /etc/kata-containers/configuration.toml\n\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep enable_debug\nenable_debug = true\nenable_debug = true\nenable_debug = true\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep kernel_params\nkernel_params = " agent.log=debug"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/Developer-Guide.md#troubleshoot-kata-containers\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/Developer-Guide.md#connect-to-debug-console （进入虚拟机需要打开debug_console_enabled）\n\n\n# tracing\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/tracing.md\n\n\n# kata-log-parser\n\nhttps://github.com/kata-containers/tests/tree/main/cmd/log-parser\n\n\n# kata-collect-data.sh\n\n向社区提issue需要添加采集信息\n\n\n# 开启debug的开销\n\n开启前，已开启了debug_console_enabled，好像并不会因为pod增加而增加？\n\n[root@localhost hff]# systemd-cgtop | grep kata\n/kata_overhead                                                                                                                -      -     2.4M        -        -\n/kubepods/podfa152857-05d1-44fc-9cdc-d448b2c98941/kata_f40286f09e1ef5de468d894f1519c7ca6d30962653e7dce8daf90681802a0dde       7      -   167.8M        -        -\n/system.slice/kata-monitor.service                                                                                            1      -    22.2M        -        -\n\n\n1\n2\n3\n4\n\n\n按上述开启 debug log设置后\n\n[root@localhost hff]# systemd-cgtop | grep kata\n/kata_overhead                                                                                                                -      -     2.4M        -        -\n/kubepods/podfa152857-05d1-44fc-9cdc-d448b2c98941/kata_f40286f09e1ef5de468d894f1519c7ca6d30962653e7dce8daf90681802a0dde       7      -   166.6M        -        -\n/system.slice/kata-monitor.service                                                                                            1      -    21.8M        -        -\n\n\n1\n2\n3\n4\n\n\ndmesg日志\n\n[root@localhost hff]# dmesg | grep kata\n[2056734.849647] containerd-shim cpuset=kata_5051ee8a1c623152246de3245c514de818127663500f71c01ae4f2952dbdc73a mems_allowed=0\n[2056734.849679] Task in /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a/kata_5051ee8a1c623152246de3245c514de818127663500f71c01ae4f2952dbdc73a killed as a result of limit of /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a\n[2056734.849690] Memory cgroup stats for /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a/kata_5051ee8a1c623152246de3245c514de818127663500f71c01ae4f2952dbdc73a: cache:188900KB rss:15900KB rss_huge:0KB mapped_file:188876KB swap:0KB inactive_anon:188372KB active_anon:16428KB inactive_file:0KB active_file:0KB unevictable:0KB\n[2056751.353176] pool cpuset=kata_d888b88f19234d8148f43414242b99ec4de2d25e881d0453a920622da946c2e1 mems_allowed=0\n[2056751.353223] Task in /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a/kata_d888b88f19234d8148f43414242b99ec4de2d25e881d0453a920622da946c2e1 killed as a result of limit of /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a\n\n\n\n1\n2\n3\n4\n5\n6\n7\n',normalizedContent:'[toc]\n\n\n# journalctl -t kata\n\nkata containerd shimv2 运行时日志通过containerd，其日志将被发送到containerd日志指向的任何地方。\n\n查看shimv2运行时日志：\n\n> $ sudo journalctl -t kata\n\n\n# journalctl -t containerd\n\n\n# 开启 debug log\n\n开启 debug log 可以帮助我们获得更详细的 log，除了 runtime 的 log，而且还能看到 agent 的 log，以及 guest os 中 kernel 的 log（dmesg命令的输出）。\n\n开启 debug log，需要修改两个配置文件：\n\n * containerd 配置文件按如下修改即可： [debug] level = "debug"\n\n * kata containers需要开启 runtime 和 agent 的 debug log\n\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep enable_debug\n#enable_debug = true\n#enable_debug = true\n#enable_debug = true\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep kernel_params\nkernel_params = ""\n\n\n$ sudo sed -i -e \'s/^# *\\(enable_debug\\).*=.*$/\\1 = true/g\' /etc/kata-containers/configuration.toml\n$ sudo sed -i -e \'s/^kernel_params = "\\(.*\\)"/kernel_params = "\\1 agent.log=debug"/g\' /etc/kata-containers/configuration.toml\n\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep enable_debug\nenable_debug = true\nenable_debug = true\nenable_debug = true\n[root@localhost hff]# cat /etc/kata-containers/configuration.toml | grep kernel_params\nkernel_params = " agent.log=debug"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/developer-guide.md#troubleshoot-kata-containers\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/developer-guide.md#connect-to-debug-console （进入虚拟机需要打开debug_console_enabled）\n\n\n# tracing\n\nhttps://github.com/kata-containers/kata-containers/blob/main/docs/tracing.md\n\n\n# kata-log-parser\n\nhttps://github.com/kata-containers/tests/tree/main/cmd/log-parser\n\n\n# kata-collect-data.sh\n\n向社区提issue需要添加采集信息\n\n\n# 开启debug的开销\n\n开启前，已开启了debug_console_enabled，好像并不会因为pod增加而增加？\n\n[root@localhost hff]# systemd-cgtop | grep kata\n/kata_overhead                                                                                                                -      -     2.4m        -        -\n/kubepods/podfa152857-05d1-44fc-9cdc-d448b2c98941/kata_f40286f09e1ef5de468d894f1519c7ca6d30962653e7dce8daf90681802a0dde       7      -   167.8m        -        -\n/system.slice/kata-monitor.service                                                                                            1      -    22.2m        -        -\n\n\n1\n2\n3\n4\n\n\n按上述开启 debug log设置后\n\n[root@localhost hff]# systemd-cgtop | grep kata\n/kata_overhead                                                                                                                -      -     2.4m        -        -\n/kubepods/podfa152857-05d1-44fc-9cdc-d448b2c98941/kata_f40286f09e1ef5de468d894f1519c7ca6d30962653e7dce8daf90681802a0dde       7      -   166.6m        -        -\n/system.slice/kata-monitor.service                                                                                            1      -    21.8m        -        -\n\n\n1\n2\n3\n4\n\n\ndmesg日志\n\n[root@localhost hff]# dmesg | grep kata\n[2056734.849647] containerd-shim cpuset=kata_5051ee8a1c623152246de3245c514de818127663500f71c01ae4f2952dbdc73a mems_allowed=0\n[2056734.849679] task in /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a/kata_5051ee8a1c623152246de3245c514de818127663500f71c01ae4f2952dbdc73a killed as a result of limit of /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a\n[2056734.849690] memory cgroup stats for /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a/kata_5051ee8a1c623152246de3245c514de818127663500f71c01ae4f2952dbdc73a: cache:188900kb rss:15900kb rss_huge:0kb mapped_file:188876kb swap:0kb inactive_anon:188372kb active_anon:16428kb inactive_file:0kb active_file:0kb unevictable:0kb\n[2056751.353176] pool cpuset=kata_d888b88f19234d8148f43414242b99ec4de2d25e881d0453a920622da946c2e1 mems_allowed=0\n[2056751.353223] task in /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a/kata_d888b88f19234d8148f43414242b99ec4de2d25e881d0453a920622da946c2e1 killed as a result of limit of /kubepods/burstable/podf4bff02f-469b-4fbb-8152-5daafbe2cb3a\n\n\n\n1\n2\n3\n4\n5\n6\n7\n',charsets:{cjk:!0}},{title:"开启硬件虚拟化",frontmatter:{title:"开启硬件虚拟化",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/6f3d25/",categories:["技术杂谈","虚拟化"],tags:[null],titleTag:"原创",readingShow:"top",description:"[TOC]",meta:[{name:"twitter:title",content:"开启硬件虚拟化"},{name:"twitter:description",content:"[TOC]"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/01.%E5%BC%80%E5%90%AF%E7%A1%AC%E4%BB%B6%E8%99%9A%E6%8B%9F%E5%8C%96.html"},{property:"og:type",content:"article"},{property:"og:title",content:"开启硬件虚拟化"},{property:"og:description",content:"[TOC]"},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/01.%E5%BC%80%E5%90%AF%E7%A1%AC%E4%BB%B6%E8%99%9A%E6%8B%9F%E5%8C%96.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"开启硬件虚拟化"},{itemprop:"description",content:"[TOC]"}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/01.%E5%BC%80%E5%90%AF%E7%A1%AC%E4%BB%B6%E8%99%9A%E6%8B%9F%E5%8C%96.html",relativePath:"01.技术杂谈/07.虚拟化/01.开启硬件虚拟化.md",key:"v-4a20ad90",path:"/pages/6f3d25/",headers:[{level:2,title:"1.BIOS 启用虚拟化",slug:"_1-bios-启用虚拟化",normalizedTitle:"1.bios 启用虚拟化",charIndex:22},{level:2,title:"2.加载内核模块",slug:"_2-加载内核模块",normalizedTitle:"2.加载内核模块",charIndex:69},{level:2,title:"3.IOMMU开启：",slug:"_3-iommu开启",normalizedTitle:"3.iommu开启：",charIndex:123},{level:2,title:'4.egrep --color -i "svm|vmx" /proc/cpuinfo',slug:"_4-egrep-color-i-svm-vmx-proc-cpuinfo",normalizedTitle:"4.egrep --color -i &quot;svm|vmx&quot; /proc/cpuinfo",charIndex:null}],headersStr:'1.BIOS 启用虚拟化 2.加载内核模块 3.IOMMU开启： 4.egrep --color -i "svm|vmx" /proc/cpuinfo',content:'[TOC]\n\n\n# 开启硬件虚拟化\n\n\n# 1.BIOS 启用虚拟化\n\n设置bios中的硬件支持VT-x，即CPU支持的虚拟化；\n\n\n# 2.加载内核模块\n\nmodprobe kvm-intel modprobe vhost-vsock\n\n\n# 3.IOMMU开启：\n\n判断是否amd/intel: ls /sys/firmware/ | grep efi\n\n1 修改/etc/default/grub, 调整GRUB_CMDLINE_LINUX内容\n\n * amd_iommu：\n\n> GRUB_CMDLINE_LINUX="crashkernel=auto rhgb quiet amd_iommu=on iommu=pt"\n\n * intel_iommu：\n\n> GRUB_CMDLINE_LINUX="crashkernel=auto rhgb quiet intel_iommu=on iommu=pt"\n\n2 重新创建引导\n\n * 如果服务器是UEFI启动\n\n> grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg\n\n * 普通LEGACY模式启动\n\n> grub2-mkconfig -o /boot/grub2/grub.cfg\n\n3 reboot\n\nIOMMU关闭：\n\n1 修改/etc/default/grub，删除iommu配置\n\n2 重新创建引导同上\n\n3 reboot\n\n\n# 4.egrep --color -i "svm|vmx" /proc/cpuinfo\n\n\n# 检查虚拟化\n\n检查是否虚拟机：\n\n> systemd-detect-virt egrep --color -i "svm|vmx" /proc/cpuinfo\n\n判断当前环境所使用的虚拟技术：\n\n> virt-what\n\n检测 Linux 底层的虚拟化类型:\n\n> dmidecode -s system-manufacturer virsh vcpuinfo --domain hfftest',normalizedContent:'[toc]\n\n\n# 开启硬件虚拟化\n\n\n# 1.bios 启用虚拟化\n\n设置bios中的硬件支持vt-x，即cpu支持的虚拟化；\n\n\n# 2.加载内核模块\n\nmodprobe kvm-intel modprobe vhost-vsock\n\n\n# 3.iommu开启：\n\n判断是否amd/intel: ls /sys/firmware/ | grep efi\n\n1 修改/etc/default/grub, 调整grub_cmdline_linux内容\n\n * amd_iommu：\n\n> grub_cmdline_linux="crashkernel=auto rhgb quiet amd_iommu=on iommu=pt"\n\n * intel_iommu：\n\n> grub_cmdline_linux="crashkernel=auto rhgb quiet intel_iommu=on iommu=pt"\n\n2 重新创建引导\n\n * 如果服务器是uefi启动\n\n> grub2-mkconfig -o /boot/efi/efi/centos/grub.cfg\n\n * 普通legacy模式启动\n\n> grub2-mkconfig -o /boot/grub2/grub.cfg\n\n3 reboot\n\niommu关闭：\n\n1 修改/etc/default/grub，删除iommu配置\n\n2 重新创建引导同上\n\n3 reboot\n\n\n# 4.egrep --color -i "svm|vmx" /proc/cpuinfo\n\n\n# 检查虚拟化\n\n检查是否虚拟机：\n\n> systemd-detect-virt egrep --color -i "svm|vmx" /proc/cpuinfo\n\n判断当前环境所使用的虚拟技术：\n\n> virt-what\n\n检测 linux 底层的虚拟化类型:\n\n> dmidecode -s system-manufacturer virsh vcpuinfo --domain hfftest',charsets:{cjk:!0}},{title:"虚拟化基础概念",frontmatter:{title:"虚拟化基础概念",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/697e48/",categories:["技术杂谈","虚拟化"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"虚拟化基础概念"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/02.%E8%99%9A%E6%8B%9F%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html"},{property:"og:type",content:"article"},{property:"og:title",content:"虚拟化基础概念"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/02.%E8%99%9A%E6%8B%9F%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"虚拟化基础概念"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/02.%E8%99%9A%E6%8B%9F%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html",relativePath:"01.技术杂谈/07.虚拟化/02.虚拟化基础概念.md",key:"v-2e18135a",path:"/pages/697e48/",headersStr:null,content:'[TOC]\n\n\n# 概念\n\n * KVM：Kernel-Based Virtual Machine 基于内核的虚拟机；只负责CPU和内存的虚拟化\n\n * qemu-kvm：kvm用户空间管理工具；\n\n * libvirt：管理kvm虚拟机的软件；\n\n * QEMU： QEMU是一个独立的虚拟化解决方案，并不依赖KVM（它本身自己可以做CPU和内存的模拟，只不过效率较低），而KVM是另一套虚拟化解决方案，对CPU进行虚拟效率较高（采用了硬件辅助虚拟化），但本身不提供其他设备的虚拟化，借用了QEMU的代码进行了定制，所以KVM方案一定要依赖QEMU\n\n * QEMU-KVM：\n   \n   1.提供对cpu，内存（KVM负责），IO设备（QEMU负责）的虚拟\n   \n   2.对各种虚拟设备的创建，调用进行管理（QEMU负责）\n\n * libvirt： 只能简单的认为是个虚拟机管理工具，仍然需要通过用户空间QEMU来与KVM进行交互。 一些常用的虚拟机管理工具如virsh（类似vim编辑器），virt-install，virt-manager等和云计算框架平台（如OpenStack，OpenNebula，Eucalyptus等）都在底层使用libvirt提供的应用程序接口。\n\n * Hyper-V：\n\n * xen:\n\n * VSOCK：软件包vsock提供了对Linux VM套接字（ AF_VSOCK ）的访问，以在虚拟机管理程序与其虚拟机之间进行通信。\n\n * Hypervisor: 借助虚拟化技术，用户能以单个物理硬件系统为基础创建多个模拟环境或专用资源。称为"Hypervisor" （虚拟机监控程序）\n\n * 大页内存：增加内存一页的大小，默认是开启的,提高虚拟机内存的io性能 cat /sys/kernel/mm/transparent_hugepage/enabled\n\n * KSM KSM内存合并,相同的页合并：ps -aux | grep ksm | grep -v grep\n\n * noop： 系统内核io的调度算法，如果是ssd硬盘需要使用的是noop内核调度； cat /sys/block/sda/queue/scheduler\n\n\n# 虚拟化有两种不同类型的虚拟机监控程序:\n\n（1）. 运行与物理机之上；物理机 --\x3e hypervisor 例如：kvm、Microsoft Hyper-V 和 VMware vSphere （2）. 运行与操作系统之上；物理机 --\x3e OS --\x3e Hypervisor 例如：VMware Workstation 和 Oracle VirtualBox\n\n\n# 缓冲(cache)',normalizedContent:'[toc]\n\n\n# 概念\n\n * kvm：kernel-based virtual machine 基于内核的虚拟机；只负责cpu和内存的虚拟化\n\n * qemu-kvm：kvm用户空间管理工具；\n\n * libvirt：管理kvm虚拟机的软件；\n\n * qemu： qemu是一个独立的虚拟化解决方案，并不依赖kvm（它本身自己可以做cpu和内存的模拟，只不过效率较低），而kvm是另一套虚拟化解决方案，对cpu进行虚拟效率较高（采用了硬件辅助虚拟化），但本身不提供其他设备的虚拟化，借用了qemu的代码进行了定制，所以kvm方案一定要依赖qemu\n\n * qemu-kvm：\n   \n   1.提供对cpu，内存（kvm负责），io设备（qemu负责）的虚拟\n   \n   2.对各种虚拟设备的创建，调用进行管理（qemu负责）\n\n * libvirt： 只能简单的认为是个虚拟机管理工具，仍然需要通过用户空间qemu来与kvm进行交互。 一些常用的虚拟机管理工具如virsh（类似vim编辑器），virt-install，virt-manager等和云计算框架平台（如openstack，opennebula，eucalyptus等）都在底层使用libvirt提供的应用程序接口。\n\n * hyper-v：\n\n * xen:\n\n * vsock：软件包vsock提供了对linux vm套接字（ af_vsock ）的访问，以在虚拟机管理程序与其虚拟机之间进行通信。\n\n * hypervisor: 借助虚拟化技术，用户能以单个物理硬件系统为基础创建多个模拟环境或专用资源。称为"hypervisor" （虚拟机监控程序）\n\n * 大页内存：增加内存一页的大小，默认是开启的,提高虚拟机内存的io性能 cat /sys/kernel/mm/transparent_hugepage/enabled\n\n * ksm ksm内存合并,相同的页合并：ps -aux | grep ksm | grep -v grep\n\n * noop： 系统内核io的调度算法，如果是ssd硬盘需要使用的是noop内核调度； cat /sys/block/sda/queue/scheduler\n\n\n# 虚拟化有两种不同类型的虚拟机监控程序:\n\n（1）. 运行与物理机之上；物理机 --\x3e hypervisor 例如：kvm、microsoft hyper-v 和 vmware vsphere （2）. 运行与操作系统之上；物理机 --\x3e os --\x3e hypervisor 例如：vmware workstation 和 oracle virtualbox\n\n\n# 缓冲(cache)',charsets:{cjk:!0}},{title:"centos使用kvm创建虚拟机",frontmatter:{title:"centos使用kvm创建虚拟机",date:"2022-07-27T14:56:49.000Z",permalink:"/pages/33705b/",categories:["技术杂谈","虚拟化"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"centos使用kvm创建虚拟机"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/03.centos%E4%BD%BF%E7%94%A8kvm%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.html"},{property:"og:type",content:"article"},{property:"og:title",content:"centos使用kvm创建虚拟机"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/03.centos%E4%BD%BF%E7%94%A8kvm%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T14:56:49.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"centos使用kvm创建虚拟机"},{itemprop:"description",content:""}]},regularPath:"/01.%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/07.%E8%99%9A%E6%8B%9F%E5%8C%96/03.centos%E4%BD%BF%E7%94%A8kvm%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.html",relativePath:"01.技术杂谈/07.虚拟化/03.centos使用kvm创建虚拟机.md",key:"v-080925d0",path:"/pages/33705b/",headers:[{level:2,title:"安装完KVM之后，需要配置一下网卡，增加一个桥接网卡：",slug:"安装完kvm之后-需要配置一下网卡-增加一个桥接网卡",normalizedTitle:"安装完kvm之后，需要配置一下网卡，增加一个桥接网卡：",charIndex:60},{level:2,title:"创建卷",slug:"创建卷",normalizedTitle:"创建卷",charIndex:939},{level:2,title:"准备一个操作系统的镜像文件",slug:"准备一个操作系统的镜像文件",normalizedTitle:"准备一个操作系统的镜像文件",charIndex:1254},{level:2,title:"虚拟机操作",slug:"虚拟机操作",normalizedTitle:"虚拟机操作",charIndex:2044},{level:2,title:"安装完成，配置固定IP",slug:"安装完成-配置固定ip",normalizedTitle:"安装完成，配置固定ip",charIndex:2602}],headersStr:"安装完KVM之后，需要配置一下网卡，增加一个桥接网卡： 创建卷 准备一个操作系统的镜像文件 虚拟机操作 安装完成，配置固定IP",content:"https://blog.csdn.net/dhRainer/article/details/83411555\n\n\n# 安装完KVM之后，需要配置一下网卡，增加一个桥接网卡：\n\ncd /etc/sysconfig/network-scripts/\ncp ifcfg-eno16777728 ifcfg-br0  # 拷贝当前的网卡文件\nvim ifcfg-eno16777728  # 修改文件内容如下\nTYPE=Ethernet\nBOOTPROTO=dhcp\nDEFROUTE=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777728\nDEVICE=eno16777728\nONBOOT=yes\nBRIDGE=br0\n\nvim ifcfg-br0  # 修改文件内容如下\nTYPE=Bridge\nBOOTPROTO=dhcp\nDEFROUTE=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_FAILURE_FATAL=no\nNAME=br0\nDEVICE=br0\nONBOOT=yes\n\nsystemctl restart network  # 重启服务\n\nsystemctl start libvirtd  # 启动libvirtd服务\n\nbrctl show  # 可以看到两个网卡\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 创建卷\n\ncd /root/hff/kvm\nqemu-img create -f qcow2    hfftest.qcow2  10G\nqemu-img info  hfftest.qcow2 \nimage: hfftest.qcow2\nfile format: qcow2\nvirtual size: 10G (10737418240 bytes)\ndisk size: 196K\ncluster_size: 65536\nFormat specific information:\n    compat: 1.1\n    lazy refcounts: false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 准备一个操作系统的镜像文件\n\na)命令行安装虚拟机\n\nvirt-install \\\n--virt-type=kvm \\\n--name=hfftest \\\n--vcpus=2 \\\n--memory=2048 \\\n--location=/hff/kvm/iso/CentOS-7-x86_64-Minimal-2009.iso \\\n--disk path=/hff/kvm/images/hfftest.qcow2,size=15,format=qcow2 \\\n--network bridge=virbr0 \\\n--graphics none \\\n--extra-args='console=ttyS0' \\\n--force\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 命令说明： --name 指定虚拟机的名称 --memory 指定分配给虚拟机的内存资源大小 maxmemory 指定可调节的最大内存资源大小，因为KVM支持热调整虚拟机的资源 --vcpus 指定分配给虚拟机的CPU核心数量 maxvcpus 指定可调节的最大CPU核心数量 --os-type 指定虚拟机安装的操作系统类型 --os-variant 指定系统的发行版本 --location 指定ISO镜像文件所在的路径，支持使用网络资源路径，也就是说可以使用URL --disk path 指定虚拟硬盘所存放的路径及名称，size 则是指定该硬盘的可用大小，单位是G --bridge 指定使用哪一个桥接网卡，也就是说使用桥接的网络模式 --graphics 指定是否开启图形 --console 定义终端的属性，target_type 则是定义终端的类型 --extra-args 定义终端额外的参数\n\n查询虚拟机所使用的vnc端口virsh vncdisplay centos\n\n\n# 虚拟机操作\n\n[root@localhost ~]# virsh console study01  # 进入指定的虚拟机，进入的时候还需要按一下回车\n[root@localhost ~]# virsh start study01  # 启动虚拟机\n[root@localhost ~]# virsh shutdown study01  # 关闭虚拟机\n[root@localhost ~]# virsh destroy study01  # 强制停止虚拟机\n[root@localhost ~]# virsh undefine study01  # 彻底销毁虚拟机，会删除虚拟机配置文件，但不会删除虚拟磁盘\n[root@localhost ~]# virsh autostart study01  # 设置宿主机开机时该虚拟机也开机\n[root@localhost ~]# virsh autostart --disable study01  # 解除开机启动\n[root@localhost ~]# virsh suspend study01 # 挂起虚拟机\n[root@localhost ~]# virsh resume study01 # 恢复挂起的虚拟机\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 安装完成，配置固定IP\n\n[root@localhost network-scripts]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 52:54:00:40:a4:ef brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.151/24 brd 192.168.122.255 scope global noprefixroute dynamic ens3\n       valid_lft 3598sec preferred_lft 3598sec\n    inet6 fe80::f5ed:53d0:e383:59e6/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n[root@localhost network-scripts]#\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",normalizedContent:"https://blog.csdn.net/dhrainer/article/details/83411555\n\n\n# 安装完kvm之后，需要配置一下网卡，增加一个桥接网卡：\n\ncd /etc/sysconfig/network-scripts/\ncp ifcfg-eno16777728 ifcfg-br0  # 拷贝当前的网卡文件\nvim ifcfg-eno16777728  # 修改文件内容如下\ntype=ethernet\nbootproto=dhcp\ndefroute=yes\npeerdns=yes\npeerroutes=yes\nipv4_failure_fatal=no\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_peerdns=yes\nipv6_peerroutes=yes\nipv6_failure_fatal=no\nname=eno16777728\ndevice=eno16777728\nonboot=yes\nbridge=br0\n\nvim ifcfg-br0  # 修改文件内容如下\ntype=bridge\nbootproto=dhcp\ndefroute=yes\npeerdns=yes\npeerroutes=yes\nipv4_failure_fatal=no\nipv6init=yes\nipv6_autoconf=yes\nipv6_defroute=yes\nipv6_peerdns=yes\nipv6_peerroutes=yes\nipv6_failure_fatal=no\nname=br0\ndevice=br0\nonboot=yes\n\nsystemctl restart network  # 重启服务\n\nsystemctl start libvirtd  # 启动libvirtd服务\n\nbrctl show  # 可以看到两个网卡\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 创建卷\n\ncd /root/hff/kvm\nqemu-img create -f qcow2    hfftest.qcow2  10g\nqemu-img info  hfftest.qcow2 \nimage: hfftest.qcow2\nfile format: qcow2\nvirtual size: 10g (10737418240 bytes)\ndisk size: 196k\ncluster_size: 65536\nformat specific information:\n    compat: 1.1\n    lazy refcounts: false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 准备一个操作系统的镜像文件\n\na)命令行安装虚拟机\n\nvirt-install \\\n--virt-type=kvm \\\n--name=hfftest \\\n--vcpus=2 \\\n--memory=2048 \\\n--location=/hff/kvm/iso/centos-7-x86_64-minimal-2009.iso \\\n--disk path=/hff/kvm/images/hfftest.qcow2,size=15,format=qcow2 \\\n--network bridge=virbr0 \\\n--graphics none \\\n--extra-args='console=ttys0' \\\n--force\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n> 命令说明： --name 指定虚拟机的名称 --memory 指定分配给虚拟机的内存资源大小 maxmemory 指定可调节的最大内存资源大小，因为kvm支持热调整虚拟机的资源 --vcpus 指定分配给虚拟机的cpu核心数量 maxvcpus 指定可调节的最大cpu核心数量 --os-type 指定虚拟机安装的操作系统类型 --os-variant 指定系统的发行版本 --location 指定iso镜像文件所在的路径，支持使用网络资源路径，也就是说可以使用url --disk path 指定虚拟硬盘所存放的路径及名称，size 则是指定该硬盘的可用大小，单位是g --bridge 指定使用哪一个桥接网卡，也就是说使用桥接的网络模式 --graphics 指定是否开启图形 --console 定义终端的属性，target_type 则是定义终端的类型 --extra-args 定义终端额外的参数\n\n查询虚拟机所使用的vnc端口virsh vncdisplay centos\n\n\n# 虚拟机操作\n\n[root@localhost ~]# virsh console study01  # 进入指定的虚拟机，进入的时候还需要按一下回车\n[root@localhost ~]# virsh start study01  # 启动虚拟机\n[root@localhost ~]# virsh shutdown study01  # 关闭虚拟机\n[root@localhost ~]# virsh destroy study01  # 强制停止虚拟机\n[root@localhost ~]# virsh undefine study01  # 彻底销毁虚拟机，会删除虚拟机配置文件，但不会删除虚拟磁盘\n[root@localhost ~]# virsh autostart study01  # 设置宿主机开机时该虚拟机也开机\n[root@localhost ~]# virsh autostart --disable study01  # 解除开机启动\n[root@localhost ~]# virsh suspend study01 # 挂起虚拟机\n[root@localhost ~]# virsh resume study01 # 恢复挂起的虚拟机\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 安装完成，配置固定ip\n\n[root@localhost network-scripts]# ip a\n1: lo: <loopback,up,lower_up> mtu 65536 qdisc noqueue state unknown group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: ens3: <broadcast,multicast,up,lower_up> mtu 1500 qdisc pfifo_fast state up group default qlen 1000\n    link/ether 52:54:00:40:a4:ef brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.151/24 brd 192.168.122.255 scope global noprefixroute dynamic ens3\n       valid_lft 3598sec preferred_lft 3598sec\n    inet6 fe80::f5ed:53d0:e383:59e6/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n[root@localhost network-scripts]#\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n",charsets:{cjk:!0}},{title:"养桃花销",frontmatter:{title:"养桃花销",date:"2019-12-25T14:27:01.000Z",permalink:"/pages/ythx",categories:["桃子"],tags:["桃子"],author:{name:"fangfenghuang",link:"https://github.com/fangfenghuang"},titleTag:"原创",readingShow:"top",description:"|日期|物品|总价|备注|\n|----|----|--------|---------|\n|2019/7/5|桃子|1700",meta:[{name:"twitter:title",content:"养桃花销"},{name:"twitter:description",content:"|日期|物品|总价|备注|\n|----|----|--------|---------|\n|2019/7/5|桃子|1700"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/02.%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%86%99/01.%E5%85%BB%E6%A1%83%E6%97%A5%E8%AE%B0/01.%E5%85%BB%E6%A1%83%E8%8A%B1%E9%94%80.html"},{property:"og:type",content:"article"},{property:"og:title",content:"养桃花销"},{property:"og:description",content:"|日期|物品|总价|备注|\n|----|----|--------|---------|\n|2019/7/5|桃子|1700"},{property:"og:url",content:"https://fangfenghuang.github.io/02.%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%86%99/01.%E5%85%BB%E6%A1%83%E6%97%A5%E8%AE%B0/01.%E5%85%BB%E6%A1%83%E8%8A%B1%E9%94%80.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2019-12-25T14:27:01.000Z"},{property:"article:tag",content:"桃子"},{itemprop:"name",content:"养桃花销"},{itemprop:"description",content:"|日期|物品|总价|备注|\n|----|----|--------|---------|\n|2019/7/5|桃子|1700"}]},regularPath:"/02.%E7%94%9F%E6%B4%BB%E9%9A%8F%E5%86%99/01.%E5%85%BB%E6%A1%83%E6%97%A5%E8%AE%B0/01.%E5%85%BB%E6%A1%83%E8%8A%B1%E9%94%80.html",relativePath:"02.生活随写/01.养桃日记/01.养桃花销.md",key:"v-51e55098",path:"/pages/ythx/",headers:[{level:2,title:"猫粮明细",slug:"猫粮明细",normalizedTitle:"猫粮明细",charIndex:62}],headersStr:"猫粮明细",content:"# 养桃花销\n\n日期         物品   总价     备注\n2019/7/5   桃子   1700   \n\n\n# 猫粮明细\n\n日期     物品   总价   备注\n2019   猫粮        \n2020   猫粮        \n2021   猫粮        ",normalizedContent:"# 养桃花销\n\n日期         物品   总价     备注\n2019/7/5   桃子   1700   \n\n\n# 猫粮明细\n\n日期     物品   总价   备注\n2019   猫粮        \n2020   猫粮        \n2021   猫粮        ",charsets:{cjk:!0}},{title:"关于",frontmatter:{title:"关于",date:"2019-12-25T14:27:01.000Z",permalink:"/about/",sidebar:!1,article:!1,author:{name:"fangfenghuang",link:"https://github.com/fangfenghuang"},titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"关于"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/03.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E.html"},{property:"og:type",content:"article"},{property:"og:title",content:"关于"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/03.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2019-12-25T14:27:01.000Z"},{itemprop:"name",content:"关于"},{itemprop:"description",content:""}]},regularPath:"/03.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E.html",relativePath:"03.关于/01.关于.md",key:"v-4ed9e4ca",path:"/about/",headers:[{level:2,title:"关于本站",slug:"关于本站",normalizedTitle:"关于本站",charIndex:2},{level:2,title:"关于我",slug:"关于我",normalizedTitle:"关于我",charIndex:11}],headersStr:"关于本站 关于我",content:"# 关于本站\n\n\n# 关于我",normalizedContent:"# 关于本站\n\n\n# 关于我",charsets:{cjk:!0},lastUpdated:"2022/07/26, 10:59:19",lastUpdatedTimestamp:1658804359e3},{title:"书单",frontmatter:{title:"书单",permalink:"/books/",date:"2020-04-19T11:33:04.000Z",article:!1,author:{name:"fangfenghuang",link:"https://github.com/fangfenghuang"},titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"书单"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/04.%E4%B9%A6%E7%B1%8D/01.%E4%B9%A6%E5%8D%95.html"},{property:"og:type",content:"article"},{property:"og:title",content:"书单"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/04.%E4%B9%A6%E7%B1%8D/01.%E4%B9%A6%E5%8D%95.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2020-04-19T11:33:04.000Z"},{itemprop:"name",content:"书单"},{itemprop:"description",content:""}]},regularPath:"/04.%E4%B9%A6%E7%B1%8D/01.%E4%B9%A6%E5%8D%95.html",relativePath:"04.书籍/01.书单.md",key:"v-50e59150",path:"/books/",headersStr:null,content:"todo",normalizedContent:"todo",charsets:{}},{title:"电子书",frontmatter:{title:"电子书",date:"2022-07-27T15:12:21.000Z",permalink:"/pages/dianzishu/",categories:["书籍"],tags:[null],titleTag:"原创",readingShow:"top",description:"",meta:[{name:"twitter:title",content:"电子书"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/04.%E4%B9%A6%E7%B1%8D/02.%E7%94%B5%E5%AD%90%E4%B9%A6.html"},{property:"og:type",content:"article"},{property:"og:title",content:"电子书"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/04.%E4%B9%A6%E7%B1%8D/02.%E7%94%B5%E5%AD%90%E4%B9%A6.html"},{property:"og:site_name",content:"fangfenghuang"},{property:"article:published_time",content:"2022-07-27T15:12:21.000Z"},{property:"article:tag",content:null},{itemprop:"name",content:"电子书"},{itemprop:"description",content:""}]},regularPath:"/04.%E4%B9%A6%E7%B1%8D/02.%E7%94%B5%E5%AD%90%E4%B9%A6.html",relativePath:"04.书籍/02.电子书.md",key:"v-4c375d97",path:"/pages/dianzishu/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1,readingShow:"top",description:"",meta:[{name:"twitter:title",content:"归档"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/@pages/archivesPage.html"},{property:"og:type",content:"article"},{property:"og:title",content:"归档"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/@pages/archivesPage.html"},{property:"og:site_name",content:"fangfenghuang"},{itemprop:"name",content:"归档"},{itemprop:"description",content:""}]},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-994f98d2",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/21, 21:34:00",lastUpdatedTimestamp:165581844e4},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1,readingShow:"top",description:"",meta:[{name:"twitter:title",content:"分类"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/@pages/categoriesPage.html"},{property:"og:type",content:"article"},{property:"og:title",content:"分类"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/@pages/categoriesPage.html"},{property:"og:site_name",content:"fangfenghuang"},{itemprop:"name",content:"分类"},{itemprop:"description",content:""}]},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-ea545412",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/21, 21:34:00",lastUpdatedTimestamp:165581844e4},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1,readingShow:"top",description:"",meta:[{name:"twitter:title",content:"标签"},{name:"twitter:description",content:""},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/@pages/tagsPage.html"},{property:"og:type",content:"article"},{property:"og:title",content:"标签"},{property:"og:description",content:""},{property:"og:url",content:"https://fangfenghuang.github.io/@pages/tagsPage.html"},{property:"og:site_name",content:"fangfenghuang"},{itemprop:"name",content:"标签"},{itemprop:"description",content:""}]},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-1d3069d2",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/21, 21:34:00",lastUpdatedTimestamp:165581844e4},{title:"Home",frontmatter:{home:!0,heroText:"hff's blog",tagline:"天道酬勤",bannerBg:"/img/bg.jpg",features:[{title:"技术杂谈",details:"工作、学习",link:"/tech/"},{title:"生活随写",details:"个人、生活",link:"/life/"}],readingShow:"top",description:"https://fangfenghuang.github.io/",meta:[{name:"twitter:title",content:"hff"},{name:"twitter:description",content:"https://fangfenghuang.github.io/"},{name:"twitter:card",content:"summary"},{name:"twitter:url",content:"https://fangfenghuang.github.io/"},{property:"og:type",content:"website"},{property:"og:title",content:"hff"},{property:"og:description",content:"https://fangfenghuang.github.io/"},{property:"og:url",content:"https://fangfenghuang.github.io/"},{property:"og:site_name",content:"fangfenghuang"},{itemprop:"name",content:"hff"},{itemprop:"description",content:"https://fangfenghuang.github.io/"}]},regularPath:"/",relativePath:"index.md",key:"v-0c8b6730",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/17, 01:47:45",lastUpdatedTimestamp:1657993665e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"学习",link:"/tech/"},{text:"生活",link:"/life/",items:[{text:"养桃日记",link:"/pages/ythx/"}]},{text:"关于",link:"/about/"},{text:"索引",link:"/categories/",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"},{items:[{text:"github",link:"https://github.com/fangfenghuang"},{text:"scdn",link:"https://blog.csdn.net/qq_26572567"},{text:"知乎",link:"https://www.zhihu.com/people/huangfangfeng-20"},{text:"linkin",link:"https://www.linkedin.com/"}]}]},{text:"书籍",link:"/books/",items:[{items:[{text:"书单",link:"/books/"},{text:"电子书",link:"/pages/dianzishu/"}]}]}],sidebarDepth:2,logo:"/img/logo.png",repo:"https://github.com/fangfenghuang/fangfenghuang.github.io",searchMaxSuggestions:10,lastUpdated:"上次更新",editLinks:!1,sidebarHoverTriggerOpen:!0,searchPlaceholder:"按下 𝑺 搜索",extendFrontmatter:{titleTag:"原创"},pageButton:!1,sidebar:{"/00.目录页/":[["01.技术杂谈.md","技术杂谈","/tech/","原创"],["02.生活随写.md","生活随写","/life/","原创"]],catalogue:{"技术杂谈":"/tech/","生活随写":"/life/"},"/01.技术杂谈/":[{title:"常用总结",collapsable:!0,children:[["01.常用总结/01.一些常用配置.md","一些常用配置","/pages/yxcypz/","原创"],["01.常用总结/02.一些工具网站.md","一些工具网站","/pages/yxgjwz/","原创"],["01.常用总结/03.一些学习网站.md","一些工具网站","/pages/yxxxwz/","原创"],["01.常用总结/04.一些工具安装.md","一些工具安装","/pages/yxgjaz/","原创"]]},{title:"踩坑记录",collapsable:!0,children:[["02.踩坑记录/01.2022踩坑记录.md","2022踩坑记录","/pages/2022ckjl/","原创"]]},{title:"kubernetes",collapsable:!0,children:[["03.kubernetes/01.k8s基础.md","k8s基础","/pages/k8sjichu/","原创"],["03.kubernetes/02.k8s存储.md","k8s存储","/pages/92d322/","原创"],["03.kubernetes/03.k8s网络.md","k8s网络","/pages/9e8904/","原创"],["03.kubernetes/04.pod cgroup和资源限制.md","pod cgroup和资源限制","/pages/1408c2/","原创"],["03.kubernetes/05.流量限制.md","流量限制","/pages/d395da/","原创"],["03.kubernetes/06.网络策略calico.md","网络策略calico","/pages/9594e3/","原创"],["03.kubernetes/07.grafana和promuthues.md","grafana和promuthues","/pages/f1f52d/","原创"],["03.kubernetes/08.etcd节点down机数据恢复.md","etcd节点down机数据恢复","/pages/43f072/","原创"],["03.kubernetes/09.ceph.md","ceph","/pages/070d33/","原创"],["03.kubernetes/10.chrony.md","chrony","/pages/bfddf3/","原创"],["03.kubernetes/11.crd operator.md","crd operator","/pages/5d5fcc/","原创"],["03.kubernetes/12.cri之containerd shimv2.md","cri之containerd shimv2","/pages/fe3b2b/","原创"],["03.kubernetes/13.harbor.md","harbor","/pages/c3cbc2/","原创"],["03.kubernetes/14.helm chart.md","helm chart","/pages/b685a0/","原创"],["03.kubernetes/15.Loongnix mips64.md","Loongnix mips64","/pages/1bc186/","原创"],["03.kubernetes/16.nvidia-device-plugin.md","nvidia-device-plugin","/pages/717c4b/","原创"],["03.kubernetes/17.openebs-lvm-localpv.md","openebs-lvm-localpv","/pages/4be786/","原创"],{title:"docker",collapsable:!0,children:[["03.kubernetes/300.docker/00.docker基础.md","docker基础","/pages/f23c30/","原创"],["03.kubernetes/300.docker/01.buildx多平台构建.md","buildx多平台构建","/pages/f7bcff/","原创"],["03.kubernetes/300.docker/02.dockerfile改源.md","dockerfile改源","/pages/4b6bd5/","原创"],["03.kubernetes/300.docker/03.docker镜像.md","docker镜像","/pages/74eaf6/","原创"],["03.kubernetes/300.docker/04.docker镜像优化.md","docker镜像优化","/pages/be8ffb/","原创"],["03.kubernetes/300.docker/05.在Docker中设置时区.md","在Docker中设置时区","/pages/e29999/","原创"]]}]},{title:"golang",collapsable:!0,children:[["04.golang/01.常用计算.md","常用计算","/pages/7a288b/","原创"],["04.golang/02.golang面试问题.md","golang面试问题","/pages/b587ce/","原创"],["04.golang/03.go-指针.md","go-指针","/pages/88c22b/","原创"],["04.golang/04.go embed.md","go embed","/pages/ebb478/","原创"],["04.golang/05.go-封装继承和多态.md","go-封装继承和多态","/pages/5848e9/","原创"],["04.golang/06.go-文件操作.md","go-文件操作","/pages/b270a4/","原创"],["04.golang/07.go-json.md","go-json","/pages/417389/","原创"],["04.golang/08.go-slice切片.md","go-slice切片","/pages/1d629a/","原创"]]},{title:"python",collapsable:!0,children:[]},{title:"kata-containers",collapsable:!0,children:[{title:"kata初识",collapsable:!0,children:[["06.kata-containers/01.kata初识/01.kata基本原理与架构.md","kata基本原理与架构","/pages/276ee1/","原创"],["06.kata-containers/01.kata初识/02.kata网络和存储文件系统分析.md","kata网络和存储文件系统分析","/pages/25c61d/","原创"],["06.kata-containers/01.kata初识/03.kata cgroup及资源限制.md","kata cgroup及资源限制","/pages/d4921b/","原创"],["06.kata-containers/01.kata初识/04.guest kernel和guestos.md","guest kernel和guestos","/pages/e5081b/","原创"],["06.kata-containers/01.kata初识/05.kata-monitor监控.md","kata-monitor监控","/pages/4df25b/","原创"],["06.kata-containers/01.kata初识/06.kata使用限制.md","kata使用限制","/pages/f1a570/","原创"],["06.kata-containers/01.kata初识/07.其他特性.md","其他特性","/pages/2dc340/","原创"],["06.kata-containers/01.kata初识/08.一个kata容器的创建示例.md","一个kata容器的创建示例","/pages/cda215/","原创"]]},{title:"kata部署",collapsable:!0,children:[["06.kata-containers/02.kata部署/01.kata-deploy部署、卸载与升级.md","kata-deploy部署、卸载与升级","/pages/84f980/","原创"],["06.kata-containers/02.kata部署/02.kata-deploy分析.md","kata-deploy分析","/pages/69d5c3/","原创"]]},{title:"kata应用",collapsable:!0,children:[["06.kata-containers/04.kata应用/01.常用命令.md","常用命令","/pages/3cb03e/","原创"],["06.kata-containers/04.kata应用/02.kata使用问题汇总.md","kata使用问题汇总","/pages/37753f/","原创"],["06.kata-containers/04.kata应用/03.kata相关配置及路径.md","kata相关配置及路径","/pages/821097/","原创"],["06.kata-containers/04.kata应用/04.kata debug与日志.md","kata debug与日志","/pages/7393ee/","原创"]]}]},{title:"虚拟化",collapsable:!0,children:[["07.虚拟化/01.开启硬件虚拟化.md","开启硬件虚拟化","/pages/6f3d25/","原创"],["07.虚拟化/02.虚拟化基础概念.md","虚拟化基础概念","/pages/697e48/","原创"],["07.虚拟化/03.centos使用kvm创建虚拟机.md","centos使用kvm创建虚拟机","/pages/33705b/","原创"]]},{title:"网络",collapsable:!0,children:[]}],"/02.生活随写/":[{title:"养桃日记",collapsable:!0,children:[["01.养桃日记/01.养桃花销.md","养桃花销","/pages/ythx","原创"]]}],"/03.关于/":[["01.关于.md","关于","/about/","原创"]],"/04.书籍/":[["01.书单.md","书单","/books/","原创"],["02.电子书.md","电子书","/pages/dianzishu/","原创"]]},author:{name:"hff",link:"https://github.com/fangfenghuang"},blogger:{avatar:"/img/bg.jpeg",name:"hff",slogan:"一个有思想的程序猿"},social:{icons:[{iconClass:"icon-github",title:"GitHub",link:"https://github.com/fangfenghuang"},{iconClass:"icon-youjian",title:"发邮件",link:"mailto:15068704759@163.com"},{iconClass:"icon-rss",title:"linkedin",link:"https://www.linkedin.com/in/huang-fangfeng-60887981/"}]},htmlModules:{homeSidebarB:'<div style="padding: 0.95rem">\n        <p style="\n          color: var(--textColor);\n          opacity: 0.9;\n          font-size: 20px;\n          font-weight: bold;\n          margin: 0 0 8px 0;\n        ">微信</p>\n        <img src="/img/weixin.jpg"  style="width:100%;" />\n        <p>\n        联系方式:fangfeng_huang\n        </p>\n        </div>'},footer:{createYear:2022,copyrightInfo:'| <a rel="nofollow " target="_blank" href="https://github.com/fangfenghuang/fangfenghuang.GitHub.io">@fangfenghuang</a>'}}};var yc=t(94),_c=t(95),Ec=t(11);var xc={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:o}}=n;return!(e||!1===t||!0===o)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,o=e.frontmatter.sticky;return t&&o?t==o?Object(Ec.a)(n,e):t-o:t&&!o?-1:!t&&o?1:Object(Ec.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Ec.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let o=0,r=n.length;o<r;o++){const{frontmatter:{categories:r,tags:a}}=n[o];"array"===Object(Ec.n)(r)&&r.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[o]))}),"array"===Object(Ec.n)(a)&&a.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[o]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Kt.component(yc.default),Kt.component(_c.default);function wc(n){return n.toString().padStart(2,"0")}t(237);Kt.component("Badge",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,395))),Kt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,94))),Kt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,95)));t(238);var Cc,Ac,Bc,Tc,Pc=Object.defineProperty,Sc=Object.getOwnPropertySymbols,Oc=Object.prototype.hasOwnProperty,Ic=Object.prototype.propertyIsEnumerable,Dc=(n,e,t)=>e in n?Pc(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,zc=(n,e)=>{for(var t in e||(e={}))Oc.call(e,t)&&Dc(n,t,e[t]);if(Sc)for(var t of Sc(e))Ic.call(e,t)&&Dc(n,t,e[t]);return n},jc=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},qc=(n,e,t)=>(jc(n,e,"read from private field"),t?t.call(n):e.get(n)),Mc=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},$c=(n,e,t,o)=>(jc(n,e,"write to private field"),o?o.call(n,t):e.set(n,t),t);const Fc=class{constructor(n,e,t,o=!0){Mc(this,Cc,void 0),Mc(this,Ac,void 0),$c(this,Cc,{width:0,height:0});const{el:r,ctx:a}=Fc.initCanvas(n);this.el=r,this.ctx=a,$c(this,Ac,o),this.size={width:e||window.innerWidth,height:t||window.innerHeight}}get size(){return zc({},qc(this,Cc))}set size({width:n,height:e}){var t;if(qc(this,Cc).width===n&&qc(this,Cc).height===e)return;qc(this,Cc).width=n,qc(this,Cc).height=e;const o=null!=(t=qc(this,Ac)?window.devicePixelRatio:1)?t:1;this.el.width=Math.round(qc(this,Cc).width*o),this.el.height=Math.round(qc(this,Cc).height*o),this.el.style.width=qc(this,Cc).width+"px",this.el.style.height=qc(this,Cc).height+"px",qc(this,Ac)&&this.ctx.scale(o,o)}clear(){Fc.clearCanvas(this.ctx,zc({},qc(this,Cc)))}to(n){n.ctx.drawImage(this.el,0,0,qc(this,Cc).width,qc(this,Cc).height)}handleResize(n){this.size={width:window.innerWidth,height:window.innerHeight}}static setCanvasStyle(n,e,t){const o=n.style,{zIndex:r=0,opacity:a=1}=e;o.position="fixed",o.top="0",o.left="0",o.zIndex=r.toString(),o.width=(t?t.width:n.width).toString()+"px",o.height=(t?t.height:n.height).toString()+"px",1!==a&&(o.opacity=a.toString()),o.pointerEvents="none"}static initCanvas(n){n||(n=document.createElement("canvas"));const e=n.getContext("2d");return{el:n,ctx:e}}static createOffscreenCanvas(){return new Fc}static clearCanvas(n,e){const{width:t,height:o}=e;n.clearRect(0,0,t,o)}};let Rc=Fc;Cc=new WeakMap,Ac=new WeakMap;class Lc{constructor(n,e,t,o=!0,r=!0,a={zIndex:0,opacity:1}){Mc(this,Bc,void 0),Mc(this,Tc,void 0),$c(this,Bc,new Rc(n,e,t,o)),Rc.setCanvasStyle(qc(this,Bc).el,a,{width:e,height:t}),$c(this,Tc,r?new Rc(void 0,e,t,o):null)}get size(){return qc(this,Bc).size}draw(n){var e;const t=null!=(e=qc(this,Tc))?e:qc(this,Bc);t.clear(),n(t.ctx,zc({},t.size))}render(){qc(this,Tc)&&(qc(this,Bc).clear(),qc(this,Tc).to(qc(this,Bc)))}handleResize(n){qc(this,Bc).handleResize(n),qc(this,Tc)&&qc(this,Tc).handleResize(n)}clear(){qc(this,Bc).clear(),qc(this,Tc)&&qc(this,Tc).clear()}}Bc=new WeakMap,Tc=new WeakMap;var Nc,Uc=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},Vc=(n,e,t)=>(Uc(n,e,"read from private field"),t?t.call(n):e.get(n));class Kc{constructor(){var n,e,t,o;((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)})(this,Nc,void 0),n=this,e=Nc,t=new Map,Uc(n,e,"write to private field"),o?o.call(n,t):e.set(n,t)}add(n,e){var t;Vc(this,Nc).has(n)||Vc(this,Nc).set(n,new Set),null==(t=Vc(this,Nc).get(n))||t.add(e)}start(n){if(Vc(this,Nc).has(n))for(const e of Vc(this,Nc).get(n))window.addEventListener(n,e)}stop(n){if(Vc(this,Nc).has(n))for(const e of Vc(this,Nc).get(n))window.removeEventListener(n,e)}startAll(){for(const n of Vc(this,Nc).keys())this.start(n)}stopAll(){for(const n of Vc(this,Nc).keys())this.stop(n)}clear(){Vc(this,Nc).clear()}}function Gc(n){return!!n.touches}Nc=new WeakMap;class Zc{static randomFloat(n,e){return Math.random()*(e-n)+n}static randomInt(n,e){return Math.floor(Zc.randomFloat(n,e))}static choice(n){const e=n.length;return n[Math.floor(e*Math.random())]}static color(n="0123456789ABCDEF"){return"#"+Zc.choice(n)+Zc.choice(n)+Zc.choice(n)+Zc.choice(n)+Zc.choice(n)+Zc.choice(n)}}var Hc,Wc,Xc,Yc,Qc,Jc,nl,el,tl,ol,rl,al,il,sl,cl,ll,pl,dl,ul,ml,fl,hl,gl,vl,bl,kl=Object.defineProperty,yl=Object.getOwnPropertySymbols,_l=Object.prototype.hasOwnProperty,El=Object.prototype.propertyIsEnumerable,xl=(n,e,t)=>e in n?kl(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,wl=(n,e)=>{for(var t in e||(e={}))_l.call(e,t)&&xl(n,t,e[t]);if(yl)for(var t of yl(e))El.call(e,t)&&xl(n,t,e[t]);return n},Cl=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},Al=(n,e,t)=>(Cl(n,e,"read from private field"),t?t.call(n):e.get(n)),Bl=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},Tl=(n,e,t,o)=>(Cl(n,e,"write to private field"),o?o.call(n,t):e.set(n,t),t),Pl=(n,e,t)=>(Cl(n,e,"access private method"),t);class Sl{constructor(n,e,t,o,r){Bl(this,Hc,void 0),Bl(this,Wc,void 0),Bl(this,Xc,void 0),this.size=t,this.color=o,Tl(this,Xc,0),Tl(this,Hc,r),Tl(this,Wc,e),this.position=wl({},n)}move(){var n,e,t,o;this.position.x=Math.sin(Al(this,Hc))*Al(this,Wc)+this.position.x,this.position.y=Math.cos(Al(this,Hc))*Al(this,Wc)+this.position.y+.3*Al(this,Xc),(n=this,e=Xc,{set _(o){Tl(n,e,o,t)},get _(){return Al(n,e,o)}})._++}shouleRemove(n){return this.position.x<0||this.position.x>n.width||this.position.y>n.height}}Hc=new WeakMap,Wc=new WeakMap,Xc=new WeakMap;Yc=new WeakMap;class Ol{static create(n,e,t,o,r,a){return new(this.shapeMap.get(n))(e,t,o,r,a)}}Ol.shapeMap=new Map([["star",class extends Sl{constructor(n,e,t,o,r){super(n,e,t,o,r),Bl(this,Yc,0)}draw(n,e){n.fillStyle=this.color,n.beginPath();const t=2*this.size,o=this.size;for(let e=0;e<5;e++)n.lineTo(Math.cos((18+72*e-Al(this,Yc))/180*Math.PI)*t+this.position.x,-Math.sin((18+72*e-Al(this,Yc))/180*Math.PI)*t+this.position.y),n.lineTo(Math.cos((54+72*e-Al(this,Yc))/180*Math.PI)*o+this.position.x,-Math.sin((54+72*e-Al(this,Yc))/180*Math.PI)*o+this.position.y);n.fill(),Tl(this,Yc,Al(this,Yc)+5)}}],["circle",class extends Sl{draw(n,e){n.fillStyle=this.color,n.beginPath(),n.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),n.fill()}}]]);class Il{constructor(n,e,t,o){Bl(this,Qc,void 0),this.stopped=!1,Tl(this,Qc,new Set);for(let r=0;r<o;r++){const o=Ol.create(n,e,Zc.randomFloat(1,6),t,Zc.color("89ABCDEF"),Zc.randomFloat(Math.PI-1,Math.PI+1));Al(this,Qc).add(o)}}move(n){for(const e of Al(this,Qc))e.shouleRemove(n)?Al(this,Qc).delete(e):e.move();0===Al(this,Qc).size&&(this.stopped=!0)}draw(n,e){for(const t of Al(this,Qc))t.draw(n,e)}}Qc=new WeakMap;class Dl{constructor({shape:n="star",size:e=2,numParticles:t=10}={},o={}){Bl(this,sl),Bl(this,ll),Bl(this,dl),Bl(this,ml),Bl(this,hl),Bl(this,vl),Bl(this,Jc,void 0),Bl(this,nl,void 0),Bl(this,el,void 0),Bl(this,tl,null),Bl(this,ol,new Set),Bl(this,rl,!1),Bl(this,al,void 0),Bl(this,il,new Kc),Tl(this,Jc,n),Tl(this,nl,e),Tl(this,el,t),Tl(this,al,o),this.animate=this.animate.bind(this)}mount(n){Tl(this,tl,new Lc(n,window.innerWidth,window.innerHeight,!0,!0,Al(this,al))),Pl(this,sl,cl).call(this),function(n,{leftColor:e="#fff",rightColor:t="#444",leftBgColor:o="#35495e",rightBgColor:r="#00ffc0"}={}){console.log(`%c ${n} %c v0.3.3 a117dec %c`,`background: ${o}; padding: 2px; color: ${e}; font-weight: bold; text-transform: uppercase;`,`background: ${r}; padding: 2px; color: ${t}; font-weight: bold; text-transform: uppercase;`,"background: transparent")}("Theme Popper 🎉",{leftBgColor:"#ffb366"})}unmount(){Pl(this,ll,pl).call(this),Tl(this,rl,!1)}animate(){if(Tl(this,rl,!0),0===Al(this,ol).size)return Tl(this,rl,!1),void Al(this,tl).clear();requestAnimationFrame(this.animate);for(const n of Al(this,ol)){if(n.stopped)return void Al(this,ol).delete(n);n.move(Al(this,tl).size)}Al(this,tl).draw((n,e)=>{for(const t of Al(this,ol))t.draw(n,e)}),Al(this,tl).render()}}Jc=new WeakMap,nl=new WeakMap,el=new WeakMap,tl=new WeakMap,ol=new WeakMap,rl=new WeakMap,al=new WeakMap,il=new WeakMap,sl=new WeakSet,cl=function(){/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)?Al(this,il).add("touchstart",Pl(this,dl,ul).bind(this)):Al(this,il).add("mousedown",Pl(this,dl,ul).bind(this)),Al(this,il).add("visibilitychange",Pl(this,hl,gl).bind(this)),Al(this,il).add("resize",function(n,e,t){var o,r,a;void 0===e&&(e=50),void 0===t&&(t={});var i=null!=(o=t.isImmediate)&&o,s=null!=(r=t.callback)&&r,c=t.maxWait,l=Date.now(),p=[];function d(){if(void 0!==c){var n=Date.now()-l;if(n+e>=c)return c-n}return e}var u=function(){var e=[].slice.call(arguments),t=this;return new Promise((function(o,r){var c=i&&void 0===a;if(void 0!==a&&clearTimeout(a),a=setTimeout((function(){if(a=void 0,l=Date.now(),!i){var o=n.apply(t,e);s&&s(o),p.forEach((function(n){return(0,n.resolve)(o)})),p=[]}}),d()),c){var u=n.apply(t,e);return s&&s(u),o(u)}p.push({resolve:o,reject:r})}))};return u.cancel=function(n){void 0!==a&&clearTimeout(a),p.forEach((function(e){return(0,e.reject)(n)})),p=[]},u}(Pl(this,ml,fl).bind(this),500)),Al(this,il).startAll()},ll=new WeakSet,pl=function(){Al(this,il).stopAll(),Al(this,il).clear()},dl=new WeakSet,ul=function(n){const e={x:Gc(n)?n.touches[0].clientX:n.clientX,y:Gc(n)?n.touches[0].clientY:n.clientY},t=new Il(Al(this,Jc),wl({},e),Al(this,nl),Al(this,el));Al(this,ol).add(t),Al(this,rl)||Pl(this,vl,bl).call(this)},ml=new WeakSet,fl=function(n){Al(this,tl).handleResize(n)},hl=new WeakSet,gl=function(n){Al(this,ol).clear(),Tl(this,rl,!1)},vl=new WeakSet,bl=function(){requestAnimationFrame(this.animate)};var zl={name:"CursorEffects",data:()=>({popper:new Dl({shape:"star",size:2},{opacity:1,zIndex:999999999})}),mounted(){this.popper.mount(this.$el)},beforeDestroy(){this.popper.unmount()}},jl=Object(gc.a)(zl,(function(){return(0,this._self._c)("canvas",{attrs:{id:"vuepress-canvas-cursor"}})}),[],!1,null,null,null).exports,ql={name:"ReadingProgress",data:()=>({readingTop:0,readingHeight:1,progressStyle:null,transform:void 0,running:!1}),watch:{$readingShow(){this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)}},mounted(){this.transform=this.getTransform(),this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)},beforeDestroy(){this.$readingShow&&window.removeEventListener("scroll",this.base)},methods:{base(){this.running||(this.running=!0,requestAnimationFrame(this.getReadingBase))},getReadingBase(){this.readingHeight=this.getReadingHeight()-this.getScreenHeight(),this.readingTop=this.getReadingTop(),this.progressStyle=this.getProgressStyle(),this.running=!1},getReadingHeight:()=>Math.max(document.body.scrollHeight,document.body.offsetHeight,0),getScreenHeight:()=>Math.max(window.innerHeight,document.documentElement.clientHeight,0),getReadingTop:()=>Math.max(window.pageYOffset,document.documentElement.scrollTop,0),getTransform(){const n=document.createElement("div");return["transform","-webkit-transform","-moz-transform","-o-transform","-ms-transform"].find(e=>e in n.style)||void 0},getProgressStyle(){const n=this.readingTop/this.readingHeight;switch(this.$readingShow){case"top":case"bottom":return this.transform?`${this.transform}: scaleX(${n})`:`width: ${100*n}%`;case"left":case"right":return this.transform?`${this.transform}: scaleY(${n})`:`height: ${100*n}%`;default:return null}}}},Ml=(t(239),Object(gc.a)(ql,(function(){var n=this._self._c;return n("ClientOnly",[this.$readingShow?n("div",{staticClass:"reading-progress",class:this.$readingShow},[n("div",{staticClass:"progress",style:this.progressStyle})]):this._e()])}),[],!1,null,"3640397f",null).exports),$l={props:{color:{required:!1,default:"rgb(66, 185, 131)"}}},Fl=(t(240),Object(gc.a)($l,(function(){return(0,this._self._c)("div",{staticClass:"spinner",style:{background:this.color}})}),[],!1,null,"1bbcb91a",null).exports);const Rl={name:"Mermaid",props:{id:{type:String,required:!1,default:()=>"diagram_"+Date.now()},graph:{type:String,required:!1}},data:()=>({svg:void 0}),computed:{graphData(){return this.graph?this.graph:this.$slots.default[0].text}},render(n){return void 0===this.svg?n("Loading"):n("div",{class:["mermaid-diagram"],domProps:{innerHTML:this.svg,style:"width: 100%"}})},mounted(){t.e(68).then(t.t.bind(null,329,7)).then(n=>{n.initialize({startOnLoad:!0}),n.render(this.id,this.graphData,n=>{this.svg=n})})},components:{Loading:Fl}};var Ll=[({Vue:n,options:e,router:t,siteData:o})=>{},({Vue:n,options:e,router:t,siteData:o})=>{o.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${wc(n.getUTCMonth()+1)}-${wc(n.getUTCDate())} ${wc(n.getUTCHours())}:${wc(n.getUTCMinutes())}:${wc(n.getUTCSeconds())}`}(e)),t?n.author=t:o.themeConfig.author&&(n.author=o.themeConfig.author)}),n.mixin(xc)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},({Vue:n})=>{n.component("CursorEffects",jl)},({Vue:n})=>{n.component(Ml.name,Ml),n.mixin({computed:{$readingShow(){return this.$page.frontmatter.readingShow}}})},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?f8fd5c4e21ca384b4785396a87bcc468";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))},({Vue:n})=>{n.component(Rl.name,Rl)}],Nl=["CursorEffects","ReadingProgress","PageInfo","BlockToggle"];class Ul extends class{constructor(){this.store=new Kt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Kt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Ul.prototype,{getPageAsyncComponent:as,getLayoutAsyncComponent:is,getAsyncComponent:ss,getVueComponent:cs});var Vl={install(n){const e=new Ul;n.$vuepress=e,n.prototype.$vuepress=e}};function Kl(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Gl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ps("pageKey",e),Kt.component(e)||Kt.component(e,as(e)),Kt.component(e)?n(e):n("")}},Zl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Hl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Wl=(t(241),t(242),Object(gc.a)(Hl,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Xl={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Kt.config.productionTip=!1,Kt.use(Vi),Kt.use(Vl),Kt.mixin(function(n,e,t=Kt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const o=new(n(t.$vuepress.$get("siteData"))),r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(r).reduce((n,e)=>(e.startsWith("$")&&(n[e]=r[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const o in n)"/"===o?t=n[o]:0===this.$page.path.indexOf(o)&&(e=n[o]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,o=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const o=n[t];if(o.path.toLowerCase()===e.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},kc)),Kt.component("Content",Gl),Kt.component("ContentSlotsDistributor",Zl),Kt.component("OutboundLink",Wl),Kt.component("ClientOnly",Xl),Kt.component("Layout",is("Layout")),Kt.component("NotFound",is("NotFound")),Kt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.5",hash:"9db6ce9"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:kc.routerBase||kc.base,t=new Vi({base:e,mode:"history",fallback:!1,routes:bc,scrollBehavior:(n,e,t)=>t||(n.hash?!Kt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,o)=>{if(Kl(n,e.path))o();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Kl(n,t)?o(t):o()}else o();else{const t=e.path+"/",r=e.path+".html";Kl(n,r)?o(r):Kl(n,t)?o(t):o()}})}(t);const o={};try{await Promise.all(Ll.filter(n=>"function"==typeof n).map(e=>e({Vue:Kt,options:o,router:t,siteData:kc,isServer:n})))}catch(n){console.error(n)}return{app:new Kt(Object.assign(o,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Nl.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);